/* Generated by Cython 0.29.26 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_26"
#define CYTHON_HEX_VERSION 0x001D1AF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pygambit__lib__libgambit
#define __PYX_HAVE_API__pygambit__lib__libgambit
/* Early includes */
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "gambit.h"
#include "core/rational.h"
#include "core/number.h"
#include "core/array.h"
#include "core/list.h"
#include "games/game.h"
#include "games/mixed.h"
#include "games/behav.h"
#include "games/stratspt.h"
#include "util.h"
#include "solvers/enumpure/enumpure.h"
#include "solvers/enummixed/enummixed.h"
#include "solvers/lcp/lcp.h"
#include "tools/lp/nfglp.h"
#include "tools/lp/efglp.h"
#include "solvers/simpdiv/simpdiv.h"
#include "solvers/ipa/ipa.h"
#include "solvers/gnm/gnm.h"
#include "tools/logit/nfglogit.h"
#include "nash.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pygambit/lib/libgambit.pyx",
  "pygambit/lib/mixed.pxi",
  "pygambit/lib/stratspt.pxi",
  "pygambit/lib/behav.pxi",
  "pygambit/lib/nash.pxi",
  "stringsource",
  "pygambit/lib/action.pxi",
  "pygambit/lib/infoset.pxi",
  "pygambit/lib/strategy.pxi",
  "pygambit/lib/player.pxi",
  "pygambit/lib/outcome.pxi",
  "pygambit/lib/node.pxi",
  "pygambit/lib/game.pxi",
  "pygambit/lib/basegame.pxi",
};

/*--- Type declarations ---*/
struct __pyx_obj_8pygambit_3lib_9libgambit_Collection;
struct __pyx_obj_8pygambit_3lib_9libgambit_Action;
struct __pyx_obj_8pygambit_3lib_9libgambit_Members;
struct __pyx_obj_8pygambit_3lib_9libgambit_Actions;
struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset;
struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy;
struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets;
struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies;
struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies;
struct __pyx_obj_8pygambit_3lib_9libgambit_Player;
struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome;
struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome;
struct __pyx_obj_8pygambit_3lib_9libgambit_Children;
struct __pyx_obj_8pygambit_3lib_9libgambit_Node;
struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame;
struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile;
struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes;
struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies;
struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction;
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile;
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble;
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational;
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile;
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble;
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational;
struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes;
struct __pyx_obj_8pygambit_3lib_9libgambit_Players;
struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions;
struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets;
struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies;
struct __pyx_obj_8pygambit_3lib_9libgambit_Game;
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver;
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver;
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble;
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational;
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver;
struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble;
struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational;
struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble;
struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational;
struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble;
struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational;
struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble;
struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational;
struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver;
struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver;
struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver;
struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr;
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr;

/* "pygambit/lib/libgambit.pyx":398
 * 
 * 
 * cdef class Collection(object):             # <<<<<<<<<<<<<<
 *     "Represents a collection of related objects in a game."
 *     def __repr__(self):   return str(list(self))
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Collection {
  PyObject_HEAD
};


/* "pygambit/lib/action.pxi":25
 * from pygambit.lib.error import UndefinedOperationError
 * 
 * cdef class Action:             # <<<<<<<<<<<<<<
 *     cdef c_GameAction action
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Action {
  PyObject_HEAD
  GameObjectPtr<GameActionRep> action;
};


/* "pygambit/lib/infoset.pxi":24
 * from pygambit.lib.error import MismatchError
 * 
 * cdef class Members(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of members of an infoset."
 *     cdef c_GameInfoset infoset
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Members {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameInfosetRep> infoset;
};


/* "pygambit/lib/infoset.pxi":35
 *         return n
 * 
 * cdef class Actions(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of actions at an infoset."
 *     cdef c_GameInfoset infoset
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Actions {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameInfosetRep> infoset;
};


/* "pygambit/lib/infoset.pxi":57
 *         return a
 * 
 * cdef class Infoset:             # <<<<<<<<<<<<<<
 *     cdef c_GameInfoset infoset
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset {
  PyObject_HEAD
  GameObjectPtr<GameInfosetRep> infoset;
};


/* "pygambit/lib/strategy.pxi":24
 * from .error import UndefinedOperationError
 * 
 * cdef class Strategy:             # <<<<<<<<<<<<<<
 *     cdef c_GameStrategy strategy
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy {
  PyObject_HEAD
  GameObjectPtr<GameStrategyRep> strategy;
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "pygambit/lib/player.pxi":24
 * from .error import UndefinedOperationError
 * 
 * cdef class Infosets(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of infosets for a player."
 *     cdef c_GamePlayer player
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GamePlayerRep> player;
};


/* "pygambit/lib/player.pxi":35
 *         return s
 * 
 * cdef class Strategies(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of strategies for a player."
 *     cdef c_GamePlayer player
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GamePlayerRep> player;
};


/* "pygambit/lib/player.pxi":59
 *         return s
 * 
 * cdef class PlayerSupportStrategies(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of strategies for a player in a restriction"
 *     cdef Player player
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *player;
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "pygambit/lib/player.pxi":83
 *         return s
 * 
 * cdef class Player:             # <<<<<<<<<<<<<<
 *     cdef c_GamePlayer player
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Player {
  PyObject_HEAD
  GameObjectPtr<GamePlayerRep> player;
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "pygambit/lib/outcome.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * cdef class Outcome:             # <<<<<<<<<<<<<<
 *     cdef c_GameOutcome outcome
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome {
  PyObject_HEAD
  GameObjectPtr<GameOutcomeRep> outcome;
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "pygambit/lib/outcome.pxi":106
 *         return o
 * 
 * cdef class TreeGameOutcome:             # <<<<<<<<<<<<<<
 *     "Represents an outcome in a strategic game derived from an extensive game."
 *     cdef c_PureStrategyProfile *psp
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome {
  PyObject_HEAD
  PureStrategyProfile *psp;
  GameObjectPtr<GameRep> c_game;
};


/* "pygambit/lib/node.pxi":24
 * from .error import MismatchError, UndefinedOperationError
 * 
 * cdef class Children(Collection):             # <<<<<<<<<<<<<<
 *     "Represents the collection of direct children of a node."
 *     cdef c_GameNode parent
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Children {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameNodeRep> parent;
};


/* "pygambit/lib/node.pxi":35
 *         return n
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef c_GameNode node
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Node {
  PyObject_HEAD
  GameObjectPtr<GameNodeRep> node;
};


/* "pygambit/lib/basegame.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * cdef class BaseGame:             # <<<<<<<<<<<<<<
 * 	pass
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame {
  PyObject_HEAD
};


/* "pygambit/lib/stratspt.pxi":27
 * from .error import UndefinedOperationError
 * 
 * cdef class StrategySupportProfile(Collection):             # <<<<<<<<<<<<<<
 *     """
 *     A set-like object representing a subset of the strategies in game, incorporating
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  StrategySupportProfile *support;
};


/* "pygambit/lib/stratspt.pxi":152
 *             return g
 * 
 * cdef class RestrictionOutcomes(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of outcomes in a restriction."
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "pygambit/lib/stratspt.pxi":170
 *         raise UndefinedOperationError("Changing objects in a restriction is not supported")
 * 
 * cdef class RestrictionStrategies(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of strategies in a restriction."
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "pygambit/lib/stratspt.pxi":192
 *         raise IndexError("Index out of range")
 * 
 * cdef class StrategicRestriction(BaseGame):             # <<<<<<<<<<<<<<
 *     """
 *     A StrategicRestriction is a read-only view on a game, defined by a
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction {
  struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame __pyx_base;
  StrategySupportProfile *support;
};


/* "pygambit/lib/mixed.pxi":32
 * 
 * 
 * cdef class MixedStrategyProfile(object):             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile {
  PyObject_HEAD
};


/* "pygambit/lib/mixed.pxi":181
 *         return self._strategy_value_deriv((<Player>player).player.deref().GetNumber(), strategy1, strategy2)
 * 
 * cdef class MixedStrategyProfileDouble(MixedStrategyProfile):             # <<<<<<<<<<<<<<
 *     cdef c_MixedStrategyProfileDouble *profile
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile __pyx_base;
  MixedStrategyProfile<double>  *profile;
};


/* "pygambit/lib/mixed.pxi":246
 * 
 * 
 * cdef class MixedStrategyProfileRational(MixedStrategyProfile):             # <<<<<<<<<<<<<<
 *     cdef c_MixedStrategyProfileRational *profile
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile __pyx_base;
  MixedStrategyProfile<Rational>  *profile;
};


/* "pygambit/lib/behav.pxi":27
 * from cython.operator cimport dereference as deref
 * 
 * cdef class MixedBehaviorProfile(object):             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile {
  PyObject_HEAD
};


/* "pygambit/lib/behav.pxi":238
 *         return self._regret(action)
 * 
 * cdef class MixedBehaviorProfileDouble(MixedBehaviorProfile):             # <<<<<<<<<<<<<<
 *     cdef c_MixedBehaviorProfileDouble *profile
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile __pyx_base;
  MixedBehaviorProfile<double>  *profile;
};


/* "pygambit/lib/behav.pxi":299
 * 
 * 
 * cdef class MixedBehaviorProfileRational(MixedBehaviorProfile):             # <<<<<<<<<<<<<<
 *     cdef c_MixedBehaviorProfileRational *profile
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile __pyx_base;
  MixedBehaviorProfile<Rational>  *profile;
};


/* "pygambit/lib/game.pxi":28
 * import pygambit.gte
 * 
 * cdef class Outcomes(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of outcomes in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
};


/* "pygambit/lib/game.pxi":46
 *         return c
 * 
 * cdef class Players(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of players in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Players {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "pygambit/lib/game.pxi":77
 *             return p
 * 
 * cdef class GameActions(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of actions in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
};


/* "pygambit/lib/game.pxi":90
 *         return a
 * 
 * cdef class GameInfosets(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of infosets in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
};


/* "pygambit/lib/game.pxi":109
 *         return i
 * 
 * cdef class GameStrategies(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of strategies in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
};


/* "pygambit/lib/game.pxi":122
 *         return s
 * 
 * cdef class Game(object):             # <<<<<<<<<<<<<<
 *     cdef c_Game game
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_Game {
  PyObject_HEAD
  GameObjectPtr<GameRep> game;
};


/* "pygambit/lib/nash.pxi":32
 *         c_List[c_MixedBehaviorProfileRational] Solve(c_Game) except +RuntimeError
 * 
 * cdef class EnumPureStrategySolver(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashEnumPureStrategySolver *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver {
  PyObject_HEAD
  EnumPureStrategySolver *alg;
};


/* "pygambit/lib/nash.pxi":50
 *         return ret
 * 
 * cdef class EnumPureAgentSolver(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashEnumPureAgentSolver *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver {
  PyObject_HEAD
  EnumPureAgentSolver *alg;
};


/* "pygambit/lib/nash.pxi":81
 *         c_List[c_MixedStrategyProfileRational] Solve(c_Game) except +RuntimeError
 * 
 * cdef class EnumMixedStrategySolverDouble(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashEnumMixedStrategySolverDouble *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble {
  PyObject_HEAD
  EnumMixedStrategySolver<double> *alg;
};


/* "pygambit/lib/nash.pxi":99
 *         return ret
 * 
 * cdef class EnumMixedStrategySolverRational(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashEnumMixedStrategySolverRational *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational {
  PyObject_HEAD
  EnumMixedStrategySolver<Rational> *alg;
};


/* "pygambit/lib/nash.pxi":117
 *         return ret
 * 
 * cdef class EnumMixedLrsStrategySolver(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashEnumMixedLrsStrategySolver *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver {
  PyObject_HEAD
  EnumMixedLrsStrategySolver *alg;
};


/* "pygambit/lib/nash.pxi":153
 * 
 * 
 * cdef class LCPBehaviorSolverDouble(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLcpBehaviorSolverDouble *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble {
  PyObject_HEAD
  NashLcpBehaviorSolver<double> *alg;
};


/* "pygambit/lib/nash.pxi":171
 *         return ret
 * 
 * cdef class LCPBehaviorSolverRational(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLcpBehaviorSolverRational *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational {
  PyObject_HEAD
  NashLcpBehaviorSolver<Rational> *alg;
};


/* "pygambit/lib/nash.pxi":189
 *         return ret
 * 
 * cdef class LCPStrategySolverDouble(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLcpStrategySolverDouble *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble {
  PyObject_HEAD
  NashLcpStrategySolver<double> *alg;
};


/* "pygambit/lib/nash.pxi":207
 *         return ret
 * 
 * cdef class LCPStrategySolverRational(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLcpStrategySolverRational *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational {
  PyObject_HEAD
  NashLcpStrategySolver<Rational> *alg;
};


/* "pygambit/lib/nash.pxi":245
 * 
 * 
 * cdef class LPBehaviorSolverDouble(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLpBehavSolverDouble *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble {
  PyObject_HEAD
  NashLpBehavSolver<double> *alg;
};


/* "pygambit/lib/nash.pxi":263
 *         return ret
 * 
 * cdef class LPBehaviorSolverRational(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLpBehavSolverRational *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational {
  PyObject_HEAD
  NashLpBehavSolver<Rational> *alg;
};


/* "pygambit/lib/nash.pxi":281
 *         return ret
 * 
 * cdef class LPStrategySolverDouble(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLpStrategySolverDouble *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble {
  PyObject_HEAD
  NashLpStrategySolver<double> *alg;
};


/* "pygambit/lib/nash.pxi":299
 *         return ret
 * 
 * cdef class LPStrategySolverRational(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLpStrategySolverRational *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational {
  PyObject_HEAD
  NashLpStrategySolver<Rational> *alg;
};


/* "pygambit/lib/nash.pxi":324
 *         c_List[c_MixedStrategyProfileRational] Solve(c_MixedStrategyProfileRational) except +RuntimeError
 * 
 * cdef class SimpdivStrategySolver(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashSimpdivStrategySolver *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver {
  PyObject_HEAD
  NashSimpdivStrategySolver *alg;
};


/* "pygambit/lib/nash.pxi":347
 *         c_List[c_MixedStrategyProfileDouble] Solve(c_Game) except +RuntimeError
 * 
 * cdef class IPAStrategySolver(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashIPAStrategySolver *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver {
  PyObject_HEAD
  NashIPAStrategySolver *alg;
};


/* "pygambit/lib/nash.pxi":370
 *         c_List[c_MixedStrategyProfileDouble] Solve(c_Game) except +RuntimeError
 * 
 * cdef class GNMStrategySolver(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashGNMStrategySolver *alg
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver {
  PyObject_HEAD
  NashGNMStrategySolver *alg;
};


/* "pygambit/lib/nash.pxi":412
 *     c_List[c_LogitQREMixedStrategyProfile] _logit_principal_branch "logit_principal_branch"(c_Game, double)
 * 
 * cdef class LogitQREMixedStrategyProfile(object):             # <<<<<<<<<<<<<<
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):
 */
struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile {
  PyObject_HEAD
  LogitQREMixedStrategyProfile *thisptr;
};


/* "pygambit/lib/stratspt.pxi":95
 *         raise NotImplementedError
 * 
 *     def remove(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, Strategy):
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove {
  PyObject_HEAD
  PyObject *__pyx_v_strategy;
};


/* "pygambit/lib/stratspt.pxi":106
 *         raise TypeError("delete requires a Strategy object")
 * 
 *     def difference(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference {
  PyObject_HEAD
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other;
};


/* "pygambit/lib/stratspt.pxi":109
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)
 * 
 *     def intersection(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(filter(lambda x: x in other, self)), self.game)
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection {
  PyObject_HEAD
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other;
};


/* "pygambit/lib/stratspt.pxi":118
 *         return False
 * 
 *     def issubset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return functools.reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset {
  PyObject_HEAD
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other;
};


/* "pygambit/lib/mixed.pxi":53
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index {
  PyObject_HEAD
  PyObject *__pyx_v_index;
};


/* "pygambit/lib/mixed.pxi":93
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "pygambit/lib/mixed.pxi":95
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pygambit/lib/behav.pxi":47
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index {
  PyObject_HEAD
  PyObject *__pyx_v_index;
};


/* "pygambit/lib/behav.pxi":114
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "pygambit/lib/behav.pxi":116
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pygambit/lib/behav.pxi":135
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "pygambit/lib/behav.pxi":137
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pygambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays {
  PyObject_HEAD
  PyObject *__pyx_v_arrays;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g;
};


/* "pygambit/lib/game.pxi":147
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *__pyx_outer_scope;
  PyObject *__pyx_v_a;
};


/* "pygambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(range(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in range(len(g.players)))):
 *             for pl in range(len(g.players)):
 */
struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *__pyx_outer_scope;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'pygambit.lib.libgambit' */
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Collection = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Action = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Members = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Actions = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Infoset = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Strategy = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Infosets = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Strategies = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_PlayerSupportStrategies = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Player = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Outcome = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_TreeGameOutcome = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Children = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Node = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_BaseGame = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_RestrictionOutcomes = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_RestrictionStrategies = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfile = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfile = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Outcomes = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Players = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_GameActions = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_GameInfosets = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_GameStrategies = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_Game = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_EnumPureStrategySolver = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_EnumPureAgentSolver = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_LCPStrategySolverDouble = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_LCPStrategySolverRational = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_LPBehaviorSolverRational = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_LPStrategySolverDouble = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_LPStrategySolverRational = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_SimpdivStrategySolver = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_IPAStrategySolver = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_GNMStrategySolver = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct__remove = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr = 0;
static PyTypeObject *__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr = 0;
static PyObject *__pyx_f_8pygambit_3lib_9libgambit_rat_to_py(Rational); /*proto*/
static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_Collection__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *, PyObject *); /*proto*/
static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_PlayerSupportStrategies__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *, PyObject *); /*proto*/
static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_BaseGame__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame *, PyObject *); /*proto*/
static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_RestrictionOutcomes__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *, PyObject *); /*proto*/
static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_RestrictionStrategies__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *, PyObject *); /*proto*/
static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_MixedStrategyProfile__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *, PyObject *); /*proto*/
static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_MixedBehaviorProfile__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pygambit.lib.libgambit"
extern int __pyx_module_is_main_pygambit__lib__libgambit;
int __pyx_module_is_main_pygambit__lib__libgambit = 0;

/* Implementation of 'pygambit.lib.libgambit' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_filter;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_xrange;
static const char __pyx_k_i[] = "i";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_s[] = "$%s$";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k__2[] = ".";
static const char __pyx_k_eq[] = "__eq__";
static const char __pyx_k_pl[] = "pl";
static const char __pyx_k_s1[] = "s1";
static const char __pyx_k_s2[] = "s2";
static const char __pyx_k_st[] = "st";
static const char __pyx_k__19[] = "";
static const char __pyx_k__30[] = ",";
static const char __pyx_k__46[] = "$";
static const char __pyx_k_acc[] = "acc";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_gte[] = "gte";
static const char __pyx_k_lam[] = "lam";
static const char __pyx_k_len[] = "__len__";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_nfg[] = "nfg";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_s_2[] = "(%s)";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Game[] = "Game";
static const char __pyx_k_Node[] = "Node";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_game[] = "game";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_left[] = "$\\left[";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_denom[] = "denom";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_right[] = "\\right]$";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_solns[] = "solns";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_title[] = "title";
static const char __pyx_k_union[] = "union";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_Action[] = "Action";
static const char __pyx_k_Filler[] = "Filler";
static const char __pyx_k_Game_s[] = "<Game '%s'>";
static const char __pyx_k_Player[] = "Player";
static const char __pyx_k_action[] = "action";
static const char __pyx_k_belief[] = "_belief";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_native[] = "native";
static const char __pyx_k_number[] = "number";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_p_game[] = "p_game";
static const char __pyx_k_payoff[] = "_payoff";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_player[] = "player";
static const char __pyx_k_reduce[] = "reduce";
static const char __pyx_k_regret[] = "_regret";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_strict[] = "strict";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_Actions[] = "Actions";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_Infoset[] = "Infoset";
static const char __pyx_k_Members[] = "Members";
static const char __pyx_k_Outcome[] = "Outcome";
static const char __pyx_k_Players[] = "Players";
static const char __pyx_k_actions[] = "actions";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_getitem[] = "__getitem__";
static const char __pyx_k_getprob[] = "_getprob";
static const char __pyx_k_infoset[] = "infoset";
static const char __pyx_k_is_tree[] = "is_tree";
static const char __pyx_k_members[] = "members";
static const char __pyx_k_players[] = "players";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_product[] = "product";
static const char __pyx_k_profile[] = "profile";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_setitem[] = "__setitem__";
static const char __pyx_k_setprob[] = "_setprob";
static const char __pyx_k_BaseGame[] = "BaseGame";
static const char __pyx_k_Children[] = "Children";
static const char __pyx_k_Fraction[] = "Fraction";
static const char __pyx_k_Infosets[] = "Infosets";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Outcomes[] = "Outcomes";
static const char __pyx_k_Rational[] = "Rational";
static const char __pyx_k_Strategy[] = "Strategy";
static const char __pyx_k_children[] = "children";
static const char __pyx_k_external[] = "external";
static const char __pyx_k_frac_s_s[] = "$\\frac{%s}{%s}$";
static const char __pyx_k_gameiter[] = "gameiter";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_infosets[] = "infosets";
static const char __pyx_k_is_valid[] = "is_valid";
static const char __pyx_k_issubset[] = "issubset";
static const char __pyx_k_new_tree[] = "new_tree";
static const char __pyx_k_outcomes[] = "outcomes";
static const char __pyx_k_p_lambda[] = "p_lambda";
static const char __pyx_k_payoff_2[] = "payoff";
static const char __pyx_k_pygambit[] = "pygambit";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_rational[] = "rational";
static const char __pyx_k_reduce_2[] = "__reduce__";
static const char __pyx_k_restrict[] = "restrict";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_strategy[] = "strategy";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_fillvalue[] = "fillvalue";
static const char __pyx_k_fractions[] = "fractions";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_getaction[] = "_getaction";
static const char __pyx_k_is_chance[] = "is_chance";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_new_table[] = "new_table";
static const char __pyx_k_numerator[] = "numerator";
static const char __pyx_k_p_profile[] = "p_profile";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_read_game[] = "read_game";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_setaction[] = "_setaction";
static const char __pyx_k_setplayer[] = "_setplayer";
static const char __pyx_k_strategy1[] = "strategy1";
static const char __pyx_k_strategy2[] = "strategy2";
static const char __pyx_k_Collection[] = "Collection";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_MixedBehav[] = "MixedBehav";
static const char __pyx_k_Strategies[] = "Strategies";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_difference[] = "difference";
static const char __pyx_k_issuperset[] = "issuperset";
static const char __pyx_k_max_payoff[] = "max_payoff";
static const char __pyx_k_min_payoff[] = "min_payoff";
static const char __pyx_k_p_maxDepth[] = "p_maxDepth";
static const char __pyx_k_parse_game[] = "parse_game";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_repr_latex[] = "_repr_latex_";
static const char __pyx_k_setinfoset[] = "_setinfoset";
static const char __pyx_k_strategies[] = "strategies";
static const char __pyx_k_unrestrict[] = "unrestrict";
static const char __pyx_k_write_game[] = "write_game";
static const char __pyx_k_GameActions[] = "GameActions";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_action_prob[] = "_action_prob";
static const char __pyx_k_denominator[] = "denominator";
static const char __pyx_k_from_arrays[] = "from_arrays";
static const char __pyx_k_num_players[] = "num_players";
static const char __pyx_k_p_maxLambda[] = "p_maxLambda";
static const char __pyx_k_p_stopAfter[] = "p_stopAfter";
static const char __pyx_k_restriction[] = "restriction";
static const char __pyx_k_zip_longest[] = "zip_longest";
static const char __pyx_k_GameInfosets[] = "GameInfosets";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_infoset_prob[] = "_infoset_prob";
static const char __pyx_k_intersection[] = "intersection";
static const char __pyx_k_is_const_sum[] = "is_const_sum";
static const char __pyx_k_izip_longest[] = "izip_longest";
static const char __pyx_k_pygambit_gte[] = "pygambit.gte";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_Contingencies[] = "Contingencies";
static const char __pyx_k_MismatchError[] = "MismatchError";
static const char __pyx_k_MixedStrategy[] = "MixedStrategy";
static const char __pyx_k_action_payoff[] = "_action_payoff";
static const char __pyx_k_is_defined_at[] = "_is_defined_at";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_resolve_index[] = "_resolve_index";
static const char __pyx_k_GameStrategies[] = "GameStrategies";
static const char __pyx_k_infoset_payoff[] = "_infoset_payoff";
static const char __pyx_k_logit_atlambda[] = "logit_atlambda";
static const char __pyx_k_logit_estimate[] = "logit_estimate";
static const char __pyx_k_setprob_player[] = "_setprob_player";
static const char __pyx_k_strategy_value[] = "_strategy_value";
static const char __pyx_k_TreeGameOutcome[] = "TreeGameOutcome";
static const char __pyx_k_get_contingency[] = "_get_contingency";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_strategy_values[] = "strategy_values";
static const char __pyx_k_getprob_strategy[] = "_getprob_strategy";
static const char __pyx_k_setprob_strategy[] = "_setprob_strategy";
static const char __pyx_k_strategy_value_2[] = "strategy_value";
static const char __pyx_k_GNMStrategySolver[] = "GNMStrategySolver";
static const char __pyx_k_IPAStrategySolver[] = "IPAStrategySolver";
static const char __pyx_k_MixedBehavInfoset[] = "MixedBehavInfoset";
static const char __pyx_k_is_perfect_recall[] = "is_perfect_recall";
static const char __pyx_k_Index_out_of_range[] = "Index out of range";
static const char __pyx_k_Node_d_s_in_game_s[] = "<Node [%d] '%s' in game '%s'>";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_pygambit_lib_error[] = "pygambit.lib.error";
static const char __pyx_k_EnumPureAgentSolver[] = "EnumPureAgentSolver";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_Outcome_s_in_game_s[] = "<Outcome '%s' in game '%s'>";
static const char __pyx_k_RestrictionOutcomes[] = "RestrictionOutcomes";
static const char __pyx_k_no_matching_label_s[] = "no matching label '%s'";
static const char __pyx_k_MixedBehaviorProfile[] = "MixedBehaviorProfile";
static const char __pyx_k_MixedStrategyProfile[] = "MixedStrategyProfile";
static const char __pyx_k_Player_d_s_in_game_s[] = "<Player [%d] '%s' in game '%s'>";
static const char __pyx_k_Rational__repr_latex[] = "Rational._repr_latex_";
static const char __pyx_k_StrategicRestriction[] = "StrategicRestriction";
static const char __pyx_k_remove_locals_lambda[] = "remove.<locals>.<lambda>";
static const char __pyx_k_strategy_value_deriv[] = "_strategy_value_deriv";
static const char __pyx_k_Outcome_d_s_in_game_s[] = "<Outcome [%d] '%s' in game '%s'>";
static const char __pyx_k_RestrictionStrategies[] = "RestrictionStrategies";
static const char __pyx_k_SimpdivStrategySolver[] = "SimpdivStrategySolver";
static const char __pyx_k_num_strategies_player[] = "num_strategies_player";
static const char __pyx_k_pygambit_lib_nash_pxi[] = "pygambit/lib/nash.pxi";
static const char __pyx_k_pyx_unpickle_BaseGame[] = "__pyx_unpickle_BaseGame";
static const char __pyx_k_EnumPureStrategySolver[] = "EnumPureStrategySolver";
static const char __pyx_k_LPBehaviorSolverDouble[] = "LPBehaviorSolverDouble";
static const char __pyx_k_LPStrategySolverDouble[] = "LPStrategySolverDouble";
static const char __pyx_k_StrategySupportProfile[] = "StrategySupportProfile";
static const char __pyx_k_issubset_locals_lambda[] = "issubset.<locals>.<lambda>";
static const char __pyx_k_logit_principal_branch[] = "logit_principal_branch";
static const char __pyx_k_mixed_strategy_profile[] = "mixed_strategy_profile";
static const char __pyx_k_must_support_iteration[] = "must support iteration";
static const char __pyx_k_no_object_with_label_s[] = "no object with label '%s'";
static const char __pyx_k_pygambit_lib_behav_pxi[] = "pygambit/lib/behav.pxi";
static const char __pyx_k_pygambit_lib_libgambit[] = "pygambit.lib.libgambit";
static const char __pyx_k_pygambit_lib_mixed_pxi[] = "pygambit/lib/mixed.pxi";
static const char __pyx_k_LCPBehaviorSolverDouble[] = "LCPBehaviorSolverDouble";
static const char __pyx_k_LCPStrategySolverDouble[] = "LCPStrategySolverDouble";
static const char __pyx_k_PlayerSupportStrategies[] = "PlayerSupportStrategies";
static const char __pyx_k_Player_CHANCE_in_game_s[] = "<Player [CHANCE] in game '%s'>";
static const char __pyx_k_Restriction_from_Game_s[] = "Restriction from Game '%s'";
static const char __pyx_k_UndefinedOperationError[] = "UndefinedOperationError";
static const char __pyx_k_pyx_unpickle_Collection[] = "__pyx_unpickle_Collection";
static const char __pyx_k_LPBehaviorSolverRational[] = "LPBehaviorSolverRational";
static const char __pyx_k_LPStrategySolverRational[] = "LPStrategySolverRational";
static const char __pyx_k_difference_locals_lambda[] = "difference.<locals>.<lambda>";
static const char __pyx_k_LCPBehaviorSolverRational[] = "LCPBehaviorSolverRational";
static const char __pyx_k_LCPStrategySolverRational[] = "LCPStrategySolverRational";
static const char __pyx_k_invalid_set_of_strategies[] = "invalid set of strategies";
static const char __pyx_k_EnumMixedLrsStrategySolver[] = "EnumMixedLrsStrategySolver";
static const char __pyx_k_MixedBehaviorProfileDouble[] = "MixedBehaviorProfileDouble";
static const char __pyx_k_MixedStrategyProfileDouble[] = "MixedStrategyProfileDouble";
static const char __pyx_k_from_arrays_locals_genexpr[] = "from_arrays.<locals>.genexpr";
static const char __pyx_k_intersection_locals_lambda[] = "intersection.<locals>.<lambda>";
static const char __pyx_k_no_action_matching_label_s[] = "no action matching label '%s'";
static const char __pyx_k_pygambit_lib_libgambit_pyx[] = "pygambit/lib/libgambit.pyx";
static const char __pyx_k_getitem___locals_MixedBehav[] = "__getitem__.<locals>.MixedBehav";
static const char __pyx_k_no_infoset_matching_label_s[] = "no infoset matching label '%s'";
static const char __pyx_k_resolve_index_locals_lambda[] = "_resolve_index.<locals>.<lambda>";
static const char __pyx_k_LogitQREMixedStrategyProfile[] = "LogitQREMixedStrategyProfile";
static const char __pyx_k_MixedBehaviorProfileRational[] = "MixedBehaviorProfileRational";
static const char __pyx_k_MixedStrategyProfileRational[] = "MixedStrategyProfileRational";
static const char __pyx_k_no_strategy_matching_label_s[] = "no strategy matching label '%s'";
static const char __pyx_k_setprob_player_locals_Filler[] = "_setprob_player.<locals>.Filler";
static const char __pyx_k_EnumMixedStrategySolverDouble[] = "EnumMixedStrategySolverDouble";
static const char __pyx_k_getitem___locals_MixedBehav_2[] = "__getitem__.<locals>.MixedBehav.__init__";
static const char __pyx_k_getitem___locals_MixedBehav_3[] = "__getitem__.<locals>.MixedBehav.__eq__";
static const char __pyx_k_getitem___locals_MixedBehav_4[] = "__getitem__.<locals>.MixedBehav.__len__";
static const char __pyx_k_getitem___locals_MixedBehav_5[] = "__getitem__.<locals>.MixedBehav.__repr__";
static const char __pyx_k_getitem___locals_MixedBehav_6[] = "__getitem__.<locals>.MixedBehav.__getitem__";
static const char __pyx_k_getitem___locals_MixedBehav_7[] = "__getitem__.<locals>.MixedBehav.__setitem__";
static const char __pyx_k_append_move_requires_actions_1[] = "append_move requires actions >= 1";
static const char __pyx_k_getitem___locals_MixedBehavInf[] = "__getitem__.<locals>.MixedBehavInfoset._repr_latex_.<locals>.genexpr";
static const char __pyx_k_getitem___locals_MixedBehav__r[] = "__getitem__.<locals>.MixedBehav._repr_latex_.<locals>.genexpr";
static const char __pyx_k_getitem___locals_MixedStrategy[] = "__getitem__.<locals>.MixedStrategy._repr_latex_.<locals>.genexpr";
static const char __pyx_k_insert_move_requires_actions_1[] = "insert_move requires actions >= 1";
static const char __pyx_k_pyx_unpickle_MixedBehaviorProf[] = "__pyx_unpickle_MixedBehaviorProfile";
static const char __pyx_k_pyx_unpickle_MixedStrategyProf[] = "__pyx_unpickle_MixedStrategyProfile";
static const char __pyx_k_pyx_unpickle_PlayerSupportStra[] = "__pyx_unpickle_PlayerSupportStrategies";
static const char __pyx_k_pyx_unpickle_RestrictionOutcom[] = "__pyx_unpickle_RestrictionOutcomes";
static const char __pyx_k_pyx_unpickle_RestrictionStrate[] = "__pyx_unpickle_RestrictionStrategies";
static const char __pyx_k_Action_d_s_at_infoset_s_for_pla[] = "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>";
static const char __pyx_k_EnumMixedStrategySolverRational[] = "EnumMixedStrategySolverRational";
static const char __pyx_k_Infoset_d_s_for_player_s_in_gam[] = "<Infoset [%d] '%s' for player '%s' in game '%s'>";
static const char __pyx_k_Mixed_behavior_profiles_are_not[] = "Mixed behavior profiles are not defined for strategic games";
static const char __pyx_k_Precedes_takes_a_Node_object_as[] = "Precedes takes a Node object as its input";
static const char __pyx_k_Strategy_d_s_for_player_s_in_ga[] = "<Strategy [%d] '%s' for player '%s' in game '%s'>";
static const char __pyx_k_Unable_to_read_game_from_file_s[] = "Unable to read game from file '%s': %s";
static const char __pyx_k_append_move_can_only_be_applied[] = "append_move can only be applied at a terminal node";
static const char __pyx_k_multiple_actions_matching_label[] = "multiple actions matching label '%s'";
static const char __pyx_k_player_index_must_be_int_str_or[] = "player index must be int, str, or Player, not %s";
static const char __pyx_k_player_index_should_be_a_Player[] = "player index should be a Player, int or str instance; {} passed";
static const char __pyx_k_profile_indexes_must_be_int_str[] = "profile indexes must be int, str, Player, or Strategy, not %s";
static const char __pyx_k_self_action_cannot_be_converted[] = "self.action cannot be converted to a Python object for pickling";
static const char __pyx_k_self_parent_cannot_be_converted[] = "self.parent cannot be converted to a Python object for pickling";
static const char __pyx_k_self_player_cannot_be_converted[] = "self.player cannot be converted to a Python object for pickling";
static const char __pyx_k_value_list_length_must_be_s_not[] = "value list length must be %s, not %s";
static const char __pyx_k_Adding_strategies_is_only_applic[] = "Adding strategies is only applicable to games in strategic form";
static const char __pyx_k_All_specified_arrays_must_have_t[] = "All specified arrays must have the same shape";
static const char __pyx_k_Another_outcome_with_an_identica[] = "Another outcome with an identical label exists";
static const char __pyx_k_Another_player_with_an_identical[] = "Another player with an identical label exists";
static const char __pyx_k_Cannot_modify_outcomes_in_a_deri[] = "Cannot modify outcomes in a derived strategic game.";
static const char __pyx_k_Changing_objects_in_a_restrictio[] = "Changing objects in a restriction is not supported";
static const char __pyx_k_Changing_objects_in_a_support_is[] = "Changing objects in a support is not supported";
static const char __pyx_k_Game_must_have_a_tree_representa[] = "Game must have a tree representation to create a mixed behavior profile";
static const char __pyx_k_Incompatible_checksums_s_vs_0x3d[] = "Incompatible checksums (%s vs 0x3dadfae = (restriction))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x4b[] = "Incompatible checksums (%s vs 0x4bcef00 = (player, restriction))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_LogitQREMixedStrategyProfile_lam[] = "LogitQREMixedStrategyProfile(lam=%f,profile=%s)";
static const char __pyx_k_Mixed_strategies_not_supported_f[] = "Mixed strategies not supported for games with imperfect recall.";
static const char __pyx_k_Must_use_a_tuple_of_ints_strateg[] = "Must use a tuple of ints, strategy labels, or strategies";
static const char __pyx_k_Number_of_strategies_is_not_equa[] = "Number of strategies is not equal to the number of players";
static const char __pyx_k_Operation_only_defined_for_games[] = "Operation only defined for games with a tree representation";
static const char __pyx_k_Provided_strategy_index_d_out_of[] = "Provided strategy index %d out of range for player %d";
static const char __pyx_k_Provided_strategy_label_s_not_de[] = "Provided strategy label '%s' not defined";
static const char __pyx_k_Provided_strategy_s_not_availabl[] = "Provided strategy '%s' not available to player";
static const char __pyx_k_The_new_action_should_be_from_th[] = "The new action should be from the same infoset";
static const char __pyx_k_This_player_has_another_strategy[] = "This player has another strategy with an identical label";
static const char __pyx_k_append_move_accepts_either_a_Pla[] = "append_move accepts either a Player or Infoset to specify information";
static const char __pyx_k_append_move_with_a_Player_requir[] = "append_move with a Player requires actions to be specified";
static const char __pyx_k_append_move_with_an_Infoset_cann[] = "append_move with an Infoset cannot specify number of actions";
static const char __pyx_k_argument_of_precedes_should_be_a[] = "argument of precedes should be a Node instance";
static const char __pyx_k_argument_of_reveal_should_be_a_P[] = "argument of reveal should be a Player instance";
static const char __pyx_k_argument_should_be_a_Player_inst[] = "argument should be a Player instance, received {}";
static const char __pyx_k_argument_should_be_a_str_or_Play[] = "argument should be a str or Player instance; received {}";
static const char __pyx_k_argument_should_be_a_str_or_Stra[] = "argument should be a str or Strategy instance; received {}";
static const char __pyx_k_argument_should_be_an_int_str_or[] = "argument should be an int, str, or Player instance; received {}";
static const char __pyx_k_cannot_remove_last_strategy_of_a[] = "cannot remove last strategy of a player";
static const char __pyx_k_collection_indexes_must_be_int_o[] = "collection indexes must be int or str, not %s";
static const char __pyx_k_contingency_must_be_a_tuple_like[] = "contingency must be a tuple-like object";
static const char __pyx_k_copy_tree_can_only_be_applied_be[] = "copy_tree can only be applied between                                     objects of the same game";
static const char __pyx_k_copy_tree_takes_a_Node_object_as[] = "copy_tree takes a Node object as its input";
static const char __pyx_k_delete_requires_a_Strategy_objec[] = "delete requires a Strategy object";
static const char __pyx_k_getitem___locals_MixedBehavInf_2[] = "__getitem__.<locals>.MixedBehavInfoset";
static const char __pyx_k_getitem___locals_MixedBehavInf_3[] = "__getitem__.<locals>.MixedBehavInfoset.__init__";
static const char __pyx_k_getitem___locals_MixedBehavInf_4[] = "__getitem__.<locals>.MixedBehavInfoset.__eq__";
static const char __pyx_k_getitem___locals_MixedBehavInf_5[] = "__getitem__.<locals>.MixedBehavInfoset.__len__";
static const char __pyx_k_getitem___locals_MixedBehavInf_6[] = "__getitem__.<locals>.MixedBehavInfoset.__repr__";
static const char __pyx_k_getitem___locals_MixedBehavInf_7[] = "__getitem__.<locals>.MixedBehavInfoset._repr_latex_";
static const char __pyx_k_getitem___locals_MixedBehavInf_8[] = "__getitem__.<locals>.MixedBehavInfoset.__getitem__";
static const char __pyx_k_getitem___locals_MixedBehavInf_9[] = "__getitem__.<locals>.MixedBehavInfoset.__setitem__";
static const char __pyx_k_getitem___locals_MixedBehav__r_2[] = "__getitem__.<locals>.MixedBehav._repr_latex_";
static const char __pyx_k_getitem___locals_MixedStrategy_2[] = "__getitem__.<locals>.MixedStrategy";
static const char __pyx_k_getitem___locals_MixedStrategy_3[] = "__getitem__.<locals>.MixedStrategy.__init__";
static const char __pyx_k_getitem___locals_MixedStrategy_4[] = "__getitem__.<locals>.MixedStrategy.__eq__";
static const char __pyx_k_getitem___locals_MixedStrategy_5[] = "__getitem__.<locals>.MixedStrategy.__len__";
static const char __pyx_k_getitem___locals_MixedStrategy_6[] = "__getitem__.<locals>.MixedStrategy.__repr__";
static const char __pyx_k_getitem___locals_MixedStrategy_7[] = "__getitem__.<locals>.MixedStrategy._repr_latex_";
static const char __pyx_k_getitem___locals_MixedStrategy_8[] = "__getitem__.<locals>.MixedStrategy.__getitem__";
static const char __pyx_k_getitem___locals_MixedStrategy_9[] = "__getitem__.<locals>.MixedStrategy.__setitem__";
static const char __pyx_k_insert_action_takes_an_Action_ob[] = "insert_action takes an Action object as its input";
static const char __pyx_k_insert_move_accepts_either_a_Pla[] = "insert_move accepts either a Player or Infoset to specify information";
static const char __pyx_k_insert_move_with_a_Player_requir[] = "insert_move with a Player requires actions to be specified";
static const char __pyx_k_insert_move_with_an_Infoset_cann[] = "insert_move with an Infoset cannot specify number of actions";
static const char __pyx_k_is_successor_of_takes_a_Node_obj[] = "is_successor_of takes a Node object as its input";
static const char __pyx_k_it_is_not_possible_to_delete_the[] = "it is not possible to delete the                                             last action of an infoset";
static const char __pyx_k_move_tree_takes_a_Node_object_as[] = "move_tree takes a Node object as its input";
static const char __pyx_k_multiple_infosets_matching_label[] = "multiple infosets matching label '%s'";
static const char __pyx_k_multiple_strategies_matching_lab[] = "multiple strategies matching label '%s'";
static const char __pyx_k_must_specify_exactly_one_value_p[] = "must specify exactly one value per strategy";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_no_infoset_or_action_matching_la[] = "no infoset or action matching label '%s'";
static const char __pyx_k_no_player_infoset_or_action_matc[] = "no player, infoset or action matching label '%s'";
static const char __pyx_k_no_player_or_strategy_matching_l[] = "no player or strategy matching label '%s'";
static const char __pyx_k_numeric_argument_required_for_ac[] = "numeric argument required for action probability";
static const char __pyx_k_payoff_argument_should_be_a_nume[] = "payoff argument should be a numeric type instance";
static const char __pyx_k_player_at_an_infoset_must_belong[] = "player at an infoset must belong to the same game";
static const char __pyx_k_probability_should_be_int_or_Fra[] = "probability should be int or Fraction instance; received {}";
static const char __pyx_k_profile_action_probability_index[] = "profile action probability index must be str or Action, not %s";
static const char __pyx_k_profile_belief_index_must_be_Nod[] = "profile belief index must be Node or Infoset, not %s";
static const char __pyx_k_profile_infoset_index_must_be_st[] = "profile infoset index must be str or Infoset, not %s";
static const char __pyx_k_profile_payoffs_index_must_be_in[] = "profile payoffs index must be int, str, Player, Infoset or Action, not %s";
static const char __pyx_k_profile_probability_index_must_b[] = "profile probability index must be str, Infoset or Action, not %s";
static const char __pyx_k_profile_regret_index_must_be_str[] = "profile regret index must be str or Action, not %s";
static const char __pyx_k_profile_strategy_index_must_be_s[] = "profile strategy index must be str or Strategy, not %s";
static const char __pyx_k_rational_precision_profile_requi[] = "rational precision profile requires int or Fraction probability, not %s";
static const char __pyx_k_self_c_game_self_psp_cannot_be_c[] = "self.c_game,self.psp cannot be converted to a Python object for pickling";
static const char __pyx_k_self_game_cannot_be_converted_to[] = "self.game cannot be converted to a Python object for pickling";
static const char __pyx_k_self_infoset_cannot_be_converted[] = "self.infoset cannot be converted to a Python object for pickling";
static const char __pyx_k_self_node_cannot_be_converted_to[] = "self.node cannot be converted to a Python object for pickling";
static const char __pyx_k_self_outcome_cannot_be_converted[] = "self.outcome cannot be converted to a Python object for pickling";
static const char __pyx_k_self_profile_cannot_be_converted[] = "self.profile cannot be converted to a Python object for pickling";
static const char __pyx_k_self_strategy_cannot_be_converte[] = "self.strategy cannot be converted to a Python object for pickling";
static const char __pyx_k_self_support_cannot_be_converted[] = "self.support cannot be converted to a Python object for pickling";
static const char __pyx_k_self_thisptr_cannot_be_converted[] = "self.thisptr cannot be converted to a Python object for pickling";
static const char __pyx_k_type_Infoset_required_for_settin[] = "type Infoset required for setting infoset at a node";
static const char __pyx_k_type_Outcome_required_for_settin[] = "type Outcome required for setting outcome at a node";
static const char __pyx_k_value_vector_must_support_iterat[] = "value vector must support iteration";
static const char __pyx_k_append_move_can_only_be_applied_2[] = "append_move can only be applied between objects of the same game";
static const char __pyx_k_profile_indexes_must_be_int_str_2[] = "profile indexes must be int, str, Player, Infoset or Action, not %s";
static const char __pyx_k_Adding_strategies_is_only_applic_2[] = "Adding strategies is only applicableto players in a game, not in a restriction";
static PyObject *__pyx_n_s_Action;
static PyObject *__pyx_kp_s_Action_d_s_at_infoset_s_for_pla;
static PyObject *__pyx_n_s_Actions;
static PyObject *__pyx_kp_s_Adding_strategies_is_only_applic;
static PyObject *__pyx_kp_s_Adding_strategies_is_only_applic_2;
static PyObject *__pyx_kp_s_All_specified_arrays_must_have_t;
static PyObject *__pyx_kp_s_Another_outcome_with_an_identica;
static PyObject *__pyx_kp_s_Another_player_with_an_identical;
static PyObject *__pyx_n_s_BaseGame;
static PyObject *__pyx_kp_s_Cannot_modify_outcomes_in_a_deri;
static PyObject *__pyx_kp_s_Changing_objects_in_a_restrictio;
static PyObject *__pyx_kp_s_Changing_objects_in_a_support_is;
static PyObject *__pyx_n_s_Children;
static PyObject *__pyx_n_s_Collection;
static PyObject *__pyx_n_s_Contingencies;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_n_s_EnumMixedLrsStrategySolver;
static PyObject *__pyx_n_s_EnumMixedStrategySolverDouble;
static PyObject *__pyx_n_s_EnumMixedStrategySolverRational;
static PyObject *__pyx_n_s_EnumPureAgentSolver;
static PyObject *__pyx_n_s_EnumPureStrategySolver;
static PyObject *__pyx_n_s_Filler;
static PyObject *__pyx_n_s_Fraction;
static PyObject *__pyx_n_s_GNMStrategySolver;
static PyObject *__pyx_n_s_Game;
static PyObject *__pyx_n_s_GameActions;
static PyObject *__pyx_n_s_GameInfosets;
static PyObject *__pyx_n_s_GameStrategies;
static PyObject *__pyx_kp_s_Game_must_have_a_tree_representa;
static PyObject *__pyx_kp_s_Game_s;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_IPAStrategySolver;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x3d;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x4b;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Index_out_of_range;
static PyObject *__pyx_n_s_Infoset;
static PyObject *__pyx_kp_s_Infoset_d_s_for_player_s_in_gam;
static PyObject *__pyx_n_s_Infosets;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_LCPBehaviorSolverDouble;
static PyObject *__pyx_n_s_LCPBehaviorSolverRational;
static PyObject *__pyx_n_s_LCPStrategySolverDouble;
static PyObject *__pyx_n_s_LCPStrategySolverRational;
static PyObject *__pyx_n_s_LPBehaviorSolverDouble;
static PyObject *__pyx_n_s_LPBehaviorSolverRational;
static PyObject *__pyx_n_s_LPStrategySolverDouble;
static PyObject *__pyx_n_s_LPStrategySolverRational;
static PyObject *__pyx_n_s_LogitQREMixedStrategyProfile;
static PyObject *__pyx_kp_s_LogitQREMixedStrategyProfile_lam;
static PyObject *__pyx_n_s_Members;
static PyObject *__pyx_n_s_MismatchError;
static PyObject *__pyx_n_s_MixedBehav;
static PyObject *__pyx_n_s_MixedBehavInfoset;
static PyObject *__pyx_n_s_MixedBehaviorProfile;
static PyObject *__pyx_n_s_MixedBehaviorProfileDouble;
static PyObject *__pyx_n_s_MixedBehaviorProfileRational;
static PyObject *__pyx_n_s_MixedStrategy;
static PyObject *__pyx_n_s_MixedStrategyProfile;
static PyObject *__pyx_n_s_MixedStrategyProfileDouble;
static PyObject *__pyx_n_s_MixedStrategyProfileRational;
static PyObject *__pyx_kp_s_Mixed_behavior_profiles_are_not;
static PyObject *__pyx_kp_s_Mixed_strategies_not_supported_f;
static PyObject *__pyx_kp_s_Must_use_a_tuple_of_ints_strateg;
static PyObject *__pyx_n_s_Node;
static PyObject *__pyx_kp_s_Node_d_s_in_game_s;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_s_Number_of_strategies_is_not_equa;
static PyObject *__pyx_kp_s_Operation_only_defined_for_games;
static PyObject *__pyx_n_s_Outcome;
static PyObject *__pyx_kp_s_Outcome_d_s_in_game_s;
static PyObject *__pyx_kp_s_Outcome_s_in_game_s;
static PyObject *__pyx_n_s_Outcomes;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Player;
static PyObject *__pyx_n_s_PlayerSupportStrategies;
static PyObject *__pyx_kp_s_Player_CHANCE_in_game_s;
static PyObject *__pyx_kp_s_Player_d_s_in_game_s;
static PyObject *__pyx_n_s_Players;
static PyObject *__pyx_kp_s_Precedes_takes_a_Node_object_as;
static PyObject *__pyx_kp_s_Provided_strategy_index_d_out_of;
static PyObject *__pyx_kp_s_Provided_strategy_label_s_not_de;
static PyObject *__pyx_kp_s_Provided_strategy_s_not_availabl;
static PyObject *__pyx_n_s_Rational;
static PyObject *__pyx_n_s_Rational__repr_latex;
static PyObject *__pyx_n_s_RestrictionOutcomes;
static PyObject *__pyx_n_s_RestrictionStrategies;
static PyObject *__pyx_kp_s_Restriction_from_Game_s;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SimpdivStrategySolver;
static PyObject *__pyx_n_s_StrategicRestriction;
static PyObject *__pyx_n_s_Strategies;
static PyObject *__pyx_n_s_Strategy;
static PyObject *__pyx_n_s_StrategySupportProfile;
static PyObject *__pyx_kp_s_Strategy_d_s_for_player_s_in_ga;
static PyObject *__pyx_kp_s_The_new_action_should_be_from_th;
static PyObject *__pyx_kp_s_This_player_has_another_strategy;
static PyObject *__pyx_n_s_TreeGameOutcome;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_read_game_from_file_s;
static PyObject *__pyx_n_s_UndefinedOperationError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__19;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__30;
static PyObject *__pyx_kp_s__46;
static PyObject *__pyx_n_s_acc;
static PyObject *__pyx_n_s_action;
static PyObject *__pyx_n_s_action_payoff;
static PyObject *__pyx_n_s_action_prob;
static PyObject *__pyx_n_s_actions;
static PyObject *__pyx_kp_s_append_move_accepts_either_a_Pla;
static PyObject *__pyx_kp_s_append_move_can_only_be_applied;
static PyObject *__pyx_kp_s_append_move_can_only_be_applied_2;
static PyObject *__pyx_kp_s_append_move_requires_actions_1;
static PyObject *__pyx_kp_s_append_move_with_a_Player_requir;
static PyObject *__pyx_kp_s_append_move_with_an_Infoset_cann;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_s_argument_of_precedes_should_be_a;
static PyObject *__pyx_kp_s_argument_of_reveal_should_be_a_P;
static PyObject *__pyx_kp_s_argument_should_be_a_Player_inst;
static PyObject *__pyx_kp_s_argument_should_be_a_str_or_Play;
static PyObject *__pyx_kp_s_argument_should_be_a_str_or_Stra;
static PyObject *__pyx_kp_s_argument_should_be_an_int_str_or;
static PyObject *__pyx_n_s_ascii;
static PyObject *__pyx_n_s_belief;
static PyObject *__pyx_kp_s_cannot_remove_last_strategy_of_a;
static PyObject *__pyx_n_s_children;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_kp_s_collection_indexes_must_be_int_o;
static PyObject *__pyx_kp_s_contingency_must_be_a_tuple_like;
static PyObject *__pyx_kp_s_copy_tree_can_only_be_applied_be;
static PyObject *__pyx_kp_s_copy_tree_takes_a_Node_object_as;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_kp_s_delete_requires_a_Strategy_objec;
static PyObject *__pyx_n_s_denom;
static PyObject *__pyx_n_s_denominator;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_difference;
static PyObject *__pyx_n_s_difference_locals_lambda;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eq;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_external;
static PyObject *__pyx_n_s_fillvalue;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_kp_s_frac_s_s;
static PyObject *__pyx_n_s_fractions;
static PyObject *__pyx_n_s_from_arrays;
static PyObject *__pyx_n_s_from_arrays_locals_genexpr;
static PyObject *__pyx_n_s_functools;
static PyObject *__pyx_n_s_game;
static PyObject *__pyx_n_s_gameiter;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_contingency;
static PyObject *__pyx_n_s_getaction;
static PyObject *__pyx_n_s_getitem;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_2;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_3;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_4;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_5;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_6;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_7;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_8;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_9;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_2;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_3;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_4;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_5;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_6;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_7;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav__r;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav__r_2;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_2;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_3;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_4;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_5;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_6;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_7;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_8;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_9;
static PyObject *__pyx_n_s_getprob;
static PyObject *__pyx_n_s_getprob_strategy;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gte;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_infoset;
static PyObject *__pyx_n_s_infoset_payoff;
static PyObject *__pyx_n_s_infoset_prob;
static PyObject *__pyx_n_s_infosets;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_kp_s_insert_action_takes_an_Action_ob;
static PyObject *__pyx_kp_s_insert_move_accepts_either_a_Pla;
static PyObject *__pyx_kp_s_insert_move_requires_actions_1;
static PyObject *__pyx_kp_s_insert_move_with_a_Player_requir;
static PyObject *__pyx_kp_s_insert_move_with_an_Infoset_cann;
static PyObject *__pyx_n_s_intersection;
static PyObject *__pyx_n_s_intersection_locals_lambda;
static PyObject *__pyx_kp_s_invalid_set_of_strategies;
static PyObject *__pyx_n_s_is_chance;
static PyObject *__pyx_n_s_is_const_sum;
static PyObject *__pyx_n_s_is_defined_at;
static PyObject *__pyx_n_s_is_perfect_recall;
static PyObject *__pyx_kp_s_is_successor_of_takes_a_Node_obj;
static PyObject *__pyx_n_s_is_tree;
static PyObject *__pyx_n_s_is_valid;
static PyObject *__pyx_n_s_issubset;
static PyObject *__pyx_n_s_issubset_locals_lambda;
static PyObject *__pyx_n_s_issuperset;
static PyObject *__pyx_kp_s_it_is_not_possible_to_delete_the;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip_longest;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_lam;
static PyObject *__pyx_kp_s_left;
static PyObject *__pyx_n_s_len;
static PyObject *__pyx_n_s_logit_atlambda;
static PyObject *__pyx_n_s_logit_estimate;
static PyObject *__pyx_n_s_logit_principal_branch;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_payoff;
static PyObject *__pyx_n_s_members;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min_payoff;
static PyObject *__pyx_n_s_mixed_strategy_profile;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_kp_s_move_tree_takes_a_Node_object_as;
static PyObject *__pyx_kp_s_multiple_actions_matching_label;
static PyObject *__pyx_kp_s_multiple_infosets_matching_label;
static PyObject *__pyx_kp_s_multiple_strategies_matching_lab;
static PyObject *__pyx_kp_s_must_specify_exactly_one_value_p;
static PyObject *__pyx_kp_s_must_support_iteration;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_native;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_table;
static PyObject *__pyx_n_s_new_tree;
static PyObject *__pyx_n_s_nfg;
static PyObject *__pyx_kp_s_no_action_matching_label_s;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_kp_s_no_infoset_matching_label_s;
static PyObject *__pyx_kp_s_no_infoset_or_action_matching_la;
static PyObject *__pyx_kp_s_no_matching_label_s;
static PyObject *__pyx_kp_s_no_object_with_label_s;
static PyObject *__pyx_kp_s_no_player_infoset_or_action_matc;
static PyObject *__pyx_kp_s_no_player_or_strategy_matching_l;
static PyObject *__pyx_kp_s_no_strategy_matching_label_s;
static PyObject *__pyx_n_s_num_players;
static PyObject *__pyx_n_s_num_strategies_player;
static PyObject *__pyx_n_s_number;
static PyObject *__pyx_n_s_numerator;
static PyObject *__pyx_kp_s_numeric_argument_required_for_ac;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_other;
static PyObject *__pyx_n_s_outcomes;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_p_game;
static PyObject *__pyx_n_s_p_lambda;
static PyObject *__pyx_n_s_p_maxDepth;
static PyObject *__pyx_n_s_p_maxLambda;
static PyObject *__pyx_n_s_p_profile;
static PyObject *__pyx_n_s_p_stopAfter;
static PyObject *__pyx_n_s_parse_game;
static PyObject *__pyx_n_s_payoff;
static PyObject *__pyx_n_s_payoff_2;
static PyObject *__pyx_kp_s_payoff_argument_should_be_a_nume;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pl;
static PyObject *__pyx_n_s_player;
static PyObject *__pyx_kp_s_player_at_an_infoset_must_belong;
static PyObject *__pyx_kp_s_player_index_must_be_int_str_or;
static PyObject *__pyx_kp_s_player_index_should_be_a_Player;
static PyObject *__pyx_n_s_players;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_kp_s_probability_should_be_int_or_Fra;
static PyObject *__pyx_n_s_product;
static PyObject *__pyx_n_s_profile;
static PyObject *__pyx_kp_s_profile_action_probability_index;
static PyObject *__pyx_kp_s_profile_belief_index_must_be_Nod;
static PyObject *__pyx_kp_s_profile_indexes_must_be_int_str;
static PyObject *__pyx_kp_s_profile_indexes_must_be_int_str_2;
static PyObject *__pyx_kp_s_profile_infoset_index_must_be_st;
static PyObject *__pyx_kp_s_profile_payoffs_index_must_be_in;
static PyObject *__pyx_kp_s_profile_probability_index_must_b;
static PyObject *__pyx_kp_s_profile_regret_index_must_be_str;
static PyObject *__pyx_kp_s_profile_strategy_index_must_be_s;
static PyObject *__pyx_n_s_pygambit;
static PyObject *__pyx_n_s_pygambit_gte;
static PyObject *__pyx_kp_s_pygambit_lib_behav_pxi;
static PyObject *__pyx_n_s_pygambit_lib_error;
static PyObject *__pyx_n_s_pygambit_lib_libgambit;
static PyObject *__pyx_kp_s_pygambit_lib_libgambit_pyx;
static PyObject *__pyx_kp_s_pygambit_lib_mixed_pxi;
static PyObject *__pyx_kp_s_pygambit_lib_nash_pxi;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_BaseGame;
static PyObject *__pyx_n_s_pyx_unpickle_Collection;
static PyObject *__pyx_n_s_pyx_unpickle_MixedBehaviorProf;
static PyObject *__pyx_n_s_pyx_unpickle_MixedStrategyProf;
static PyObject *__pyx_n_s_pyx_unpickle_PlayerSupportStra;
static PyObject *__pyx_n_s_pyx_unpickle_RestrictionOutcom;
static PyObject *__pyx_n_s_pyx_unpickle_RestrictionStrate;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rational;
static PyObject *__pyx_kp_s_rational_precision_profile_requi;
static PyObject *__pyx_n_s_read_game;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_2;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_regret;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_remove_locals_lambda;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_repr_latex;
static PyObject *__pyx_n_s_resolve_index;
static PyObject *__pyx_n_s_resolve_index_locals_lambda;
static PyObject *__pyx_n_s_restrict;
static PyObject *__pyx_n_s_restriction;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_kp_s_right;
static PyObject *__pyx_kp_s_s;
static PyObject *__pyx_n_s_s1;
static PyObject *__pyx_n_s_s2;
static PyObject *__pyx_kp_s_s_2;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self_action_cannot_be_converted;
static PyObject *__pyx_kp_s_self_c_game_self_psp_cannot_be_c;
static PyObject *__pyx_kp_s_self_game_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self_infoset_cannot_be_converted;
static PyObject *__pyx_kp_s_self_node_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self_outcome_cannot_be_converted;
static PyObject *__pyx_kp_s_self_parent_cannot_be_converted;
static PyObject *__pyx_kp_s_self_player_cannot_be_converted;
static PyObject *__pyx_kp_s_self_profile_cannot_be_converted;
static PyObject *__pyx_kp_s_self_strategy_cannot_be_converte;
static PyObject *__pyx_kp_s_self_support_cannot_be_converted;
static PyObject *__pyx_kp_s_self_thisptr_cannot_be_converted;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setaction;
static PyObject *__pyx_n_s_setinfoset;
static PyObject *__pyx_n_s_setitem;
static PyObject *__pyx_n_s_setplayer;
static PyObject *__pyx_n_s_setprob;
static PyObject *__pyx_n_s_setprob_player;
static PyObject *__pyx_n_s_setprob_player_locals_Filler;
static PyObject *__pyx_n_s_setprob_strategy;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_solns;
static PyObject *__pyx_n_s_st;
static PyObject *__pyx_n_s_strategies;
static PyObject *__pyx_n_s_strategy;
static PyObject *__pyx_n_s_strategy1;
static PyObject *__pyx_n_s_strategy2;
static PyObject *__pyx_n_s_strategy_value;
static PyObject *__pyx_n_s_strategy_value_2;
static PyObject *__pyx_n_s_strategy_value_deriv;
static PyObject *__pyx_n_s_strategy_values;
static PyObject *__pyx_n_s_strict;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_title;
static PyObject *__pyx_kp_s_type_Infoset_required_for_settin;
static PyObject *__pyx_kp_s_type_Outcome_required_for_settin;
static PyObject *__pyx_n_s_union;
static PyObject *__pyx_n_s_unique;
static PyObject *__pyx_n_s_unrestrict;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_kp_s_value_list_length_must_be_s_not;
static PyObject *__pyx_kp_s_value_vector_must_support_iterat;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_write_game;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_n_s_zip_longest;
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Rational__repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Collection___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Collection_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Collection_4__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Collection_6__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_6Action_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_6delete(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_8precedes(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_6Action_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_7infoset___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_4prob___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_6Action_4prob_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_7Members___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Members *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Members_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Members *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Members_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Members *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Members_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Members *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Actions_add(struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_7Actions_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Actions_4__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self, PyObject *__pyx_v_act); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Actions_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Actions_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_6precedes(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_8reveal(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_9is_chance___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_7actions___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_7members___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_6player___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_6player_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_6player___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_6number___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_6unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_8Infosets___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Infosets_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *__pyx_v_self, PyObject *__pyx_v_iset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Infosets_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Infosets_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Strategies_add(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_10Strategies_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Strategies_4__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self, PyObject *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Strategies_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Strategies_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_add(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_label); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_2__init__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_4__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_6__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, PyObject *__pyx_v_strat); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_8__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_10__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_6Player_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_6Player_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_6number___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_9is_chance___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_10strategies___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_8infosets___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_10min_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_10max_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_6unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_6delete(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_8__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_10__setitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_12unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome___del__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_2__repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_4__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_6__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_8__setitem__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pl, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_10delete(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label_2__set__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_8Children___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Children *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Children_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Children *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Children_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Children *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Children_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Children *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_4Node_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_6is_successor_of(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_8is_subgame_root(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_10append_move(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_actions); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_12insert_move(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_actions); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_14leave_infoset(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_16delete_parent(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_18delete_tree(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_20copy_tree(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_22move_tree(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_4Node_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_8children___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_7infoset___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_4Node_7infoset_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_6player___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_6parent___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_12prior_action___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_13prior_sibling___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_12next_sibling___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_11is_terminal___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_7outcome___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_4Node_7outcome_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_outcome); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8BaseGame___reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8BaseGame_2__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategies, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_4__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_6__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_8__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strat); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_10__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_12__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_14__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_16remove(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategy); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_18difference(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_20intersection(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_22is_valid(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategies, PyObject *__pyx_v_num_players); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_acc, PyObject *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_24issubset(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_26issuperset(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_28restrict(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_30undominated(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strict, PyObject *__pyx_v_external); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_32union(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_34unique(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_lst); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_4__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, PyObject *__pyx_v_outc); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_6add(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_8__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_10__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_4__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, PyObject *__pyx_v_strat); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_6__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_8__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_4__repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_6__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_8__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_5title___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_7players___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10strategies___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_8outcomes___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_7is_tree___get__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10min_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10max_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10write(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_12undominated(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_strict); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_14num_strategies_player(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_pl); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_16support_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_18unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_20_get_contingency(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_22__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_24mixed_strategy_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_rational); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_2_repr_latex_(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_4__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda5(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_6_resolve_index(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_players); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_8__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_10__setitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_12_setprob_player(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_16strategy_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_18strategy_values(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_20strategy_value_deriv(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_strategy1, PyObject *__pyx_v_strategy2); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_22__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_24__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble___dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_4_strategy_index(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_6_getprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_8_getprob_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_10_setprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_12_setprob_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_14_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_16_strategy_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_18_strategy_value_deriv(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_pl, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s1, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s2); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_20liap_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_22copy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_24as_behavior(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_26restriction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_28unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_30set_centroid(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_32normalize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_34randomize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, PyObject *__pyx_v_denom); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational___dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_4_strategy_index(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_6_getprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_8_getprob_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_10_setprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_12_setprob_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_14_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_16_strategy_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_18_strategy_value_deriv(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_pl, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s1, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s2); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_20liap_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_22copy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_24as_behavior(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_26restriction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_28unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_30set_centroid(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_32normalize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_34randomize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, PyObject *__pyx_v_denom); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_2_repr_latex_(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_4__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda7(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda9(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda10(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_6_resolve_index(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_players); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_8_setinfoset(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_10_setplayer(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_12__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14__setitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_16is_defined_at(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_18belief(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_20action_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_22payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_player_infoset_or_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_24realiz_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_infoset_or_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_26regret(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_28__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_30__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble___dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4_is_defined_at(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_6_getprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_8_getaction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_10_setprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_12_setaction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_14_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_16_belief(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_18_infoset_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_20_infoset_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_22_action_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_24_action_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_26_regret(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_28copy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_30as_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_32liap_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_34set_centroid(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_36normalize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_38randomize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, PyObject *__pyx_v_denom); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_40__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_42__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational___dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_4_is_defined_at(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_6_getprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_8_getaction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_10_setprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_12_setaction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_14_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_16_belief(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_18_infoset_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_20_infoset_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_22_action_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_24_action_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_26_regret(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_28copy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_30as_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_32liap_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_34set_centroid(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_36normalize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_38randomize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, PyObject *__pyx_v_denom); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_40__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_42__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_8Outcomes___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self, PyObject *__pyx_v_outc); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_4add(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_7Players___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self, PyObject *__pyx_v_pl); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_4add(struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_6chance___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_11GameActions___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_11GameActions_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_11GameActions_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_11GameActions_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *__pyx_v_self, PyObject *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *__pyx_v_self, PyObject *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_new_tree(PyTypeObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_2new_table(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_dim); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_11from_arrays_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_11from_arrays_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_4from_arrays(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_arrays); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_6read_game(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_fn); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_8parse_game(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_10__str__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_12__repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_14__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_4Game_16__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_7is_tree___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_5title___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_4Game_5title_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_7comment___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_4Game_7comment_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_7actions___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_8infosets___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_7players___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_10strategies___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_8outcomes___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_13contingencies___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_4root___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_12is_const_sum___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_17is_perfect_recall___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_10min_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_10max_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_18_get_contingency(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_20__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_22mixed_strategy_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_rational); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_24mixed_behavior_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_rational); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_26support_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_28num_nodes(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_30unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_32write(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_p_stopAfter, CYTHON_UNUSED PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_game); /* proto */
static void __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4__repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_6__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_8__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_logit_estimate(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p_profile); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_2logit_atlambda(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_p_game, double __pyx_v_p_lambda); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4logit_principal_branch(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_p_game, double __pyx_v_p_maxLambda); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6__pyx_unpickle_Collection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8__pyx_unpickle_PlayerSupportStrategies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10__pyx_unpickle_BaseGame(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_12__pyx_unpickle_RestrictionOutcomes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_14__pyx_unpickle_RestrictionStrategies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_16__pyx_unpickle_MixedStrategyProfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_18__pyx_unpickle_MixedBehaviorProfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Collection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Action(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Members(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Actions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Infoset(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Strategy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Infosets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Strategies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_PlayerSupportStrategies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Player(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Outcome(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_TreeGameOutcome(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Children(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Node(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_BaseGame(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_StrategySupportProfile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_RestrictionOutcomes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_RestrictionStrategies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_StrategicRestriction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfileRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Outcomes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Players(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_GameActions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_GameInfosets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_GameStrategies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Game(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumPureStrategySolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumPureAgentSolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LCPStrategySolverDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LCPStrategySolverRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LPBehaviorSolverRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LPStrategySolverDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LPStrategySolverRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_SimpdivStrategySolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_IPAStrategySolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_GNMStrategySolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct__remove(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_count = {0, &__pyx_n_s_count, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_remove = {0, &__pyx_n_s_remove, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyString_Type_encode = {0, &__pyx_n_s_encode, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_64675758;
static PyObject *__pyx_int_79490816;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__152;
static PyObject *__pyx_codeobj__154;
static PyObject *__pyx_codeobj__156;
static PyObject *__pyx_codeobj__158;
static PyObject *__pyx_codeobj__160;
static PyObject *__pyx_codeobj__162;
static PyObject *__pyx_codeobj__164;
static PyObject *__pyx_codeobj__166;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__172;
/* Late includes */

/* "pygambit/lib/libgambit.pyx":35
 * 
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Rational_1_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_8Rational_1_repr_latex_ = {"_repr_latex_", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Rational_1_repr_latex_, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Rational_1_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Rational__repr_latex_(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Rational__repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);

  /* "pygambit/lib/libgambit.pyx":36
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):
 *         if self.denominator != 1:             # <<<<<<<<<<<<<<
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_denominator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "pygambit/lib/libgambit.pyx":37
 *     def _repr_latex_(self):
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)             # <<<<<<<<<<<<<<
 *         else:
 *             return r'$%s$' % self.numerator
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_numerator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_denominator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_frac_s_s, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/libgambit.pyx":36
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):
 *         if self.denominator != 1:             # <<<<<<<<<<<<<<
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 *         else:
 */
  }

  /* "pygambit/lib/libgambit.pyx":39
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 *         else:
 *             return r'$%s$' % self.numerator             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "gambit.h":
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_numerator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_s, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/libgambit.pyx":35
 * 
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Rational._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/libgambit.pyx":52
 *     c_Rational str_rat "lexical_cast<Rational>"(string)
 * 
 * cdef rat_to_py(c_Rational r):             # <<<<<<<<<<<<<<
 *     return Rational(rat_str(r).decode('ascii'))
 * 
 */

static PyObject *__pyx_f_8pygambit_3lib_9libgambit_rat_to_py(Rational __pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rat_to_py", 0);

  /* "pygambit/lib/libgambit.pyx":53
 * 
 * cdef rat_to_py(c_Rational r):
 *     return Rational(rat_str(r).decode('ascii'))             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "core/number.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_decode_cpp_string(lexical_cast<std::string>(__pyx_v_r), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/libgambit.pyx":52
 *     c_Rational str_rat "lexical_cast<Rational>"(string)
 * 
 * cdef rat_to_py(c_Rational r):             # <<<<<<<<<<<<<<
 *     return Rational(rat_str(r).decode('ascii'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.rat_to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/libgambit.pyx":400
 * cdef class Collection(object):
 *     "Represents a collection of related objects in a game."
 *     def __repr__(self):   return str(list(self))             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10Collection___repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Collection___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Collection.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/libgambit.pyx":402
 *     def __repr__(self):   return str(list(self))
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if isinstance(i, str):
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Collection_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Collection_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10Collection_2__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Collection_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_7genexpr__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/libgambit.pyx":403
 * 
 *     def __getitem__(self, i):
 *         if isinstance(i, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 return self[[x.label for x in self].index(i)]
 */
  __pyx_t_1 = PyString_Check(__pyx_v_i); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/libgambit.pyx":404
 *     def __getitem__(self, i):
 *         if isinstance(i, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self[[x.label for x in self].index(i)]
 *             except ValueError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "pygambit/lib/libgambit.pyx":405
 *         if isinstance(i, str):
 *             try:
 *                 return self[[x.label for x in self].index(i)]             # <<<<<<<<<<<<<<
 *             except ValueError:
 *                 raise IndexError("no object with label '%s'" % i)
 */
        __Pyx_XDECREF(__pyx_r);
        { /* enter inner scope */
          __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 405, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
            __pyx_t_8 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 405, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 405, __pyx_L12_error)
          }
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_8))) {
                if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_8)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 405, __pyx_L12_error)
                #else
                __pyx_t_11 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 405, __pyx_L12_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              } else {
                if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 405, __pyx_L12_error)
                #else
                __pyx_t_11 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 405, __pyx_L12_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              }
            } else {
              __pyx_t_11 = __pyx_t_10(__pyx_t_8);
              if (unlikely(!__pyx_t_11)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 405, __pyx_L12_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_11);
            }
            __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_x, __pyx_t_11);
            __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_x, __pyx_n_s_label); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 405, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_11);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 405, __pyx_L12_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
          goto __pyx_L15_exit_scope;
          __pyx_L12_error:;
          __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
          goto __pyx_L4_error;
          __pyx_L15_exit_scope:;
        } /* exit inner scope */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 405, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_v_i) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_i);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 405, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 405, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L8_try_return;

        /* "pygambit/lib/libgambit.pyx":404
 *     def __getitem__(self, i):
 *         if isinstance(i, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self[[x.label for x in self].index(i)]
 *             except ValueError:
 */
      }
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pygambit/lib/libgambit.pyx":406
 *             try:
 *                 return self[[x.label for x in self].index(i)]
 *             except ValueError:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no object with label '%s'" % i)
 *         else:
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("pygambit.lib.libgambit.Collection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 406, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_7);

        /* "pygambit/lib/libgambit.pyx":407
 *                 return self[[x.label for x in self].index(i)]
 *             except ValueError:
 *                 raise IndexError("no object with label '%s'" % i)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("collection indexes must be int or str, not %s" %
 */
        __pyx_t_11 = __Pyx_PyString_FormatSafe(__pyx_kp_s_no_object_with_label_s, __pyx_v_i); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 407, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 407, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_13, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __PYX_ERR(0, 407, __pyx_L6_except_error)
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "pygambit/lib/libgambit.pyx":404
 *     def __getitem__(self, i):
 *         if isinstance(i, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self[[x.label for x in self].index(i)]
 *             except ValueError:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
    }

    /* "pygambit/lib/libgambit.pyx":403
 * 
 *     def __getitem__(self, i):
 *         if isinstance(i, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 return self[[x.label for x in self].index(i)]
 */
  }

  /* "pygambit/lib/libgambit.pyx":409
 *                 raise IndexError("no object with label '%s'" % i)
 *         else:
 *             raise TypeError("collection indexes must be int or str, not %s" %             # <<<<<<<<<<<<<<
 *                              i.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "pygambit/lib/libgambit.pyx":410
 *         else:
 *             raise TypeError("collection indexes must be int or str, not %s" %
 *                              i.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_class); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pygambit/lib/libgambit.pyx":409
 *                 raise IndexError("no object with label '%s'" % i)
 *         else:
 *             raise TypeError("collection indexes must be int or str, not %s" %             # <<<<<<<<<<<<<<
 *                              i.__class__.__name__)
 * 
 */
    __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_collection_indexes_must_be_int_o, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 409, __pyx_L1_error)
  }

  /* "pygambit/lib/libgambit.pyx":402
 *     def __repr__(self):   return str(list(self))
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if isinstance(i, str):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Collection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Collection_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Collection_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10Collection_4__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Collection_4__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Collection); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Collection__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Collection); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Collection.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Collection__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Collection_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Collection_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10Collection_6__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Collection_6__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Collection__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_Collection__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Collection, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Collection__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Collection.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":28
 *     cdef c_GameAction action
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action___repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameActionRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GameInfosetRep *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  GamePlayerRep *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/action.pxi":29
 * 
 *     def __repr__(self):
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.action.deref().GetNumber()-1, self.label,
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pygambit/lib/action.pxi":30
 *     def __repr__(self):
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,             # <<<<<<<<<<<<<<
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 30, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygambit/lib/action.pxi":31
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),             # <<<<<<<<<<<<<<
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 31, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetInfoset().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 31, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_t_4->GetLabel().c_str()); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "pygambit/lib/action.pxi":32
 *                 (self.action.deref().GetNumber()-1, self.label,
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),             # <<<<<<<<<<<<<<
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 32, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetInfoset().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 32, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_t_4->GetPlayer().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 32, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_FromString(__pyx_t_6->GetLabel().c_str()); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "pygambit/lib/action.pxi":33
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Action self, other, whichop):
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 33, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetInfoset().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 33, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_t_4->GetPlayer().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 33, __pyx_L1_error)
  }
  try {
    __pyx_t_8 = __pyx_t_6->GetGame().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 33, __pyx_L1_error)
  }
  __pyx_t_9 = __Pyx_PyBytes_FromString(__pyx_t_8->GetTitle().c_str()); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "pygambit/lib/action.pxi":30
 *     def __repr__(self):
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,             # <<<<<<<<<<<<<<
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),
 */
  __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(6, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_9 = 0;

  /* "pygambit/lib/action.pxi":29
 * 
 *     def __repr__(self):
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.action.deref().GetNumber()-1, self.label,
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 */
  __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Action_d_s_at_infoset_s_for_pla, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/action.pxi":28
 *     cdef c_GameAction action
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":35
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Action self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Action):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(6, 35, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_2__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameActionRep *__pyx_t_4;
  GameActionRep *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/action.pxi":36
 * 
 *     def __richcmp__(Action self, other, whichop):
 *         if isinstance(other, Action):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/action.pxi":37
 *     def __richcmp__(Action self, other, whichop):
 *         if isinstance(other, Action):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 37, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/action.pxi":38
 *         if isinstance(other, Action):
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.action.deref() != ((<Action>other).action).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->action.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(6, 38, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_other)->action.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(6, 38, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/action.pxi":37
 *     def __richcmp__(Action self, other, whichop):
 *         if isinstance(other, Action):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/action.pxi":39
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.action.deref() != ((<Action>other).action).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/action.pxi":40
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:
 *                 return self.action.deref() != ((<Action>other).action).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->action.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(6, 40, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_other)->action.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(6, 40, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 40, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/action.pxi":39
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.action.deref() != ((<Action>other).action).deref()
 *             else:
 */
    }

    /* "pygambit/lib/action.pxi":42
 *                 return self.action.deref() != ((<Action>other).action).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(6, 42, __pyx_L1_error)
    }

    /* "pygambit/lib/action.pxi":36
 * 
 *     def __richcmp__(Action self, other, whichop):
 *         if isinstance(other, Action):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()
 */
  }

  /* "pygambit/lib/action.pxi":44
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 44, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/action.pxi":45
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/action.pxi":44
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/action.pxi":46
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 46, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/action.pxi":47
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/action.pxi":46
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/action.pxi":49
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(6, 49, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/action.pxi":35
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Action self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Action):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":51
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.action.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_6Action_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_6Action_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_4__hash__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_6Action_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameActionRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pygambit/lib/action.pxi":52
 * 
 *     def __hash__(self):
 *         return long(<long>self.action.deref())             # <<<<<<<<<<<<<<
 * 
 *     def delete(self):
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 52, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyLong_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(6, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "pygambit/lib/action.pxi":51
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.action.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":54
 *         return long(<long>self.action.deref())
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         if len(self.infoset.actions) == 1:
 *             raise UndefinedOperationError("it is not possible to delete the \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_7delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_7delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_6delete(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_6delete(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  GameActionRep *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete", 0);

  /* "pygambit/lib/action.pxi":55
 * 
 *     def delete(self):
 *         if len(self.infoset.actions) == 1:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("it is not possible to delete the \
 *                                             last action of an infoset")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_actions); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(6, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((__pyx_t_3 == 1) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pygambit/lib/action.pxi":56
 *     def delete(self):
 *         if len(self.infoset.actions) == 1:
 *             raise UndefinedOperationError("it is not possible to delete the \             # <<<<<<<<<<<<<<
 *                                             last action of an infoset")
 *         self.action.deref().DeleteAction()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_s_it_is_not_possible_to_delete_the) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s_it_is_not_possible_to_delete_the);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(6, 56, __pyx_L1_error)

    /* "pygambit/lib/action.pxi":55
 * 
 *     def delete(self):
 *         if len(self.infoset.actions) == 1:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("it is not possible to delete the \
 *                                             last action of an infoset")
 */
  }

  /* "pygambit/lib/action.pxi":58
 *             raise UndefinedOperationError("it is not possible to delete the \
 *                                             last action of an infoset")
 *         self.action.deref().DeleteAction()             # <<<<<<<<<<<<<<
 * 
 *     def precedes(self, node):
 */
  try {
    __pyx_t_6 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 58, __pyx_L1_error)
  }
  try {
    __pyx_t_6->DeleteAction();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
    __PYX_ERR(6, 58, __pyx_L1_error)
  }

  /* "pygambit/lib/action.pxi":54
 *         return long(<long>self.action.deref())
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         if len(self.infoset.actions) == 1:
 *             raise UndefinedOperationError("it is not possible to delete the \
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":60
 *         self.action.deref().DeleteAction()
 * 
 *     def precedes(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.action.deref().Precedes(((<Node>node).node))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_9precedes(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_9precedes(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("precedes (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_8precedes(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_8precedes(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameActionRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("precedes", 0);

  /* "pygambit/lib/action.pxi":61
 * 
 *     def precedes(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.action.deref().Precedes(((<Node>node).node))
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_8pygambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/action.pxi":62
 *     def precedes(self, node):
 *         if isinstance(node, Node):
 *             return self.action.deref().Precedes(((<Node>node).node))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Precedes takes a Node object as its input")
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = __pyx_v_self->action.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(6, 62, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3->Precedes(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_node)->node)); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/action.pxi":61
 * 
 *     def precedes(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.action.deref().Precedes(((<Node>node).node))
 *         else:
 */
  }

  /* "pygambit/lib/action.pxi":64
 *             return self.action.deref().Precedes(((<Node>node).node))
 *         else:
 *             raise TypeError("Precedes takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(6, 64, __pyx_L1_error)
  }

  /* "pygambit/lib/action.pxi":60
 *         self.action.deref().DeleteAction()
 * 
 *     def precedes(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.action.deref().Precedes(((<Node>node).node))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.precedes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":67
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.action.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_5label___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameActionRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/action.pxi":68
 *     property label:
 *         def __get__(self):
 *             return self.action.deref().GetLabel().decode('ascii')             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             cdef string s
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 68, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1->GetLabel(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/action.pxi":67
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.action.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":69
 *         def __get__(self):
 *             return self.action.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             cdef string s
 *             s = value.encode('ascii')
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_6Action_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_6Action_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_5label_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_6Action_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_value) {
  std::string __pyx_v_s;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  GameActionRep *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/action.pxi":71
 *         def __set__(self, value):
 *             cdef string s
 *             s = value.encode('ascii')             # <<<<<<<<<<<<<<
 *             self.action.deref().SetLabel(s)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_s = __pyx_t_4;

  /* "pygambit/lib/action.pxi":72
 *             cdef string s
 *             s = value.encode('ascii')
 *             self.action.deref().SetLabel(s)             # <<<<<<<<<<<<<<
 * 
 *     property infoset:
 */
  try {
    __pyx_t_5 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 72, __pyx_L1_error)
  }
  __pyx_t_5->SetLabel(__pyx_v_s);

  /* "pygambit/lib/action.pxi":69
 *         def __get__(self):
 *             return self.action.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             cdef string s
 *             s = value.encode('ascii')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":75
 * 
 *     property infoset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infoset i
 *             i = Infoset()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_7infoset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_7infoset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_7infoset___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_7infoset___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameActionRep *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/action.pxi":77
 *         def __get__(self):
 *             cdef Infoset i
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.action.deref().GetInfoset()
 *             return i
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/action.pxi":78
 *             cdef Infoset i
 *             i = Infoset()
 *             i.infoset = self.action.deref().GetInfoset()             # <<<<<<<<<<<<<<
 *             return i
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 78, __pyx_L1_error)
  }
  __pyx_v_i->infoset = __pyx_t_2->GetInfoset();

  /* "pygambit/lib/action.pxi":79
 *             i = Infoset()
 *             i.infoset = self.action.deref().GetInfoset()
 *             return i             # <<<<<<<<<<<<<<
 * 
 *     property prob:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_i));
  __pyx_r = ((PyObject *)__pyx_v_i);
  goto __pyx_L0;

  /* "pygambit/lib/action.pxi":75
 * 
 *     property infoset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infoset i
 *             i = Infoset()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.infoset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":82
 * 
 *     property prob:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef string py_string
 *             cdef string dummy_str
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_4prob_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_4prob_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_4prob___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_4prob___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self) {
  std::string __pyx_v_py_string;
  std::string __pyx_v_dummy_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameActionRep *__pyx_t_1;
  GameInfosetRep *__pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/action.pxi":85
 *             cdef string py_string
 *             cdef string dummy_str
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(             # <<<<<<<<<<<<<<
 *                 self.action.deref().GetNumber(), dummy_str)
 *             if "." in py_string.decode('ascii'):
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 85, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_1->GetInfoset().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 85, __pyx_L1_error)
  }

  /* "pygambit/lib/action.pxi":86
 *             cdef string dummy_str
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(
 *                 self.action.deref().GetNumber(), dummy_str)             # <<<<<<<<<<<<<<
 *             if "." in py_string.decode('ascii'):
 *                 return decimal.Decimal(py_string.decode('ascii'))
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 86, __pyx_L1_error)
  }

  /* "pygambit/lib/action.pxi":85
 *             cdef string py_string
 *             cdef string dummy_str
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(             # <<<<<<<<<<<<<<
 *                 self.action.deref().GetNumber(), dummy_str)
 *             if "." in py_string.decode('ascii'):
 */
  try {
    __pyx_t_3 = __pyx_t_2->GetActionProb(__pyx_t_1->GetNumber(), __pyx_v_dummy_str);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(6, 85, __pyx_L1_error)
  }
  __pyx_v_py_string = __pyx_t_3;

  /* "pygambit/lib/action.pxi":87
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(
 *                 self.action.deref().GetNumber(), dummy_str)
 *             if "." in py_string.decode('ascii'):             # <<<<<<<<<<<<<<
 *                 return decimal.Decimal(py_string.decode('ascii'))
 *             else:
 */
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_py_string, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s__2, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(6, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "pygambit/lib/action.pxi":88
 *                 self.action.deref().GetNumber(), dummy_str)
 *             if "." in py_string.decode('ascii'):
 *                 return decimal.Decimal(py_string.decode('ascii'))             # <<<<<<<<<<<<<<
 *             else:
 *                 return Rational(py_string.decode('ascii'))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_decode_cpp_string(__pyx_v_py_string, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/action.pxi":87
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(
 *                 self.action.deref().GetNumber(), dummy_str)
 *             if "." in py_string.decode('ascii'):             # <<<<<<<<<<<<<<
 *                 return decimal.Decimal(py_string.decode('ascii'))
 *             else:
 */
  }

  /* "pygambit/lib/action.pxi":90
 *                 return decimal.Decimal(py_string.decode('ascii'))
 *             else:
 *                 return Rational(py_string.decode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Rational); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_decode_cpp_string(__pyx_v_py_string, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/action.pxi":82
 * 
 *     property prob:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef string py_string
 *             cdef string dummy_str
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.prob.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/action.pxi":92
 *                 return Rational(py_string.decode('ascii'))
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             cdef string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_6Action_4prob_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_6Action_4prob_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_4prob_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_6Action_4prob_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_value) {
  std::string __pyx_v_s;
  PyObject *__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  std::string __pyx_t_7;
  GameActionRep *__pyx_t_8;
  GameInfosetRep *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/action.pxi":94
 *         def __set__(self, value):
 *             cdef string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *                 v = str(value)
 *                 s = v.encode('ascii')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = PyInt_Check(__pyx_v_value); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_3); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_4 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_6)) {

    /* "pygambit/lib/action.pxi":95
 *             cdef string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):
 *                 v = str(value)             # <<<<<<<<<<<<<<
 *                 s = v.encode('ascii')
 *                 self.action.deref().GetInfoset().deref().SetActionProb(
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_v = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "pygambit/lib/action.pxi":96
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):
 *                 v = str(value)
 *                 s = v.encode('ascii')             # <<<<<<<<<<<<<<
 *                 self.action.deref().GetInfoset().deref().SetActionProb(
 *                     self.action.deref().GetNumber(), s)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_ascii);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_s = __pyx_t_7;

    /* "pygambit/lib/action.pxi":97
 *                 v = str(value)
 *                 s = v.encode('ascii')
 *                 self.action.deref().GetInfoset().deref().SetActionProb(             # <<<<<<<<<<<<<<
 *                     self.action.deref().GetNumber(), s)
 *             else:
 */
    try {
      __pyx_t_8 = __pyx_v_self->action.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(6, 97, __pyx_L1_error)
    }
    try {
      __pyx_t_9 = __pyx_t_8->GetInfoset().operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(6, 97, __pyx_L1_error)
    }

    /* "pygambit/lib/action.pxi":98
 *                 s = v.encode('ascii')
 *                 self.action.deref().GetInfoset().deref().SetActionProb(
 *                     self.action.deref().GetNumber(), s)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("numeric argument required for action probability")
 */
    try {
      __pyx_t_8 = __pyx_v_self->action.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(6, 98, __pyx_L1_error)
    }

    /* "pygambit/lib/action.pxi":97
 *                 v = str(value)
 *                 s = v.encode('ascii')
 *                 self.action.deref().GetInfoset().deref().SetActionProb(             # <<<<<<<<<<<<<<
 *                     self.action.deref().GetNumber(), s)
 *             else:
 */
    try {
      __pyx_t_9->SetActionProb(__pyx_t_8->GetNumber(), __pyx_v_s);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(6, 97, __pyx_L1_error)
    }

    /* "pygambit/lib/action.pxi":94
 *         def __set__(self, value):
 *             cdef string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *                 v = str(value)
 *                 s = v.encode('ascii')
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/action.pxi":100
 *                     self.action.deref().GetNumber(), s)
 *             else:
 *                 raise TypeError("numeric argument required for action probability")             # <<<<<<<<<<<<<<
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(6, 100, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/action.pxi":92
 *                 return Rational(py_string.decode('ascii'))
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             cdef string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.prob.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_10__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Action_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Action_12__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Action_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Action.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":27
 *     "Represents a collection of members of an infoset."
 *     cdef c_GameInfoset infoset
 *     def __len__(self):     return self.infoset.deref().NumMembers()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, i):
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_7Members_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_7Members_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Members___len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Members *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_7Members___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Members *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 27, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumMembers();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Members.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":28
 *     cdef c_GameInfoset infoset
 *     def __len__(self):     return self.infoset.deref().NumMembers()
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Members_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Members_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Members_2__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Members *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Members_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Members *__pyx_v_self, PyObject *__pyx_v_i) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameInfosetRep *__pyx_t_8;
  GameObjectPtr<GameNodeRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/infoset.pxi":29
 *     def __len__(self):     return self.infoset.deref().NumMembers()
 *     def __getitem__(self, i):
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)             # <<<<<<<<<<<<<<
 *         cdef Node n
 *         n = Node()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_i); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_i};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 29, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_i};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 29, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 29, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_i);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 29, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/infoset.pxi":31
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 *         n = Node()             # <<<<<<<<<<<<<<
 *         n.node = self.infoset.deref().GetMember(i+1)
 *         return n
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Node)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_n = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/infoset.pxi":32
 *         cdef Node n
 *         n = Node()
 *         n.node = self.infoset.deref().GetMember(i+1)             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 32, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetMember(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(7, 32, __pyx_L1_error)
  }
  __pyx_v_n->node = __pyx_t_9;

  /* "pygambit/lib/infoset.pxi":33
 *         n = Node()
 *         n.node = self.infoset.deref().GetMember(i+1)
 *         return n             # <<<<<<<<<<<<<<
 * 
 * cdef class Actions(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = ((PyObject *)__pyx_v_n);
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":28
 *     cdef c_GameInfoset infoset
 *     def __len__(self):     return self.infoset.deref().NumMembers()
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Members.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Members_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Members_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Members_4__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Members *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Members_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Members *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Members.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Members_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Members_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Members_6__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Members *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Members_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Members *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Members.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":39
 *     cdef c_GameInfoset infoset
 * 
 *     def add(self, action=None):             # <<<<<<<<<<<<<<
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Actions_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Actions_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_action = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_action,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_action);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(7, 39, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_action = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Actions.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Actions_add(((struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *)__pyx_v_self), __pyx_v_action);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Actions_add(struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameInfosetRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "pygambit/lib/infoset.pxi":40
 * 
 *     def add(self, action=None):
 *         if action is None:             # <<<<<<<<<<<<<<
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):
 */
  __pyx_t_1 = (__pyx_v_action == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/infoset.pxi":41
 *     def add(self, action=None):
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)             # <<<<<<<<<<<<<<
 *         elif isinstance(action, Action):
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 */
    try {
      __pyx_t_3 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(7, 41, __pyx_L1_error)
    }
    try {
      __pyx_t_3->InsertAction(((GameObjectPtr<GameActionRep>)NULL));
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(7, 41, __pyx_L1_error)
    }

    /* "pygambit/lib/infoset.pxi":40
 * 
 *     def add(self, action=None):
 *         if action is None:             # <<<<<<<<<<<<<<
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/infoset.pxi":42
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 *                 raise MismatchError("The new action should be from the same infoset")
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "pygambit/lib/infoset.pxi":43
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):
 *             if (<Infoset>action.infoset).infoset != self.infoset:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("The new action should be from the same infoset")
 *             self.infoset.deref().InsertAction((<Action>action).action)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_infoset); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = ((((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_4)->infoset != __pyx_v_self->infoset) != 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/infoset.pxi":44
 *         elif isinstance(action, Action):
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 *                 raise MismatchError("The new action should be from the same infoset")             # <<<<<<<<<<<<<<
 *             self.infoset.deref().InsertAction((<Action>action).action)
 *         else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 44, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_kp_s_The_new_action_should_be_from_th) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_The_new_action_should_be_from_th);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 44, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(7, 44, __pyx_L1_error)

      /* "pygambit/lib/infoset.pxi":43
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):
 *             if (<Infoset>action.infoset).infoset != self.infoset:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("The new action should be from the same infoset")
 *             self.infoset.deref().InsertAction((<Action>action).action)
 */
    }

    /* "pygambit/lib/infoset.pxi":45
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 *                 raise MismatchError("The new action should be from the same infoset")
 *             self.infoset.deref().InsertAction((<Action>action).action)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("insert_action takes an Action object as its input")
 */
    try {
      __pyx_t_3 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(7, 45, __pyx_L1_error)
    }
    try {
      __pyx_t_3->InsertAction(((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_action)->action);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(7, 45, __pyx_L1_error)
    }

    /* "pygambit/lib/infoset.pxi":42
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 *                 raise MismatchError("The new action should be from the same infoset")
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/infoset.pxi":47
 *             self.infoset.deref().InsertAction((<Action>action).action)
 *         else:
 *             raise TypeError("insert_action takes an Action object as its input")             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(7, 47, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/infoset.pxi":39
 *     cdef c_GameInfoset infoset
 * 
 *     def add(self, action=None):             # <<<<<<<<<<<<<<
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Actions.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":49
 *             raise TypeError("insert_action takes an Action object as its input")
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, act):
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_7Actions_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_7Actions_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Actions_2__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_7Actions_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 49, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumActions();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Actions.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":50
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()
 *     def __getitem__(self, act):             # <<<<<<<<<<<<<<
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)
 *         cdef Action a
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Actions_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_act); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Actions_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_act) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Actions_4__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *)__pyx_v_self), ((PyObject *)__pyx_v_act));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Actions_4__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self, PyObject *__pyx_v_act) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameInfosetRep *__pyx_t_8;
  GameObjectPtr<GameActionRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/infoset.pxi":51
 *     def __len__(self):     return self.infoset.deref().NumActions()
 *     def __getitem__(self, act):
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)             # <<<<<<<<<<<<<<
 *         cdef Action a
 *         a = Action()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_act); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_act};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 51, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_act};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 51, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_act);
      __Pyx_GIVEREF(__pyx_v_act);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_act);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/infoset.pxi":53
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)
 *         cdef Action a
 *         a = Action()             # <<<<<<<<<<<<<<
 *         a.action = self.infoset.deref().GetAction(act+1)
 *         return a
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Action)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_a = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/infoset.pxi":54
 *         cdef Action a
 *         a = Action()
 *         a.action = self.infoset.deref().GetAction(act+1)             # <<<<<<<<<<<<<<
 *         return a
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 54, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_act, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetAction(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(7, 54, __pyx_L1_error)
  }
  __pyx_v_a->action = __pyx_t_9;

  /* "pygambit/lib/infoset.pxi":55
 *         a = Action()
 *         a.action = self.infoset.deref().GetAction(act+1)
 *         return a             # <<<<<<<<<<<<<<
 * 
 * cdef class Infoset:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  __pyx_r = ((PyObject *)__pyx_v_a);
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":50
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()
 *     def __getitem__(self, act):             # <<<<<<<<<<<<<<
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)
 *         cdef Action a
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Actions.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Actions_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Actions_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Actions_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Actions_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Actions.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Actions_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Actions_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Actions_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Actions_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Actions.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":60
 *     cdef c_GameInfoset infoset
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset___repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GamePlayerRep *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  GameRep *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/infoset.pxi":61
 * 
 *     def __repr__(self):
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pygambit/lib/infoset.pxi":62
 *     def __repr__(self):
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,             # <<<<<<<<<<<<<<
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 62, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygambit/lib/infoset.pxi":63
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),             # <<<<<<<<<<<<<<
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 63, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetPlayer().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 63, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_t_4->GetLabel().c_str()); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "pygambit/lib/infoset.pxi":64
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Infoset self, other, whichop):
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 64, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetPlayer().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 64, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_t_4->GetGame().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 64, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_FromString(__pyx_t_6->GetTitle().c_str()); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "pygambit/lib/infoset.pxi":62
 *     def __repr__(self):
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,             # <<<<<<<<<<<<<<
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 */
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(7, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;

  /* "pygambit/lib/infoset.pxi":61
 * 
 *     def __repr__(self):
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 */
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Infoset_d_s_for_player_s_in_gam, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":60
 *     cdef c_GameInfoset infoset
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":66
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Infoset self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Infoset):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(7, 66, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_2__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameInfosetRep *__pyx_t_4;
  GameInfosetRep *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/infoset.pxi":67
 * 
 *     def __richcmp__(Infoset self, other, whichop):
 *         if isinstance(other, Infoset):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/infoset.pxi":68
 *     def __richcmp__(Infoset self, other, whichop):
 *         if isinstance(other, Infoset):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/infoset.pxi":69
 *         if isinstance(other, Infoset):
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->infoset.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(7, 69, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_other)->infoset.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(7, 69, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/infoset.pxi":68
 *     def __richcmp__(Infoset self, other, whichop):
 *         if isinstance(other, Infoset):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/infoset.pxi":70
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/infoset.pxi":71
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->infoset.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(7, 71, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_other)->infoset.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(7, 71, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/infoset.pxi":70
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()
 *             else:
 */
    }

    /* "pygambit/lib/infoset.pxi":73
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(7, 73, __pyx_L1_error)
    }

    /* "pygambit/lib/infoset.pxi":67
 * 
 *     def __richcmp__(Infoset self, other, whichop):
 *         if isinstance(other, Infoset):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 */
  }

  /* "pygambit/lib/infoset.pxi":75
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/infoset.pxi":76
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/infoset.pxi":75
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/infoset.pxi":77
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/infoset.pxi":78
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/infoset.pxi":77
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/infoset.pxi":80
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(7, 80, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/infoset.pxi":66
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Infoset self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Infoset):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":82
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.infoset.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_4__hash__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pygambit/lib/infoset.pxi":83
 * 
 *     def __hash__(self):
 *         return long(<long>self.infoset.deref())             # <<<<<<<<<<<<<<
 * 
 *     def precedes(self, node):
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 83, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyLong_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(7, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":82
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.infoset.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":85
 *         return long(<long>self.infoset.deref())
 * 
 *     def precedes(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_7precedes(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_7precedes(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("precedes (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_6precedes(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_6precedes(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameInfosetRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("precedes", 0);

  /* "pygambit/lib/infoset.pxi":86
 * 
 *     def precedes(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_8pygambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/infoset.pxi":87
 *     def precedes(self, node):
 *         if isinstance(node, Node):
 *             return self.infoset.deref().Precedes(((<Node>node).node))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("argument of precedes should be a Node instance")
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(7, 87, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3->Precedes(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_node)->node)); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/infoset.pxi":86
 * 
 *     def precedes(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 *         else:
 */
  }

  /* "pygambit/lib/infoset.pxi":89
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 *         else:
 *             raise TypeError("argument of precedes should be a Node instance")             # <<<<<<<<<<<<<<
 * 
 *     def reveal(self, player):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(7, 89, __pyx_L1_error)
  }

  /* "pygambit/lib/infoset.pxi":85
 *         return long(<long>self.infoset.deref())
 * 
 *     def precedes(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.precedes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":91
 *             raise TypeError("argument of precedes should be a Node instance")
 * 
 *     def reveal(self, player):             # <<<<<<<<<<<<<<
 *         if isinstance(player, Player):
 *             self.infoset.deref().Reveal((<Player>player).player)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_9reveal(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_9reveal(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reveal (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_8reveal(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject *)__pyx_v_player));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_8reveal(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameInfosetRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reveal", 0);

  /* "pygambit/lib/infoset.pxi":92
 * 
 *     def reveal(self, player):
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             self.infoset.deref().Reveal((<Player>player).player)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/infoset.pxi":93
 *     def reveal(self, player):
 *         if isinstance(player, Player):
 *             self.infoset.deref().Reveal((<Player>player).player)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("argument of reveal should be a Player instance")
 */
    try {
      __pyx_t_3 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(7, 93, __pyx_L1_error)
    }
    __pyx_t_3->Reveal(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_player)->player);

    /* "pygambit/lib/infoset.pxi":92
 * 
 *     def reveal(self, player):
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             self.infoset.deref().Reveal((<Player>player).player)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/infoset.pxi":95
 *             self.infoset.deref().Reveal((<Player>player).player)
 *         else:
 *             raise TypeError("argument of reveal should be a Player instance")             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(7, 95, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/infoset.pxi":91
 *             raise TypeError("argument of precedes should be a Node instance")
 * 
 *     def reveal(self, player):             # <<<<<<<<<<<<<<
 *         if isinstance(player, Player):
 *             self.infoset.deref().Reveal((<Player>player).player)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.reveal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":98
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameInfosetRep *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/infoset.pxi":100
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.infoset.deref().GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/infoset.pxi":101
 *             cdef Game g
 *             g = Game()
 *             g.game = self.infoset.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 101, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "pygambit/lib/infoset.pxi":102
 *             g = Game()
 *             g.game = self.infoset.deref().GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":98
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":105
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_5label___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/infoset.pxi":106
 *     property label:
 *         def __get__(self):
 *             return self.infoset.deref().GetLabel().decode('ascii')             # <<<<<<<<<<<<<<
 *         def __set__(self, str value):
 *             self.infoset.deref().SetLabel(value.encode('ascii'))
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 106, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1->GetLabel(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":105
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":107
 *         def __get__(self):
 *             return self.infoset.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             self.infoset.deref().SetLabel(value.encode('ascii'))
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(7, 107, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_5label_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/infoset.pxi":108
 *             return self.infoset.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):
 *             self.infoset.deref().SetLabel(value.encode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     property is_chance:
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 108, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_value, __pyx_n_s_ascii); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1->SetLabel(__pyx_t_3);

  /* "pygambit/lib/infoset.pxi":107
 *         def __get__(self):
 *             return self.infoset.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             self.infoset.deref().SetLabel(value.encode('ascii'))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":111
 * 
 *     property is_chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().IsChanceInfoset()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_9is_chance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_9is_chance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_9is_chance___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_9is_chance___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/infoset.pxi":112
 *     property is_chance:
 *         def __get__(self):
 *             return self.infoset.deref().IsChanceInfoset()             # <<<<<<<<<<<<<<
 * 
 *     property actions:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 112, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsChanceInfoset()); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":111
 * 
 *     property is_chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().IsChanceInfoset()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.is_chance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":115
 * 
 *     property actions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Actions a
 *             a = Actions()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_7actions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_7actions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_7actions___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_7actions___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameInfosetRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/infoset.pxi":117
 *         def __get__(self):
 *             cdef Actions a
 *             a = Actions()             # <<<<<<<<<<<<<<
 *             a.infoset = self.infoset
 *             return a
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Actions)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_a = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/infoset.pxi":118
 *             cdef Actions a
 *             a = Actions()
 *             a.infoset = self.infoset             # <<<<<<<<<<<<<<
 *             return a
 * 
 */
  __pyx_t_2 = __pyx_v_self->infoset;
  __pyx_v_a->infoset = __pyx_t_2;

  /* "pygambit/lib/infoset.pxi":119
 *             a = Actions()
 *             a.infoset = self.infoset
 *             return a             # <<<<<<<<<<<<<<
 * 
 *     property members:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  __pyx_r = ((PyObject *)__pyx_v_a);
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":115
 * 
 *     property actions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Actions a
 *             a = Actions()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.actions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":122
 * 
 *     property members:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Members m
 *             m = Members()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_7members_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_7members_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_7members___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_7members___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Members *__pyx_v_m = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameInfosetRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/infoset.pxi":124
 *         def __get__(self):
 *             cdef Members m
 *             m = Members()             # <<<<<<<<<<<<<<
 *             m.infoset = self.infoset
 *             return m
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Members)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_m = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Members *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/infoset.pxi":125
 *             cdef Members m
 *             m = Members()
 *             m.infoset = self.infoset             # <<<<<<<<<<<<<<
 *             return m
 * 
 */
  __pyx_t_2 = __pyx_v_self->infoset;
  __pyx_v_m->infoset = __pyx_t_2;

  /* "pygambit/lib/infoset.pxi":126
 *             m = Members()
 *             m.infoset = self.infoset
 *             return m             # <<<<<<<<<<<<<<
 * 
 *     property player:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_m));
  __pyx_r = ((PyObject *)__pyx_v_m);
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":122
 * 
 *     property members:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Members m
 *             m = Members()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.members.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":129
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             p = Player()
 *             p.player = self.infoset.deref().GetPlayer()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_6player_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_6player_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_6player___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_6player___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameInfosetRep *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/infoset.pxi":130
 *     property player:
 *         def __get__(self):
 *             p = Player()             # <<<<<<<<<<<<<<
 *             p.player = self.infoset.deref().GetPlayer()
 *             return p
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Player)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/infoset.pxi":131
 *         def __get__(self):
 *             p = Player()
 *             p.player = self.infoset.deref().GetPlayer()             # <<<<<<<<<<<<<<
 *             return p
 *         def __set__(self, player):
 */
  try {
    __pyx_t_2 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 131, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_2->GetPlayer();

  /* "pygambit/lib/infoset.pxi":132
 *             p = Player()
 *             p.player = self.infoset.deref().GetPlayer()
 *             return p             # <<<<<<<<<<<<<<
 *         def __set__(self, player):
 *             if not isinstance(player, Player):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "pygambit/lib/infoset.pxi":129
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             p = Player()
 *             p.player = self.infoset.deref().GetPlayer()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.player.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/infoset.pxi":133
 *             p.player = self.infoset.deref().GetPlayer()
 *             return p
 *         def __set__(self, player):             # <<<<<<<<<<<<<<
 *             if not isinstance(player, Player):
 *                 raise TypeError("argument should be a Player instance, received {}"
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_6player_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_6player_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_6player_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject *)__pyx_v_player));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_6player_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_player) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  GameInfosetRep *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/infoset.pxi":134
 *             return p
 *         def __set__(self, player):
 *             if not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *                 raise TypeError("argument should be a Player instance, received {}"
 * 		                .format(player.__class__.__name__))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/infoset.pxi":136
 *             if not isinstance(player, Player):
 *                 raise TypeError("argument should be a Player instance, received {}"
 * 		                .format(player.__class__.__name__))             # <<<<<<<<<<<<<<
 *             elif player.game != self.game:
 *                 raise MismatchError("player at an infoset must belong to the same game")
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_argument_should_be_a_Player_inst, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pygambit/lib/infoset.pxi":135
 *         def __set__(self, player):
 *             if not isinstance(player, Player):
 *                 raise TypeError("argument should be a Player instance, received {}"             # <<<<<<<<<<<<<<
 * 		                .format(player.__class__.__name__))
 *             elif player.game != self.game:
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(7, 135, __pyx_L1_error)

    /* "pygambit/lib/infoset.pxi":134
 *             return p
 *         def __set__(self, player):
 *             if not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *                 raise TypeError("argument should be a Player instance, received {}"
 * 		                .format(player.__class__.__name__))
 */
  }

  /* "pygambit/lib/infoset.pxi":137
 *                 raise TypeError("argument should be a Player instance, received {}"
 * 		                .format(player.__class__.__name__))
 *             elif player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("player at an infoset must belong to the same game")
 *             else:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/infoset.pxi":138
 * 		                .format(player.__class__.__name__))
 *             elif player.game != self.game:
 *                 raise MismatchError("player at an infoset must belong to the same game")             # <<<<<<<<<<<<<<
 *             else:
 *                 self.infoset.deref().SetPlayer((<Player>player).player)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_kp_s_player_at_an_infoset_must_belong) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_s_player_at_an_infoset_must_belong);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(7, 138, __pyx_L1_error)

    /* "pygambit/lib/infoset.pxi":137
 *                 raise TypeError("argument should be a Player instance, received {}"
 * 		                .format(player.__class__.__name__))
 *             elif player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("player at an infoset must belong to the same game")
 *             else:
 */
  }

  /* "pygambit/lib/infoset.pxi":140
 *                 raise MismatchError("player at an infoset must belong to the same game")
 *             else:
 *                 self.infoset.deref().SetPlayer((<Player>player).player)             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    try {
      __pyx_t_7 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(7, 140, __pyx_L1_error)
    }
    try {
      __pyx_t_7->SetPlayer(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_player)->player);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(7, 140, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/infoset.pxi":133
 *             p.player = self.infoset.deref().GetPlayer()
 *             return p
 *         def __set__(self, player):             # <<<<<<<<<<<<<<
 *             if not isinstance(player, Player):
 *                 raise TypeError("argument should be a Player instance, received {}"
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.player.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_10__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Infoset_12__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Infoset_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infoset.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/strategy.pxi":28
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy___repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/strategy.pxi":29
 * 
 *     def __repr__(self):
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.number, self.label,
 *                  self.player.label,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pygambit/lib/strategy.pxi":30
 *     def __repr__(self):
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,             # <<<<<<<<<<<<<<
 *                  self.player.label,
 *                  self.player.game.title)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygambit/lib/strategy.pxi":31
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,
 *                  self.player.label,             # <<<<<<<<<<<<<<
 *                  self.player.game.title)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygambit/lib/strategy.pxi":32
 *                 (self.number, self.label,
 *                  self.player.label,
 *                  self.player.game.title)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Strategy self, other, whichop):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_title); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygambit/lib/strategy.pxi":30
 *     def __repr__(self):
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,             # <<<<<<<<<<<<<<
 *                  self.player.label,
 *                  self.player.game.title)
 */
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;

  /* "pygambit/lib/strategy.pxi":29
 * 
 *     def __repr__(self):
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.number, self.label,
 *                  self.player.label,
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Strategy_d_s_for_player_s_in_ga, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/strategy.pxi":28
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/strategy.pxi":34
 *                  self.player.game.title)
 * 
 *     def __richcmp__(Strategy self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Strategy):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(8, 34, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_2__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameStrategyRep *__pyx_t_4;
  GameStrategyRep *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/strategy.pxi":35
 * 
 *     def __richcmp__(Strategy self, other, whichop):
 *         if isinstance(other, Strategy):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_Strategy); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/strategy.pxi":36
 *     def __richcmp__(Strategy self, other, whichop):
 *         if isinstance(other, Strategy):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 36, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/strategy.pxi":37
 *         if isinstance(other, Strategy):
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->strategy.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(8, 37, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_other)->strategy.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(8, 37, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/strategy.pxi":36
 *     def __richcmp__(Strategy self, other, whichop):
 *         if isinstance(other, Strategy):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/strategy.pxi":38
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/strategy.pxi":39
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->strategy.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(8, 39, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_other)->strategy.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(8, 39, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/strategy.pxi":38
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()
 *             else:
 */
    }

    /* "pygambit/lib/strategy.pxi":41
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(8, 41, __pyx_L1_error)
    }

    /* "pygambit/lib/strategy.pxi":35
 * 
 *     def __richcmp__(Strategy self, other, whichop):
 *         if isinstance(other, Strategy):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 */
  }

  /* "pygambit/lib/strategy.pxi":43
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/strategy.pxi":44
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/strategy.pxi":43
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/strategy.pxi":45
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/strategy.pxi":46
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/strategy.pxi":45
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/strategy.pxi":48
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(8, 48, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/strategy.pxi":34
 *                  self.player.game.title)
 * 
 *     def __richcmp__(Strategy self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Strategy):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/strategy.pxi":50
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.strategy.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_4__hash__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameStrategyRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pygambit/lib/strategy.pxi":51
 * 
 *     def __hash__(self):
 *         return long(<long>self.strategy.deref())             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  try {
    __pyx_t_1 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 51, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyLong_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(8, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "pygambit/lib/strategy.pxi":50
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.strategy.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/strategy.pxi":54
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strategy.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_5label___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameStrategyRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/strategy.pxi":55
 *     property label:
 *         def __get__(self):
 *             return self.strategy.deref().GetLabel().decode('ascii')             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             if self.restriction is not None:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 55, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1->GetLabel(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/strategy.pxi":54
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strategy.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/strategy.pxi":56
 *         def __get__(self):
 *             return self.strategy.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_5label_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_8genexpr1__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  GameStrategyRep *__pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/strategy.pxi":57
 *             return self.strategy.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.player.strategies]:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/strategy.pxi":58
 *         def __set__(self, value):
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *             if value in [i.label for i in self.player.strategies]:
 *                 warnings.warn("This player has another strategy with an identical label")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Changing_objects_in_a_restrictio) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Changing_objects_in_a_restrictio);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(8, 58, __pyx_L1_error)

    /* "pygambit/lib/strategy.pxi":57
 *             return self.strategy.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.player.strategies]:
 */
  }

  /* "pygambit/lib/strategy.pxi":59
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.player.strategies]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("This player has another strategy with an identical label")
 *             self.strategy.deref().SetLabel(value.encode('ascii'))
 */
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 59, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_player); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 59, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_strategies); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 59, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 59, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 59, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(8, 59, __pyx_L7_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 59, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(8, 59, __pyx_L7_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 59, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(8, 59, __pyx_L7_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_i, __pyx_n_s_label); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 59, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(8, 59, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/strategy.pxi":60
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.player.strategies]:
 *                 warnings.warn("This player has another strategy with an identical label")             # <<<<<<<<<<<<<<
 *             self.strategy.deref().SetLabel(value.encode('ascii'))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_kp_s_This_player_has_another_strategy) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_This_player_has_another_strategy);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/strategy.pxi":59
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.player.strategies]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("This player has another strategy with an identical label")
 *             self.strategy.deref().SetLabel(value.encode('ascii'))
 */
  }

  /* "pygambit/lib/strategy.pxi":61
 *             if value in [i.label for i in self.player.strategies]:
 *                 warnings.warn("This player has another strategy with an identical label")
 *             self.strategy.deref().SetLabel(value.encode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     property player:
 */
  try {
    __pyx_t_8 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 61, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(8, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8->SetLabel(__pyx_t_9);

  /* "pygambit/lib/strategy.pxi":56
 *         def __get__(self):
 *             return self.strategy.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/strategy.pxi":64
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             p = Player()
 *             p.restriction = self.restriction
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_6player_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_6player_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_6player___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_6player___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameStrategyRep *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/strategy.pxi":65
 *     property player:
 *         def __get__(self):
 *             p = Player()             # <<<<<<<<<<<<<<
 *             p.restriction = self.restriction
 *             p.player = self.strategy.deref().GetPlayer()
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Player)); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/strategy.pxi":66
 *         def __get__(self):
 *             p = Player()
 *             p.restriction = self.restriction             # <<<<<<<<<<<<<<
 *             p.player = self.strategy.deref().GetPlayer()
 *             return p
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->restriction);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_p->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_p->restriction));
  __pyx_v_p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/strategy.pxi":67
 *             p = Player()
 *             p.restriction = self.restriction
 *             p.player = self.strategy.deref().GetPlayer()             # <<<<<<<<<<<<<<
 *             return p
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 67, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_2->GetPlayer();

  /* "pygambit/lib/strategy.pxi":68
 *             p.restriction = self.restriction
 *             p.player = self.strategy.deref().GetPlayer()
 *             return p             # <<<<<<<<<<<<<<
 * 
 *     property number:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "pygambit/lib/strategy.pxi":64
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             p = Player()
 *             p.restriction = self.restriction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.player.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/strategy.pxi":71
 * 
 *     property number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strategy.deref().GetNumber() - 1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_6number_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_6number_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_6number___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_6number___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameStrategyRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/strategy.pxi":72
 *     property number:
 *         def __get__(self):
 *             return self.strategy.deref().GetNumber() - 1             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 72, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/strategy.pxi":71
 * 
 *     property number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strategy.deref().GetNumber() - 1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.number.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/strategy.pxi":74
 *             return self.strategy.deref().GetNumber() - 1
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_7unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_7unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_6unrestrict(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_6unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameStrategyRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "pygambit/lib/strategy.pxi":76
 *     def unrestrict(self):
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.strategy
 *         return s
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/strategy.pxi":77
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.strategy             # <<<<<<<<<<<<<<
 *         return s
 */
  __pyx_t_2 = __pyx_v_self->strategy;
  __pyx_v_s->strategy = __pyx_t_2;

  /* "pygambit/lib/strategy.pxi":78
 *         s = Strategy()
 *         s.strategy = self.strategy
 *         return s             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/strategy.pxi":74
 *             return self.strategy.deref().GetNumber() - 1
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_8__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Strategy_10__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Strategy_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":27
 *     "Represents a collection of infosets for a player."
 *     cdef c_GamePlayer player
 *     def __len__(self):    return self.player.deref().NumInfosets()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, iset):
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_8Infosets_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_8Infosets_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Infosets___len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_8Infosets___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 27, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumInfosets();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infosets.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":28
 *     cdef c_GamePlayer player
 *     def __len__(self):    return self.player.deref().NumInfosets()
 *     def __getitem__(self, iset):             # <<<<<<<<<<<<<<
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)
 *         cdef Infoset s
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Infosets_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_iset); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Infosets_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_iset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Infosets_2__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *)__pyx_v_self), ((PyObject *)__pyx_v_iset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Infosets_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *__pyx_v_self, PyObject *__pyx_v_iset) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GamePlayerRep *__pyx_t_8;
  GameObjectPtr<GameInfosetRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/player.pxi":29
 *     def __len__(self):    return self.player.deref().NumInfosets()
 *     def __getitem__(self, iset):
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)             # <<<<<<<<<<<<<<
 *         cdef Infoset s
 *         s = Infoset()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_iset); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_iset};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 29, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_iset};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 29, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 29, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_iset);
      __Pyx_GIVEREF(__pyx_v_iset);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_iset);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 29, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/player.pxi":31
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)
 *         cdef Infoset s
 *         s = Infoset()             # <<<<<<<<<<<<<<
 *         s.infoset = self.player.deref().GetInfoset(iset+1)
 *         return s
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infoset)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/player.pxi":32
 *         cdef Infoset s
 *         s = Infoset()
 *         s.infoset = self.player.deref().GetInfoset(iset+1)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 32, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_iset, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetInfoset(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(9, 32, __pyx_L1_error)
  }
  __pyx_v_s->infoset = __pyx_t_9;

  /* "pygambit/lib/player.pxi":33
 *         s = Infoset()
 *         s.infoset = self.player.deref().GetInfoset(iset+1)
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class Strategies(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":28
 *     cdef c_GamePlayer player
 *     def __len__(self):    return self.player.deref().NumInfosets()
 *     def __getitem__(self, iset):             # <<<<<<<<<<<<<<
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)
 *         cdef Infoset s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infosets.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Infosets_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Infosets_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Infosets_4__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Infosets_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infosets.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Infosets_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Infosets_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Infosets_6__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Infosets_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Infosets.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":39
 *     cdef c_GamePlayer player
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__19);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(9, 39, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategies.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10Strategies_add(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Strategies_add(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self, PyObject *__pyx_v_label) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "pygambit/lib/player.pxi":41
 *     def add(self, label=""):
 *         cdef Game g
 *         g = Game()             # <<<<<<<<<<<<<<
 *         g.game = self.player.deref().GetGame()
 *         if g.is_tree:
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/player.pxi":42
 *         cdef Game g
 *         g = Game()
 *         g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *         if g.is_tree:
 *             raise TypeError("Adding strategies is only applicable to games in strategic form")
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 42, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "pygambit/lib/player.pxi":43
 *         g = Game()
 *         g.game = self.player.deref().GetGame()
 *         if g.is_tree:             # <<<<<<<<<<<<<<
 *             raise TypeError("Adding strategies is only applicable to games in strategic form")
 *         cdef Strategy s
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_g), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(9, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "pygambit/lib/player.pxi":44
 *         g.game = self.player.deref().GetGame()
 *         if g.is_tree:
 *             raise TypeError("Adding strategies is only applicable to games in strategic form")             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(9, 44, __pyx_L1_error)

    /* "pygambit/lib/player.pxi":43
 *         g = Game()
 *         g.game = self.player.deref().GetGame()
 *         if g.is_tree:             # <<<<<<<<<<<<<<
 *             raise TypeError("Adding strategies is only applicable to games in strategic form")
 *         cdef Strategy s
 */
  }

  /* "pygambit/lib/player.pxi":46
 *             raise TypeError("Adding strategies is only applicable to games in strategic form")
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.player.deref().NewStrategy()
 *         s.label = str(label)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/player.pxi":47
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.player.deref().NewStrategy()             # <<<<<<<<<<<<<<
 *         s.label = str(label)
 *         return s
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 47, __pyx_L1_error)
  }
  __pyx_v_s->strategy = __pyx_t_2->NewStrategy();

  /* "pygambit/lib/player.pxi":48
 *         s = Strategy()
 *         s.strategy = self.player.deref().NewStrategy()
 *         s.label = str(label)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_s), __pyx_n_s_label, __pyx_t_1) < 0) __PYX_ERR(9, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/player.pxi":49
 *         s.strategy = self.player.deref().NewStrategy()
 *         s.label = str(label)
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):    return self.player.deref().NumStrategies()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":39
 *     cdef c_GamePlayer player
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategies.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":51
 *         return s
 * 
 *     def __len__(self):    return self.player.deref().NumStrategies()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_10Strategies_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_10Strategies_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10Strategies_2__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_10Strategies_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 51, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumStrategies();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategies.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":52
 * 
 *     def __len__(self):    return self.player.deref().NumStrategies()
 *     def __getitem__(self, st):             # <<<<<<<<<<<<<<
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)
 *         cdef Strategy s
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10Strategies_4__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *)__pyx_v_self), ((PyObject *)__pyx_v_st));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Strategies_4__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self, PyObject *__pyx_v_st) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GamePlayerRep *__pyx_t_8;
  GameObjectPtr<GameStrategyRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/player.pxi":53
 *     def __len__(self):    return self.player.deref().NumStrategies()
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_st); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_st};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 53, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_st};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 53, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_st);
      __Pyx_GIVEREF(__pyx_v_st);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_st);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/player.pxi":55
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.player.deref().GetStrategy(st+1)
 *         return s
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Strategy)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/player.pxi":56
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.player.deref().GetStrategy(st+1)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 56, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_st, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetStrategy(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(9, 56, __pyx_L1_error)
  }
  __pyx_v_s->strategy = __pyx_t_9;

  /* "pygambit/lib/player.pxi":57
 *         s = Strategy()
 *         s.strategy = self.player.deref().GetStrategy(st+1)
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class PlayerSupportStrategies(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":52
 * 
 *     def __len__(self):    return self.player.deref().NumStrategies()
 *     def __getitem__(self, st):             # <<<<<<<<<<<<<<
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)
 *         cdef Strategy s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategies.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10Strategies_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Strategies_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategies.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10Strategies_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10Strategies_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Strategies.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":64
 *     cdef StrategicRestriction restriction
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         raise UndefinedOperationError("Adding strategies is only applicable"\
 *                                       "to players in a game, not in a restriction")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_label = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__19);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(9, 64, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 64, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.PlayerSupportStrategies.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_add(((struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_add(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "pygambit/lib/player.pxi":65
 * 
 *     def add(self, label=""):
 *         raise UndefinedOperationError("Adding strategies is only applicable"\             # <<<<<<<<<<<<<<
 *                                       "to players in a game, not in a restriction")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_Adding_strategies_is_only_applic_2) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_Adding_strategies_is_only_applic_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(9, 65, __pyx_L1_error)

  /* "pygambit/lib/player.pxi":64
 *     cdef StrategicRestriction restriction
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         raise UndefinedOperationError("Adding strategies is only applicable"\
 *                                       "to players in a game, not in a restriction")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.PlayerSupportStrategies.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":68
 *                                       "to players in a game, not in a restriction")
 * 
 *     def __init__(self, Player player not None, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *         self.player = player
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_restriction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_restriction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(9, 68, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(9, 68, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_player = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)values[0]);
    __pyx_v_restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.PlayerSupportStrategies.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_8pygambit_3lib_9libgambit_Player, 0, "player", 0))) __PYX_ERR(9, 68, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_restriction), __pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction, 0, "restriction", 0))) __PYX_ERR(9, 68, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_2__init__(((struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self), __pyx_v_player, __pyx_v_restriction);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_2__init__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pygambit/lib/player.pxi":69
 * 
 *     def __init__(self, Player player not None, StrategicRestriction restriction not None):
 *         self.restriction = restriction             # <<<<<<<<<<<<<<
 *         self.player = player
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GOTREF(__pyx_v_self->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->restriction));
  __pyx_v_self->restriction = __pyx_v_restriction;

  /* "pygambit/lib/player.pxi":70
 *     def __init__(self, Player player not None, StrategicRestriction restriction not None):
 *         self.restriction = restriction
 *         self.player = player             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_player));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_player));
  __Pyx_GOTREF(__pyx_v_self->player);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->player));
  __pyx_v_self->player = __pyx_v_player;

  /* "pygambit/lib/player.pxi":68
 *                                       "to players in a game, not in a restriction")
 * 
 *     def __init__(self, Player player not None, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *         self.player = player
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":72
 *         self.player = player
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_4__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_4__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/player.pxi":73
 * 
 *     def __len__(self):
 *         return self.restriction.num_strategies_player(self.player.number)             # <<<<<<<<<<<<<<
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->restriction), __pyx_n_s_num_strategies_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->player), __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":72
 *         self.player = player
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.PlayerSupportStrategies.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":74
 *     def __len__(self):
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_6__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self), ((PyObject *)__pyx_v_strat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_6__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, PyObject *__pyx_v_strat) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  GameObjectPtr<GameStrategyRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/player.pxi":75
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Strategy s
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_strat); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/player.pxi":76
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_strat};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 76, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_strat};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 76, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_strat);
      __Pyx_GIVEREF(__pyx_v_strat);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_strat);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/player.pxi":75
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Strategy s
 */
  }

  /* "pygambit/lib/player.pxi":78
 *             return Collection.__getitem__(self, strat)
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.restriction.support.GetStrategy(self.player.number+1, strat+1)
 *         s.restriction = self.restriction
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Strategy)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/player.pxi":79
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.restriction.support.GetStrategy(self.player.number+1, strat+1)             # <<<<<<<<<<<<<<
 *         s.restriction = self.restriction
 *         return s
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->player), __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_strat, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  try {
    __pyx_t_9 = __pyx_v_self->restriction->support->GetStrategy(__pyx_t_6, __pyx_t_8);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(9, 79, __pyx_L1_error)
  }
  __pyx_v_s->strategy = __pyx_t_9;

  /* "pygambit/lib/player.pxi":80
 *         s = Strategy()
 *         s.strategy = self.restriction.support.GetStrategy(self.player.number+1, strat+1)
 *         s.restriction = self.restriction             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->restriction);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_s->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_s->restriction));
  __pyx_v_s->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygambit/lib/player.pxi":81
 *         s.strategy = self.restriction.support.GetStrategy(self.player.number+1, strat+1)
 *         s.restriction = self.restriction
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class Player:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":74
 *     def __len__(self):
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.PlayerSupportStrategies.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_8__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_8__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.player, self.restriction)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->player));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->player));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->player));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->restriction));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->restriction));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->restriction));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.player, self.restriction)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.player, self.restriction)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.player is not None or self.restriction is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.player, self.restriction)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.player is not None or self.restriction is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, None), state
 */
  /*else*/ {
    __pyx_t_2 = (((PyObject *)__pyx_v_self->player) != Py_None);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_3 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
    __pyx_t_2 = (__pyx_t_5 != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.player is not None or self.restriction is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.player is not None or self.restriction is not None
 *     if use_setstate:
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PlayerSupportStra); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_79490816);
    __Pyx_GIVEREF(__pyx_int_79490816);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_79490816);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.player is not None or self.restriction is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, None), state
 *     else:
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PlayerSupportStrategies__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_PlayerSupportStra); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_79490816);
    __Pyx_GIVEREF(__pyx_int_79490816);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_79490816);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.PlayerSupportStrategies.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PlayerSupportStrategies__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_10__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_10__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PlayerSupportStrategies__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_PlayerSupportStrategies__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PlayerSupportStrategies, (type(self), 0x4bcef00, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PlayerSupportStrategies__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.PlayerSupportStrategies.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":87
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player___repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/player.pxi":88
 * 
 *     def __repr__(self):
 *         if self.is_chance:             # <<<<<<<<<<<<<<
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_chance); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/player.pxi":89
 *     def __repr__(self):
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title             # <<<<<<<<<<<<<<
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 *                                                     self.label,
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_title); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Player_CHANCE_in_game_s, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/player.pxi":88
 * 
 *     def __repr__(self):
 *         if self.is_chance:             # <<<<<<<<<<<<<<
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 */
  }

  /* "pygambit/lib/player.pxi":90
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,             # <<<<<<<<<<<<<<
 *                                                     self.label,
 *                                                     self.game.title)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygambit/lib/player.pxi":91
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 *                                                     self.label,             # <<<<<<<<<<<<<<
 *                                                     self.game.title)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygambit/lib/player.pxi":92
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 *                                                     self.label,
 *                                                     self.game.title)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Player self, other, whichop):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_title); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygambit/lib/player.pxi":90
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,             # <<<<<<<<<<<<<<
 *                                                     self.label,
 *                                                     self.game.title)
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Player_d_s_in_game_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":87
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":94
 *                                                     self.game.title)
 * 
 *     def __richcmp__(Player self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Player):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(9, 94, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_2__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GamePlayerRep *__pyx_t_4;
  GamePlayerRep *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/player.pxi":95
 * 
 *     def __richcmp__(Player self, other, whichop):
 *         if isinstance(other, Player):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/player.pxi":96
 *     def __richcmp__(Player self, other, whichop):
 *         if isinstance(other, Player):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/player.pxi":97
 *         if isinstance(other, Player):
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.player.deref() != ((<Player>other).player).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->player.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(9, 97, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_other)->player.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(9, 97, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/player.pxi":96
 *     def __richcmp__(Player self, other, whichop):
 *         if isinstance(other, Player):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/player.pxi":98
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.player.deref() != ((<Player>other).player).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/player.pxi":99
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:
 *                 return self.player.deref() != ((<Player>other).player).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->player.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(9, 99, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_other)->player.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(9, 99, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/player.pxi":98
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.player.deref() != ((<Player>other).player).deref()
 *             else:
 */
    }

    /* "pygambit/lib/player.pxi":101
 *                 return self.player.deref() != ((<Player>other).player).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(9, 101, __pyx_L1_error)
    }

    /* "pygambit/lib/player.pxi":95
 * 
 *     def __richcmp__(Player self, other, whichop):
 *         if isinstance(other, Player):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()
 */
  }

  /* "pygambit/lib/player.pxi":103
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 103, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/player.pxi":104
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/player.pxi":103
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/player.pxi":105
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/player.pxi":106
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/player.pxi":105
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/player.pxi":108
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(9, 108, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/player.pxi":94
 *                                                     self.game.title)
 * 
 *     def __richcmp__(Player self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Player):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":110
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.player.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_6Player_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_6Player_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_4__hash__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_6Player_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pygambit/lib/player.pxi":111
 * 
 *     def __hash__(self):
 *         return long(<long>self.player.deref())             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 111, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyLong_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":110
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.player.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":114
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             if self.restriction is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GamePlayerRep *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/player.pxi":116
 *         def __get__(self):
 *             cdef Game g
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 return self.restriction
 *             g = Game()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/player.pxi":117
 *             cdef Game g
 *             if self.restriction is not None:
 *                 return self.restriction             # <<<<<<<<<<<<<<
 *             g = Game()
 *             g.game = self.player.deref().GetGame()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->restriction));
    __pyx_r = ((PyObject *)__pyx_v_self->restriction);
    goto __pyx_L0;

    /* "pygambit/lib/player.pxi":116
 *         def __get__(self):
 *             cdef Game g
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 return self.restriction
 *             g = Game()
 */
  }

  /* "pygambit/lib/player.pxi":118
 *             if self.restriction is not None:
 *                 return self.restriction
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.player.deref().GetGame()
 *             return g
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/player.pxi":119
 *                 return self.restriction
 *             g = Game()
 *             g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 119, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_4->GetGame();

  /* "pygambit/lib/player.pxi":120
 *             g = Game()
 *             g.game = self.player.deref().GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":114
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             if self.restriction is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":123
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.player.deref().GetLabel().decode('ascii')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_5label___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/player.pxi":124
 *     property label:
 *         def __get__(self):
 *             return self.player.deref().GetLabel().decode('ascii')             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 124, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1->GetLabel(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":123
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.player.deref().GetLabel().decode('ascii')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":126
 *             return self.player.deref().GetLabel().decode('ascii')
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_6Player_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_6Player_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_5label_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_6Player_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_8genexpr2__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  GamePlayerRep *__pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/player.pxi":127
 * 
 *         def __set__(self, value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             # check to see if the player's name has been used elsewhere
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/player.pxi":128
 *         def __set__(self, value):
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *             # check to see if the player's name has been used elsewhere
 *             if value in [i.label for i in self.game.players]:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Changing_objects_in_a_restrictio) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Changing_objects_in_a_restrictio);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(9, 128, __pyx_L1_error)

    /* "pygambit/lib/player.pxi":127
 * 
 *         def __set__(self, value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             # check to see if the player's name has been used elsewhere
 */
  }

  /* "pygambit/lib/player.pxi":130
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             # check to see if the player's name has been used elsewhere
 *             if value in [i.label for i in self.game.players]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("Another player with an identical label exists")
 *             self.player.deref().SetLabel(value.encode('ascii'))
 */
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 130, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 130, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 130, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 130, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 130, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 130, __pyx_L7_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 130, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(9, 130, __pyx_L7_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 130, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(9, 130, __pyx_L7_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_i, __pyx_n_s_label); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 130, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(9, 130, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i); __pyx_8genexpr2__pyx_v_i = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i); __pyx_8genexpr2__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/player.pxi":131
 *             # check to see if the player's name has been used elsewhere
 *             if value in [i.label for i in self.game.players]:
 *                 warnings.warn("Another player with an identical label exists")             # <<<<<<<<<<<<<<
 *             self.player.deref().SetLabel(value.encode('ascii'))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_kp_s_Another_player_with_an_identical) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_Another_player_with_an_identical);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/player.pxi":130
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             # check to see if the player's name has been used elsewhere
 *             if value in [i.label for i in self.game.players]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("Another player with an identical label exists")
 *             self.player.deref().SetLabel(value.encode('ascii'))
 */
  }

  /* "pygambit/lib/player.pxi":132
 *             if value in [i.label for i in self.game.players]:
 *                 warnings.warn("Another player with an identical label exists")
 *             self.player.deref().SetLabel(value.encode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     property number:
 */
  try {
    __pyx_t_8 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 132, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(9, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8->SetLabel(__pyx_t_9);

  /* "pygambit/lib/player.pxi":126
 *             return self.player.deref().GetLabel().decode('ascii')
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":135
 * 
 *     property number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.player.deref().GetNumber() - 1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_6number_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_6number_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_6number___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_6number___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/player.pxi":136
 *     property number:
 *         def __get__(self):
 *             return self.player.deref().GetNumber() - 1             # <<<<<<<<<<<<<<
 * 
 *     property is_chance:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 136, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":135
 * 
 *     property number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.player.deref().GetNumber() - 1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.number.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":139
 * 
 *     property is_chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return True if self.player.deref().IsChance() != 0 else False
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_9is_chance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_9is_chance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_9is_chance___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_9is_chance___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/player.pxi":140
 *     property is_chance:
 *         def __get__(self):
 *             return True if self.player.deref().IsChance() != 0 else False             # <<<<<<<<<<<<<<
 * 
 *     property strategies:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 140, __pyx_L1_error)
  }
  if (((__pyx_t_2->IsChance() != 0) != 0)) {
    __Pyx_INCREF(Py_True);
    __pyx_t_1 = Py_True;
  } else {
    __Pyx_INCREF(Py_False);
    __pyx_t_1 = Py_False;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":139
 * 
 *     property is_chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return True if self.player.deref().IsChance() != 0 else False
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.is_chance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":143
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Strategies s
 *             cdef PlayerSupportStrategies ps
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_10strategies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_10strategies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_10strategies___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_10strategies___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *__pyx_v_s = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_ps = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  GameObjectPtr<GamePlayerRep> __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/player.pxi":146
 *             cdef Strategies s
 *             cdef PlayerSupportStrategies ps
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 ps = PlayerSupportStrategies(self, self.restriction)
 *                 return ps
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/player.pxi":147
 *             cdef PlayerSupportStrategies ps
 *             if self.restriction is not None:
 *                 ps = PlayerSupportStrategies(self, self.restriction)             # <<<<<<<<<<<<<<
 *                 return ps
 *             s = Strategies()
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->restriction));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->restriction));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self->restriction));
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_PlayerSupportStrategies), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_ps = ((struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pygambit/lib/player.pxi":148
 *             if self.restriction is not None:
 *                 ps = PlayerSupportStrategies(self, self.restriction)
 *                 return ps             # <<<<<<<<<<<<<<
 *             s = Strategies()
 *             s.player = self.player
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ps));
    __pyx_r = ((PyObject *)__pyx_v_ps);
    goto __pyx_L0;

    /* "pygambit/lib/player.pxi":146
 *             cdef Strategies s
 *             cdef PlayerSupportStrategies ps
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 ps = PlayerSupportStrategies(self, self.restriction)
 *                 return ps
 */
  }

  /* "pygambit/lib/player.pxi":149
 *                 ps = PlayerSupportStrategies(self, self.restriction)
 *                 return ps
 *             s = Strategies()             # <<<<<<<<<<<<<<
 *             s.player = self.player
 *             return s
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Strategies)); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygambit/lib/player.pxi":150
 *                 return ps
 *             s = Strategies()
 *             s.player = self.player             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
  __pyx_t_5 = __pyx_v_self->player;
  __pyx_v_s->player = __pyx_t_5;

  /* "pygambit/lib/player.pxi":151
 *             s = Strategies()
 *             s.player = self.player
 *             return s             # <<<<<<<<<<<<<<
 * 
 *     property infosets:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":143
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Strategies s
 *             cdef PlayerSupportStrategies ps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.strategies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_ps);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":154
 * 
 *     property infosets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infosets s
 *             s = Infosets()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_8infosets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_8infosets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_8infosets___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_8infosets___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GamePlayerRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/player.pxi":156
 *         def __get__(self):
 *             cdef Infosets s
 *             s = Infosets()             # <<<<<<<<<<<<<<
 *             s.player = self.player
 *             return s
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infosets)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/player.pxi":157
 *             cdef Infosets s
 *             s = Infosets()
 *             s.player = self.player             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
  __pyx_t_2 = __pyx_v_self->player;
  __pyx_v_s->player = __pyx_t_2;

  /* "pygambit/lib/player.pxi":158
 *             s = Infosets()
 *             s.player = self.player
 *             return s             # <<<<<<<<<<<<<<
 * 
 *     property min_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":154
 * 
 *     property infosets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infosets s
 *             s = Infosets()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.infosets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":161
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_10min_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_10min_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_10min_payoff___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_10min_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  GameRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/player.pxi":163
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.player.deref().GetGame()
 *             return rat_to_py(g.game.deref().GetMinPayoff(self.number + 1))
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/player.pxi":164
 *             cdef Game g
 *             g = Game()
 *             g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return rat_to_py(g.game.deref().GetMinPayoff(self.number + 1))
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 164, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "pygambit/lib/player.pxi":165
 *             g = Game()
 *             g.game = self.player.deref().GetGame()
 *             return rat_to_py(g.game.deref().GetMinPayoff(self.number + 1))             # <<<<<<<<<<<<<<
 * 
 *     property max_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = __pyx_v_g->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 165, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_t_3->GetMinPayoff(__pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":161
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.min_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":168
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_10max_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_10max_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_10max_payoff___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_10max_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  GameRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/player.pxi":170
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.player.deref().GetGame()
 *             return rat_to_py(g.game.deref().GetMaxPayoff(self.number + 1))
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/player.pxi":171
 *             cdef Game g
 *             g = Game()
 *             g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return rat_to_py(g.game.deref().GetMaxPayoff(self.number + 1))
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 171, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "pygambit/lib/player.pxi":172
 *             g = Game()
 *             g.game = self.player.deref().GetGame()
 *             return rat_to_py(g.game.deref().GetMaxPayoff(self.number + 1))             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = __pyx_v_g->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 172, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_t_3->GetMaxPayoff(__pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":168
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.max_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/player.pxi":174
 *             return rat_to_py(g.game.deref().GetMaxPayoff(self.number + 1))
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_7unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_7unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_6unrestrict(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_6unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "pygambit/lib/player.pxi":176
 *     def unrestrict(self):
 *         cdef Game g
 *         g = Game()             # <<<<<<<<<<<<<<
 *         g.game = self.player.deref().GetGame()
 *         return g.players[self.number]
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/player.pxi":177
 *         cdef Game g
 *         g = Game()
 *         g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *         return g.players[self.number]
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 177, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "pygambit/lib/player.pxi":178
 *         g = Game()
 *         g.game = self.player.deref().GetGame()
 *         return g.players[self.number]             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_g), __pyx_n_s_players); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/player.pxi":174
 *             return rat_to_py(g.game.deref().GetMaxPayoff(self.number + 1))
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_8__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_6Player_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6Player_10__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6Player_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Player.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":26
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,
 *                                                      self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome___repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameOutcomeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/outcome.pxi":27
 * 
 *     def __repr__(self):
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,             # <<<<<<<<<<<<<<
 *                                                      self.label,
 *                                                      self.game.title)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 27, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygambit/lib/outcome.pxi":28
 *     def __repr__(self):
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,
 *                                                      self.label,             # <<<<<<<<<<<<<<
 *                                                      self.game.title)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygambit/lib/outcome.pxi":29
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,
 *                                                      self.label,
 *                                                      self.game.title)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Outcome self, other, whichop):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_title); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygambit/lib/outcome.pxi":27
 * 
 *     def __repr__(self):
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,             # <<<<<<<<<<<<<<
 *                                                      self.label,
 *                                                      self.game.title)
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Outcome_d_s_in_game_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/outcome.pxi":26
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,
 *                                                      self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":31
 *                                                      self.game.title)
 * 
 *     def __richcmp__(Outcome self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Outcome):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(10, 31, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_2__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameOutcomeRep *__pyx_t_4;
  GameOutcomeRep *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/outcome.pxi":32
 * 
 *     def __richcmp__(Outcome self, other, whichop):
 *         if isinstance(other, Outcome):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_Outcome); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/outcome.pxi":33
 *     def __richcmp__(Outcome self, other, whichop):
 *         if isinstance(other, Outcome):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 33, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/outcome.pxi":34
 *         if isinstance(other, Outcome):
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->outcome.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(10, 34, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_other)->outcome.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(10, 34, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 34, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/outcome.pxi":33
 *     def __richcmp__(Outcome self, other, whichop):
 *         if isinstance(other, Outcome):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/outcome.pxi":35
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 35, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/outcome.pxi":36
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->outcome.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(10, 36, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_other)->outcome.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(10, 36, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/outcome.pxi":35
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()
 *             else:
 */
    }

    /* "pygambit/lib/outcome.pxi":38
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(10, 38, __pyx_L1_error)
    }

    /* "pygambit/lib/outcome.pxi":32
 * 
 *     def __richcmp__(Outcome self, other, whichop):
 *         if isinstance(other, Outcome):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 */
  }

  /* "pygambit/lib/outcome.pxi":40
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 40, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/outcome.pxi":41
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/outcome.pxi":40
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/outcome.pxi":42
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 42, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/outcome.pxi":43
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/outcome.pxi":42
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/outcome.pxi":45
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(10, 45, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/outcome.pxi":31
 *                                                      self.game.title)
 * 
 *     def __richcmp__(Outcome self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Outcome):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":47
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.outcome.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_4__hash__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameOutcomeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pygambit/lib/outcome.pxi":48
 * 
 *     def __hash__(self):
 *         return long(<long>self.outcome.deref())             # <<<<<<<<<<<<<<
 * 
 *     def delete(self):
 */
  try {
    __pyx_t_1 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 48, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyLong_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "pygambit/lib/outcome.pxi":47
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.outcome.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":50
 *         return long(<long>self.outcome.deref())
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_7delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_7delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_6delete(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_6delete(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameRep *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete", 0);

  /* "pygambit/lib/outcome.pxi":51
 * 
 *     def delete(self):
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         (<Game>self.game).game.deref().DeleteOutcome(self.outcome)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/outcome.pxi":52
 *     def delete(self):
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *         (<Game>self.game).game.deref().DeleteOutcome(self.outcome)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Changing_objects_in_a_restrictio) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Changing_objects_in_a_restrictio);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(10, 52, __pyx_L1_error)

    /* "pygambit/lib/outcome.pxi":51
 * 
 *     def delete(self):
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         (<Game>self.game).game.deref().DeleteOutcome(self.outcome)
 */
  }

  /* "pygambit/lib/outcome.pxi":53
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         (<Game>self.game).game.deref().DeleteOutcome(self.outcome)             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  try {
    __pyx_t_6 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_3)->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 53, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6->DeleteOutcome(__pyx_v_self->outcome);

  /* "pygambit/lib/outcome.pxi":50
 *         return long(<long>self.outcome.deref())
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":56
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             if self.restriction is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameOutcomeRep *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/outcome.pxi":58
 *         def __get__(self):
 *             cdef Game g
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 return self.restriction
 *             g = Game()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/outcome.pxi":59
 *             cdef Game g
 *             if self.restriction is not None:
 *                 return self.restriction             # <<<<<<<<<<<<<<
 *             g = Game()
 *             g.game = self.outcome.deref().GetGame()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->restriction));
    __pyx_r = ((PyObject *)__pyx_v_self->restriction);
    goto __pyx_L0;

    /* "pygambit/lib/outcome.pxi":58
 *         def __get__(self):
 *             cdef Game g
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 return self.restriction
 *             g = Game()
 */
  }

  /* "pygambit/lib/outcome.pxi":60
 *             if self.restriction is not None:
 *                 return self.restriction
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.outcome.deref().GetGame()
 *             return g
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/outcome.pxi":61
 *                 return self.restriction
 *             g = Game()
 *             g.game = self.outcome.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 61, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_4->GetGame();

  /* "pygambit/lib/outcome.pxi":62
 *             g = Game()
 *             g.game = self.outcome.deref().GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/outcome.pxi":56
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             if self.restriction is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":65
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.outcome.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_5label___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameOutcomeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/outcome.pxi":66
 *     property label:
 *         def __get__(self):
 *             return self.outcome.deref().GetLabel().decode('ascii')             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             if self.restriction is not None:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 66, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1->GetLabel(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/outcome.pxi":65
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.outcome.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":67
 *         def __get__(self):
 *             return self.outcome.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_5label_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_8genexpr3__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  GameOutcomeRep *__pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/outcome.pxi":68
 *             return self.outcome.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.game.outcomes]:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/outcome.pxi":69
 *         def __set__(self, value):
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *             if value in [i.label for i in self.game.outcomes]:
 *                 warnings.warn("Another outcome with an identical label exists")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Changing_objects_in_a_restrictio) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Changing_objects_in_a_restrictio);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(10, 69, __pyx_L1_error)

    /* "pygambit/lib/outcome.pxi":68
 *             return self.outcome.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.game.outcomes]:
 */
  }

  /* "pygambit/lib/outcome.pxi":70
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.game.outcomes]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("Another outcome with an identical label exists")
 *             self.outcome.deref().SetLabel(value.encode('ascii'))
 */
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 70, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 70, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_outcomes); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 70, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 70, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(10, 70, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(10, 70, __pyx_L7_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 70, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(10, 70, __pyx_L7_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 70, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(10, 70, __pyx_L7_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr3__pyx_v_i, __pyx_n_s_label); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 70, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(10, 70, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i); __pyx_8genexpr3__pyx_v_i = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i); __pyx_8genexpr3__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_value, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/outcome.pxi":71
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.game.outcomes]:
 *                 warnings.warn("Another outcome with an identical label exists")             # <<<<<<<<<<<<<<
 *             self.outcome.deref().SetLabel(value.encode('ascii'))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_kp_s_Another_outcome_with_an_identica) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_s_Another_outcome_with_an_identica);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/outcome.pxi":70
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [i.label for i in self.game.outcomes]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("Another outcome with an identical label exists")
 *             self.outcome.deref().SetLabel(value.encode('ascii'))
 */
  }

  /* "pygambit/lib/outcome.pxi":72
 *             if value in [i.label for i in self.game.outcomes]:
 *                 warnings.warn("Another outcome with an identical label exists")
 *             self.outcome.deref().SetLabel(value.encode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, player):
 */
  try {
    __pyx_t_8 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 72, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8->SetLabel(__pyx_t_9);

  /* "pygambit/lib/outcome.pxi":67
 *         def __get__(self):
 *             return self.outcome.deref().GetLabel().decode('ascii')
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":74
 *             self.outcome.deref().SetLabel(value.encode('ascii'))
 * 
 *     def __getitem__(self, player):             # <<<<<<<<<<<<<<
 *         cdef bytes py_string
 *         if isinstance(player, Player):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_8__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self), ((PyObject *)__pyx_v_player));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_8__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_v_py_string = 0;
  PyObject *__pyx_v_number = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameOutcomeRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Number __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/outcome.pxi":76
 *     def __getitem__(self, player):
 *         cdef bytes py_string
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/outcome.pxi":77
 *         cdef bytes py_string
 *         if isinstance(player, Player):
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()             # <<<<<<<<<<<<<<
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number
 */
    try {
      __pyx_t_3 = __pyx_v_self->outcome.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 77, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_number); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_7 = __pyx_t_3->GetPayoff<Number>(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(10, 77, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_t_7.operator const string &().c_str()); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_py_string = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pygambit/lib/outcome.pxi":76
 *     def __getitem__(self, player):
 *         cdef bytes py_string
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/outcome.pxi":78
 *         if isinstance(player, Player):
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 */
  __pyx_t_2 = PyString_Check(__pyx_v_player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/outcome.pxi":79
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 *         elif isinstance(player, int):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_player); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_number); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_number = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pygambit/lib/outcome.pxi":80
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()             # <<<<<<<<<<<<<<
 *         elif isinstance(player, int):
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 */
    try {
      __pyx_t_3 = __pyx_v_self->outcome.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 80, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_number, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_7 = __pyx_t_3->GetPayoff<Number>(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(10, 80, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_t_7.operator const string &().c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_py_string = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pygambit/lib/outcome.pxi":78
 *         if isinstance(player, Player):
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/outcome.pxi":81
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 *         elif isinstance(player, int):             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string.decode('ascii'):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/outcome.pxi":82
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 *         elif isinstance(player, int):
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()             # <<<<<<<<<<<<<<
 *         if "." in py_string.decode('ascii'):
 *             return decimal.Decimal(py_string.decode('ascii'))
 */
    try {
      __pyx_t_3 = __pyx_v_self->outcome.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 82, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_player, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_7 = __pyx_t_3->GetPayoff<Number>(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(10, 82, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_t_7.operator const string &().c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_py_string = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pygambit/lib/outcome.pxi":81
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 *         elif isinstance(player, int):             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string.decode('ascii'):
 */
  }
  __pyx_L3:;

  /* "pygambit/lib/outcome.pxi":83
 *         elif isinstance(player, int):
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string.decode('ascii'):             # <<<<<<<<<<<<<<
 *             return decimal.Decimal(py_string.decode('ascii'))
 *         else:
 */
  if (unlikely(!__pyx_v_py_string)) { __Pyx_RaiseUnboundLocalError("py_string"); __PYX_ERR(10, 83, __pyx_L1_error) }
  __pyx_t_4 = __Pyx_decode_bytes(__pyx_v_py_string, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s__2, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/outcome.pxi":84
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string.decode('ascii'):
 *             return decimal.Decimal(py_string.decode('ascii'))             # <<<<<<<<<<<<<<
 *         else:
 *             return Rational(py_string.decode('ascii'))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(10, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_v_py_string)) { __Pyx_RaiseUnboundLocalError("py_string"); __PYX_ERR(10, 84, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_decode_bytes(__pyx_v_py_string, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/outcome.pxi":83
 *         elif isinstance(player, int):
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string.decode('ascii'):             # <<<<<<<<<<<<<<
 *             return decimal.Decimal(py_string.decode('ascii'))
 *         else:
 */
  }

  /* "pygambit/lib/outcome.pxi":86
 *             return decimal.Decimal(py_string.decode('ascii'))
 *         else:
 *             return Rational(py_string.decode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, pl, value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Rational); if (unlikely(!__pyx_t_8)) __PYX_ERR(10, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(!__pyx_v_py_string)) { __Pyx_RaiseUnboundLocalError("py_string"); __PYX_ERR(10, 86, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_decode_bytes(__pyx_v_py_string, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/outcome.pxi":74
 *             self.outcome.deref().SetLabel(value.encode('ascii'))
 * 
 *     def __getitem__(self, player):             # <<<<<<<<<<<<<<
 *         cdef bytes py_string
 *         if isinstance(player, Player):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XDECREF(__pyx_v_number);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":88
 *             return Rational(py_string.decode('ascii'))
 * 
 *     def __setitem__(self, pl, value):             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_10__setitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self), ((PyObject *)__pyx_v_pl), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_10__setitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value) {
  std::string __pyx_v_s;
  PyObject *__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::string __pyx_t_7;
  GameOutcomeRep *__pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pygambit/lib/outcome.pxi":89
 * 
 *     def __setitem__(self, pl, value):
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef string s
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/outcome.pxi":90
 *     def __setitem__(self, pl, value):
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a support is not supported")             # <<<<<<<<<<<<<<
 *         cdef string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Changing_objects_in_a_support_is) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Changing_objects_in_a_support_is);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(10, 90, __pyx_L1_error)

    /* "pygambit/lib/outcome.pxi":89
 * 
 *     def __setitem__(self, pl, value):
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef string s
 */
  }

  /* "pygambit/lib/outcome.pxi":92
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \             # <<<<<<<<<<<<<<
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_value); 
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = PyObject_IsInstance(__pyx_v_value, __pyx_t_4); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(10, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = (__pyx_t_6 != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "pygambit/lib/outcome.pxi":93
 *         cdef string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \
 *            isinstance(value, fractions.Fraction):             # <<<<<<<<<<<<<<
 *             v = str(value)
 *             s = v.encode('ascii')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_fractions); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_value, __pyx_t_3); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(10, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;

  /* "pygambit/lib/outcome.pxi":92
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \             # <<<<<<<<<<<<<<
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)
 */
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/outcome.pxi":94
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)             # <<<<<<<<<<<<<<
 *             s = v.encode('ascii')
 *             self.outcome.deref().SetPayoff(pl+1, s)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_v = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pygambit/lib/outcome.pxi":95
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)
 *             s = v.encode('ascii')             # <<<<<<<<<<<<<<
 *             self.outcome.deref().SetPayoff(pl+1, s)
 *         else:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_n_s_ascii);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_s = __pyx_t_7;

    /* "pygambit/lib/outcome.pxi":96
 *             v = str(value)
 *             s = v.encode('ascii')
 *             self.outcome.deref().SetPayoff(pl+1, s)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("payoff argument should be a numeric type instance")
 */
    try {
      __pyx_t_8 = __pyx_v_self->outcome.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 96, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_t_8->SetPayoff(__pyx_t_9, __pyx_v_s);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(10, 96, __pyx_L1_error)
    }

    /* "pygambit/lib/outcome.pxi":92
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \             # <<<<<<<<<<<<<<
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)
 */
    goto __pyx_L4;
  }

  /* "pygambit/lib/outcome.pxi":98
 *             self.outcome.deref().SetPayoff(pl+1, s)
 *         else:
 *             raise TypeError("payoff argument should be a numeric type instance")             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(10, 98, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "pygambit/lib/outcome.pxi":88
 *             return Rational(py_string.decode('ascii'))
 * 
 *     def __setitem__(self, pl, value):             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":100
 *             raise TypeError("payoff argument should be a numeric type instance")
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Outcome o
 *         o = Outcome()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_13unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_13unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_12unrestrict(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_12unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameOutcomeRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "pygambit/lib/outcome.pxi":102
 *     def unrestrict(self):
 *         cdef Outcome o
 *         o = Outcome()             # <<<<<<<<<<<<<<
 *         o.outcome = self.outcome
 *         return o
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Outcome)); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/outcome.pxi":103
 *         cdef Outcome o
 *         o = Outcome()
 *         o.outcome = self.outcome             # <<<<<<<<<<<<<<
 *         return o
 * 
 */
  __pyx_t_2 = __pyx_v_self->outcome;
  __pyx_v_o->outcome = __pyx_t_2;

  /* "pygambit/lib/outcome.pxi":104
 *         o = Outcome()
 *         o.outcome = self.outcome
 *         return o             # <<<<<<<<<<<<<<
 * 
 * cdef class TreeGameOutcome:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_o));
  __pyx_r = ((PyObject *)__pyx_v_o);
  goto __pyx_L0;

  /* "pygambit/lib/outcome.pxi":100
 *             raise TypeError("payoff argument should be a numeric type instance")
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Outcome o
 *         o = Outcome()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_14__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Outcome_16__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Outcome_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcome.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":112
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/outcome.pxi":114
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.c_game
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/outcome.pxi":115
 *             cdef Game g
 *             g = Game()
 *             g.game = self.c_game             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_t_2 = __pyx_v_self->c_game;
  __pyx_v_g->game = __pyx_t_2;

  /* "pygambit/lib/outcome.pxi":116
 *             g = Game()
 *             g.game = self.c_game
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/outcome.pxi":112
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":118
 *             return g
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         del self.psp
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_1__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_1__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome___del__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome___del__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "pygambit/lib/outcome.pxi":119
 * 
 *     def __del__(self):
 *         del self.psp             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  delete __pyx_v_self->psp;

  /* "pygambit/lib/outcome.pxi":118
 *             return g
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         del self.psp
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":121
 *         del self.psp
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Outcome '%s' in game '%s'>" % (self.label,
 *                                                 self.game.title)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_2__repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_2__repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/outcome.pxi":122
 * 
 *     def __repr__(self):
 *         return "<Outcome '%s' in game '%s'>" % (self.label,             # <<<<<<<<<<<<<<
 *                                                 self.game.title)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygambit/lib/outcome.pxi":123
 *     def __repr__(self):
 *         return "<Outcome '%s' in game '%s'>" % (self.label,
 *                                                 self.game.title)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_title); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/outcome.pxi":122
 * 
 *     def __repr__(self):
 *         return "<Outcome '%s' in game '%s'>" % (self.label,             # <<<<<<<<<<<<<<
 *                                                 self.game.title)
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Outcome_s_in_game_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/outcome.pxi":121
 *         del self.psp
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Outcome '%s' in game '%s'>" % (self.label,
 *                                                 self.game.title)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":125
 *                                                 self.game.title)
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(10, 125, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_4__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_4__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/outcome.pxi":126
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 *         if isinstance(other, TreeGameOutcome):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_TreeGameOutcome); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/outcome.pxi":127
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 127, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/outcome.pxi":128
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->psp->operator->() == ((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_other)->psp->operator->())); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/outcome.pxi":127
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/outcome.pxi":129
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/outcome.pxi":130
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->psp->operator->() != ((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_other)->psp->operator->())); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/outcome.pxi":129
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()
 *             else:
 */
    }

    /* "pygambit/lib/outcome.pxi":132
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(10, 132, __pyx_L1_error)
    }

    /* "pygambit/lib/outcome.pxi":126
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 *         if isinstance(other, TreeGameOutcome):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 */
  }

  /* "pygambit/lib/outcome.pxi":134
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 134, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/outcome.pxi":135
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/outcome.pxi":134
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/outcome.pxi":136
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 136, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/outcome.pxi":137
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/outcome.pxi":136
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/outcome.pxi":139
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, player):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(10, 139, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/outcome.pxi":125
 *                                                 self.game.title)
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":141
 *                 raise NotImplementedError
 * 
 *     def __getitem__(self, player):             # <<<<<<<<<<<<<<
 *         if isinstance(player, Player):
 *             return rat_to_py(self.psp.deref().GetPayoff(player.number+1))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_6__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self), ((PyObject *)__pyx_v_player));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_6__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_v_number = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  GameRep *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/outcome.pxi":142
 * 
 *     def __getitem__(self, player):
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             return rat_to_py(self.psp.deref().GetPayoff(player.number+1))
 *         elif isinstance(player, str):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/outcome.pxi":143
 *     def __getitem__(self, player):
 *         if isinstance(player, Player):
 *             return rat_to_py(self.psp.deref().GetPayoff(player.number+1))             # <<<<<<<<<<<<<<
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->psp->operator->()->GetPayoff(__pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/outcome.pxi":142
 * 
 *     def __getitem__(self, player):
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             return rat_to_py(self.psp.deref().GetPayoff(player.number+1))
 *         elif isinstance(player, str):
 */
  }

  /* "pygambit/lib/outcome.pxi":144
 *         if isinstance(player, Player):
 *             return rat_to_py(self.psp.deref().GetPayoff(player.number+1))
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             number = self.game.players[player].number
 *             return rat_to_py(self.psp.deref().GetPayoff(number+1))
 */
  __pyx_t_2 = PyString_Check(__pyx_v_player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/outcome.pxi":145
 *             return rat_to_py(self.psp.deref().GetPayoff(player.number+1))
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number             # <<<<<<<<<<<<<<
 *             return rat_to_py(self.psp.deref().GetPayoff(number+1))
 *         elif isinstance(player, int):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_player); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_number = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pygambit/lib/outcome.pxi":146
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number
 *             return rat_to_py(self.psp.deref().GetPayoff(number+1))             # <<<<<<<<<<<<<<
 *         elif isinstance(player, int):
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_number, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->psp->operator->()->GetPayoff(__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/outcome.pxi":144
 *         if isinstance(player, Player):
 *             return rat_to_py(self.psp.deref().GetPayoff(player.number+1))
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             number = self.game.players[player].number
 *             return rat_to_py(self.psp.deref().GetPayoff(number+1))
 */
  }

  /* "pygambit/lib/outcome.pxi":147
 *             number = self.game.players[player].number
 *             return rat_to_py(self.psp.deref().GetPayoff(number+1))
 *         elif isinstance(player, int):             # <<<<<<<<<<<<<<
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 *                 raise IndexError("Index out of range")
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/outcome.pxi":148
 *             return rat_to_py(self.psp.deref().GetPayoff(number+1))
 *         elif isinstance(player, int):
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():             # <<<<<<<<<<<<<<
 *                 raise IndexError("Index out of range")
 *             return rat_to_py(self.psp.deref().GetPayoff(player+1))
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_player, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 148, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(10, 148, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L5_bool_binop_done;
    }
    try {
      __pyx_t_6 = __pyx_v_self->c_game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 148, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_6->NumPlayers()); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_player, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 148, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(10, 148, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L5_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "pygambit/lib/outcome.pxi":149
 *         elif isinstance(player, int):
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 *                 raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 *             return rat_to_py(self.psp.deref().GetPayoff(player+1))
 *         raise TypeError("player index should be a Player, int or str instance; {} passed"
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(10, 149, __pyx_L1_error)

      /* "pygambit/lib/outcome.pxi":148
 *             return rat_to_py(self.psp.deref().GetPayoff(number+1))
 *         elif isinstance(player, int):
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():             # <<<<<<<<<<<<<<
 *                 raise IndexError("Index out of range")
 *             return rat_to_py(self.psp.deref().GetPayoff(player+1))
 */
    }

    /* "pygambit/lib/outcome.pxi":150
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 *                 raise IndexError("Index out of range")
 *             return rat_to_py(self.psp.deref().GetPayoff(player+1))             # <<<<<<<<<<<<<<
 *         raise TypeError("player index should be a Player, int or str instance; {} passed"
 *                         .format(player.__class__.__name__))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_player, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 150, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->psp->operator->()->GetPayoff(__pyx_t_5)); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/outcome.pxi":147
 *             number = self.game.players[player].number
 *             return rat_to_py(self.psp.deref().GetPayoff(number+1))
 *         elif isinstance(player, int):             # <<<<<<<<<<<<<<
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 *                 raise IndexError("Index out of range")
 */
  }

  /* "pygambit/lib/outcome.pxi":152
 *             return rat_to_py(self.psp.deref().GetPayoff(player+1))
 *         raise TypeError("player index should be a Player, int or str instance; {} passed"
 *                         .format(player.__class__.__name__))             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, pl, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_player_index_should_be_a_Player, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_class); if (unlikely(!__pyx_t_7)) __PYX_ERR(10, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(10, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygambit/lib/outcome.pxi":151
 *                 raise IndexError("Index out of range")
 *             return rat_to_py(self.psp.deref().GetPayoff(player+1))
 *         raise TypeError("player index should be a Player, int or str instance; {} passed"             # <<<<<<<<<<<<<<
 *                         .format(player.__class__.__name__))
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(10, 151, __pyx_L1_error)

  /* "pygambit/lib/outcome.pxi":141
 *                 raise NotImplementedError
 * 
 *     def __getitem__(self, player):             # <<<<<<<<<<<<<<
 *         if isinstance(player, Player):
 *             return rat_to_py(self.psp.deref().GetPayoff(player.number+1))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_number);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":154
 *                         .format(player.__class__.__name__))
 * 
 *     def __setitem__(self, pl, value):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_8__setitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self), ((PyObject *)__pyx_v_pl), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_8__setitem__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pl, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pygambit/lib/outcome.pxi":155
 * 
 *     def __setitem__(self, pl, value):
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 * 
 *     def delete(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(10, 155, __pyx_L1_error)

  /* "pygambit/lib/outcome.pxi":154
 *                         .format(player.__class__.__name__))
 * 
 *     def __setitem__(self, pl, value):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":157
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_11delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_11delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_10delete(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_10delete(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete", 0);

  /* "pygambit/lib/outcome.pxi":158
 * 
 *     def delete(self):
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(10, 158, __pyx_L1_error)

  /* "pygambit/lib/outcome.pxi":157
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":161
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  PyObject *__pyx_8genexpr4__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  GameStrategyRep *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/outcome.pxi":162
 *     property label:
 *         def __get__(self):
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )             # <<<<<<<<<<<<<<
 *         def __set__(self, char *value):
 *             raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 162, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 162, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 162, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 162, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 162, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(10, 162, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 162, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(10, 162, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 162, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(10, 162, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_player, __pyx_t_3);
      __pyx_t_3 = 0;
      try {
        __pyx_t_6 = __pyx_v_self->psp->operator->()->GetStrategy(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_8genexpr4__pyx_v_player)->player).operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(10, 162, __pyx_L5_error)
      }
      __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_t_6->GetLabel().c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 162, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(10, 162, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_player); __pyx_8genexpr4__pyx_v_player = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_player); __pyx_8genexpr4__pyx_v_player = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__30, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_2, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/outcome.pxi":161
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/outcome.pxi":163
 *         def __get__(self):
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  CYTHON_UNUSED char *__pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsWritableString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(10, 163, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label_2__set__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED char *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/outcome.pxi":164
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):
 *             raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(10, 164, __pyx_L1_error)

  /* "pygambit/lib/outcome.pxi":163
 *         def __get__(self):
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_12__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_14__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_15TreeGameOutcome_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.TreeGameOutcome.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":27
 *     "Represents the collection of direct children of a node."
 *     cdef c_GameNode parent
 *     def __len__(self):    return self.parent.deref().NumChildren()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, i):
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_8Children_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_8Children_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Children___len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Children *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_8Children___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Children *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->parent.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 27, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumChildren();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Children.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":28
 *     cdef c_GameNode parent
 *     def __len__(self):    return self.parent.deref().NumChildren()
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Children_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Children_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Children_2__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Children *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Children_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Children *__pyx_v_self, PyObject *__pyx_v_i) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameNodeRep *__pyx_t_8;
  GameObjectPtr<GameNodeRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/node.pxi":29
 *     def __len__(self):    return self.parent.deref().NumChildren()
 *     def __getitem__(self, i):
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)             # <<<<<<<<<<<<<<
 *         cdef Node n
 *         n = Node()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_i); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_i};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 29, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_i};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 29, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 29, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_i);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 29, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/node.pxi":31
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 *         n = Node()             # <<<<<<<<<<<<<<
 *         n.node = self.parent.deref().GetChild(i+1)
 *         return n
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Node)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_n = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/node.pxi":32
 *         cdef Node n
 *         n = Node()
 *         n.node = self.parent.deref().GetChild(i+1)             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->parent.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 32, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetChild(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(11, 32, __pyx_L1_error)
  }
  __pyx_v_n->node = __pyx_t_9;

  /* "pygambit/lib/node.pxi":33
 *         n = Node()
 *         n.node = self.parent.deref().GetChild(i+1)
 *         return n             # <<<<<<<<<<<<<<
 * 
 * cdef class Node:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = ((PyObject *)__pyx_v_n);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":28
 *     cdef c_GameNode parent
 *     def __len__(self):    return self.parent.deref().NumChildren()
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Children.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Children_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Children_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Children_4__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Children *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Children_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Children *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Children.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Children_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Children_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Children_6__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Children *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Children_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Children *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Children.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":38
 *     cdef c_GameNode node
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),
 *                                                   self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node___repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GameRep *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/node.pxi":39
 * 
 *     def __repr__(self):
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),             # <<<<<<<<<<<<<<
 *                                                   self.label,
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 39, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1->GetNumber()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygambit/lib/node.pxi":40
 *     def __repr__(self):
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),
 *                                                   self.label,             # <<<<<<<<<<<<<<
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygambit/lib/node.pxi":41
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),
 *                                                   self.label,
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Node self, other, whichop):
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 41, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetGame().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 41, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_t_4->GetTitle().c_str()); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "pygambit/lib/node.pxi":39
 * 
 *     def __repr__(self):
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),             # <<<<<<<<<<<<<<
 *                                                   self.label,
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 */
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Node_d_s_in_game_s, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":38
 *     cdef c_GameNode node
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),
 *                                                   self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":43
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Node self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Node):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(11, 43, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_2__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_2__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameNodeRep *__pyx_t_4;
  GameNodeRep *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/node.pxi":44
 * 
 *     def __richcmp__(Node self, other, whichop):
 *         if isinstance(other, Node):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":45
 *     def __richcmp__(Node self, other, whichop):
 *         if isinstance(other, Node):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(11, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/node.pxi":46
 *         if isinstance(other, Node):
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.node.deref() != ((<Node>other).node).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->node.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(11, 46, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_other)->node.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(11, 46, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 46, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/node.pxi":45
 *     def __richcmp__(Node self, other, whichop):
 *         if isinstance(other, Node):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/node.pxi":47
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.node.deref() != ((<Node>other).node).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(11, 47, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/node.pxi":48
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:
 *                 return self.node.deref() != ((<Node>other).node).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->node.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(11, 48, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_other)->node.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(11, 48, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 48, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/node.pxi":47
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.node.deref() != ((<Node>other).node).deref()
 *             else:
 */
    }

    /* "pygambit/lib/node.pxi":50
 *                 return self.node.deref() != ((<Node>other).node).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(11, 50, __pyx_L1_error)
    }

    /* "pygambit/lib/node.pxi":44
 * 
 *     def __richcmp__(Node self, other, whichop):
 *         if isinstance(other, Node):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()
 */
  }

  /* "pygambit/lib/node.pxi":52
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(11, 52, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/node.pxi":53
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/node.pxi":52
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/node.pxi":54
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(11, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/node.pxi":55
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/node.pxi":54
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/node.pxi":57
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(11, 57, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/node.pxi":43
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Node self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Node):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":59
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.node.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_4Node_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_4Node_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_4__hash__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_4Node_4__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pygambit/lib/node.pxi":60
 * 
 *     def __hash__(self):
 *         return long(<long>self.node.deref())             # <<<<<<<<<<<<<<
 * 
 *     def is_successor_of(self, node):
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 60, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyLong_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":59
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.node.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":62
 *         return long(<long>self.node.deref())
 * 
 *     def is_successor_of(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_7is_successor_of(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_7is_successor_of(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_successor_of (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_6is_successor_of(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_6is_successor_of(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameNodeRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_successor_of", 0);

  /* "pygambit/lib/node.pxi":63
 * 
 *     def is_successor_of(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_8pygambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/node.pxi":64
 *     def is_successor_of(self, node):
 *         if isinstance(node, Node):
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError, "is_successor_of takes a Node object as its input"
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 64, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3->IsSuccessorOf(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_node)->node)); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":63
 * 
 *     def is_successor_of(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 *         else:
 */
  }

  /* "pygambit/lib/node.pxi":66
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 *         else:
 *             raise TypeError, "is_successor_of takes a Node object as its input"             # <<<<<<<<<<<<<<
 * 
 *     def is_subgame_root(self):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_is_successor_of_takes_a_Node_obj, 0, 0);
    __PYX_ERR(11, 66, __pyx_L1_error)
  }

  /* "pygambit/lib/node.pxi":62
 *         return long(<long>self.node.deref())
 * 
 *     def is_successor_of(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.is_successor_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":68
 *             raise TypeError, "is_successor_of takes a Node object as its input"
 * 
 *     def is_subgame_root(self):             # <<<<<<<<<<<<<<
 *         return self.node.deref().IsSubgameRoot()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_9is_subgame_root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_9is_subgame_root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_subgame_root (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_8is_subgame_root(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_8is_subgame_root(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_subgame_root", 0);

  /* "pygambit/lib/node.pxi":69
 * 
 *     def is_subgame_root(self):
 *         return self.node.deref().IsSubgameRoot()             # <<<<<<<<<<<<<<
 * 
 *     def append_move(self, player, actions=None):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 69, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsSubgameRoot()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":68
 *             raise TypeError, "is_successor_of takes a Node object as its input"
 * 
 *     def is_subgame_root(self):             # <<<<<<<<<<<<<<
 *         return self.node.deref().IsSubgameRoot()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.is_subgame_root", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":71
 *         return self.node.deref().IsSubgameRoot()
 * 
 *     def append_move(self, player, actions=None):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         if len(self.children) > 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_11append_move(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_11append_move(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_actions = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_move (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_actions,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_actions);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "append_move") < 0)) __PYX_ERR(11, 71, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_player = values[0];
    __pyx_v_actions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("append_move", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 71, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.append_move", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_10append_move(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), __pyx_v_player, __pyx_v_actions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_10append_move(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_actions) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  GameNodeRep *__pyx_t_7;
  int __pyx_t_8;
  GameObjectPtr<GameInfosetRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_move", 0);

  /* "pygambit/lib/node.pxi":73
 *     def append_move(self, player, actions=None):
 *         cdef Infoset i
 *         if len(self.children) > 0:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(11, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "pygambit/lib/node.pxi":74
 *         cdef Infoset i
 *         if len(self.children) > 0:
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")             # <<<<<<<<<<<<<<
 *         if isinstance(player, Player):
 *             if actions is None:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_append_move_can_only_be_applied) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_append_move_can_only_be_applied);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(11, 74, __pyx_L1_error)

    /* "pygambit/lib/node.pxi":73
 *     def append_move(self, player, actions=None):
 *         cdef Infoset i
 *         if len(self.children) > 0:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):
 */
  }

  /* "pygambit/lib/node.pxi":75
 *         if len(self.children) > 0:
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_6 = (__pyx_t_3 != 0);
  if (__pyx_t_6) {

    /* "pygambit/lib/node.pxi":76
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):
 *             if actions is None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:
 */
    __pyx_t_6 = (__pyx_v_actions == Py_None);
    __pyx_t_3 = (__pyx_t_6 != 0);
    if (unlikely(__pyx_t_3)) {

      /* "pygambit/lib/node.pxi":77
 *         if isinstance(player, Player):
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")             # <<<<<<<<<<<<<<
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_append_move_with_a_Player_requir) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_append_move_with_a_Player_requir);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(11, 77, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":76
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):
 *             if actions is None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:
 */
    }

    /* "pygambit/lib/node.pxi":78
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_actions, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 78, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(11, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_3)) {

      /* "pygambit/lib/node.pxi":79
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_append_move_requires_actions_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_append_move_requires_actions_1);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(11, 79, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":78
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:
 */
    }

    /* "pygambit/lib/node.pxi":80
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(11, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_t_3)) {

      /* "pygambit/lib/node.pxi":81
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 81, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_kp_s_append_move_can_only_be_applied_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_append_move_can_only_be_applied_2);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 81, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(11, 81, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":80
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    }

    /* "pygambit/lib/node.pxi":82
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 *             return i
 */
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infoset)); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_i = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pygambit/lib/node.pxi":83
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)             # <<<<<<<<<<<<<<
 *             return i
 *         elif isinstance(player, Infoset):
 */
    try {
      __pyx_t_7 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 83, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_actions); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 83, __pyx_L1_error)
    try {
      __pyx_t_9 = __pyx_t_7->AppendMove(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_player)->player, __pyx_t_8);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(11, 83, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_9;

    /* "pygambit/lib/node.pxi":84
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 *             return i             # <<<<<<<<<<<<<<
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":75
 *         if len(self.children) > 0:
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 */
  }

  /* "pygambit/lib/node.pxi":85
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 *             return i
 *         elif isinstance(player, Infoset):             # <<<<<<<<<<<<<<
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_6 = (__pyx_t_3 != 0);
  if (__pyx_t_6) {

    /* "pygambit/lib/node.pxi":86
 *             return i
 *         elif isinstance(player, Infoset):
 *             if actions is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 */
    __pyx_t_6 = (__pyx_v_actions != Py_None);
    __pyx_t_3 = (__pyx_t_6 != 0);
    if (unlikely(__pyx_t_3)) {

      /* "pygambit/lib/node.pxi":87
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_kp_s_append_move_with_an_Infoset_cann) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_append_move_with_an_Infoset_cann);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(11, 87, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":86
 *             return i
 *         elif isinstance(player, Infoset):
 *             if actions is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 */
    }

    /* "pygambit/lib/node.pxi":88
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(11, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_t_3)) {

      /* "pygambit/lib/node.pxi":89
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_append_move_can_only_be_applied_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_append_move_can_only_be_applied_2);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(11, 89, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":88
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    }

    /* "pygambit/lib/node.pxi":90
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))
 *             return i
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_i = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pygambit/lib/node.pxi":91
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))             # <<<<<<<<<<<<<<
 *             return i
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"
 */
    try {
      __pyx_t_7 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 91, __pyx_L1_error)
    }
    try {
      __pyx_t_9 = __pyx_t_7->AppendMove(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_player)->infoset);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(11, 91, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_9;

    /* "pygambit/lib/node.pxi":92
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))
 *             return i             # <<<<<<<<<<<<<<
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":85
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 *             return i
 *         elif isinstance(player, Infoset):             # <<<<<<<<<<<<<<
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 */
  }

  /* "pygambit/lib/node.pxi":93
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))
 *             return i
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"             # <<<<<<<<<<<<<<
 * 
 *     def insert_move(self, player, actions=None):
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_append_move_accepts_either_a_Pla, 0, 0);
  __PYX_ERR(11, 93, __pyx_L1_error)

  /* "pygambit/lib/node.pxi":71
 *         return self.node.deref().IsSubgameRoot()
 * 
 *     def append_move(self, player, actions=None):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         if len(self.children) > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.append_move", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":95
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"
 * 
 *     def insert_move(self, player, actions=None):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         if isinstance(player, Player):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_13insert_move(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_13insert_move(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_actions = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert_move (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_actions,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_actions);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert_move") < 0)) __PYX_ERR(11, 95, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_player = values[0];
    __pyx_v_actions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert_move", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 95, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.insert_move", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_12insert_move(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), __pyx_v_player, __pyx_v_actions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_12insert_move(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_actions) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameNodeRep *__pyx_t_6;
  int __pyx_t_7;
  GameObjectPtr<GameInfosetRep> __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insert_move", 0);

  /* "pygambit/lib/node.pxi":97
 *     def insert_move(self, player, actions=None):
 *         cdef Infoset i
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":98
 *         cdef Infoset i
 *         if isinstance(player, Player):
 *             if actions is None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:
 */
    __pyx_t_2 = (__pyx_v_actions == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/node.pxi":99
 *         if isinstance(player, Player):
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")             # <<<<<<<<<<<<<<
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_insert_move_with_a_Player_requir) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_insert_move_with_a_Player_requir);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(11, 99, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":98
 *         cdef Infoset i
 *         if isinstance(player, Player):
 *             if actions is None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:
 */
    }

    /* "pygambit/lib/node.pxi":100
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_actions, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 100, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(11, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/node.pxi":101
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_insert_move_requires_actions_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_insert_move_requires_actions_1);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(11, 101, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":100
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:
 */
    }

    /* "pygambit/lib/node.pxi":102
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(11, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/node.pxi":103
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_s_append_move_can_only_be_applied_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_append_move_can_only_be_applied_2);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(11, 103, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":102
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    }

    /* "pygambit/lib/node.pxi":104
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 *             return i
 */
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infoset)); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_i = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pygambit/lib/node.pxi":105
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)             # <<<<<<<<<<<<<<
 *             return i
 *         elif isinstance(player, Infoset):
 */
    try {
      __pyx_t_6 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 105, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_actions); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 105, __pyx_L1_error)
    try {
      __pyx_t_8 = __pyx_t_6->InsertMove(((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_player)->player, __pyx_t_7);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(11, 105, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_8;

    /* "pygambit/lib/node.pxi":106
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 *             return i             # <<<<<<<<<<<<<<
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":97
 *     def insert_move(self, player, actions=None):
 *         cdef Infoset i
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 */
  }

  /* "pygambit/lib/node.pxi":107
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 *             return i
 *         elif isinstance(player, Infoset):             # <<<<<<<<<<<<<<
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":108
 *             return i
 *         elif isinstance(player, Infoset):
 *             if actions is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 */
    __pyx_t_2 = (__pyx_v_actions != Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/node.pxi":109
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_s_insert_move_with_an_Infoset_cann) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_insert_move_with_an_Infoset_cann);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(11, 109, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":108
 *             return i
 *         elif isinstance(player, Infoset):
 *             if actions is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 */
    }

    /* "pygambit/lib/node.pxi":110
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(11, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/node.pxi":111
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_append_move_can_only_be_applied_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_append_move_can_only_be_applied_2);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(11, 111, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":110
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    }

    /* "pygambit/lib/node.pxi":112
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))
 *             return i
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infoset)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_i = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/node.pxi":113
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))             # <<<<<<<<<<<<<<
 *             return i
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"
 */
    try {
      __pyx_t_6 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 113, __pyx_L1_error)
    }
    try {
      __pyx_t_8 = __pyx_t_6->InsertMove(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_player)->infoset);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(11, 113, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_8;

    /* "pygambit/lib/node.pxi":114
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))
 *             return i             # <<<<<<<<<<<<<<
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":107
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 *             return i
 *         elif isinstance(player, Infoset):             # <<<<<<<<<<<<<<
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 */
  }

  /* "pygambit/lib/node.pxi":115
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))
 *             return i
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"             # <<<<<<<<<<<<<<
 * 
 *     def leave_infoset(self):
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_insert_move_accepts_either_a_Pla, 0, 0);
  __PYX_ERR(11, 115, __pyx_L1_error)

  /* "pygambit/lib/node.pxi":95
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"
 * 
 *     def insert_move(self, player, actions=None):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         if isinstance(player, Player):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.insert_move", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":117
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"
 * 
 *     def leave_infoset(self):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         i = Infoset()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_15leave_infoset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_15leave_infoset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("leave_infoset (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_14leave_infoset(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_14leave_infoset(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameNodeRep *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("leave_infoset", 0);

  /* "pygambit/lib/node.pxi":119
 *     def leave_infoset(self):
 *         cdef Infoset i
 *         i = Infoset()             # <<<<<<<<<<<<<<
 *         i.infoset = self.node.deref().LeaveInfoset()
 *         return i
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/node.pxi":120
 *         cdef Infoset i
 *         i = Infoset()
 *         i.infoset = self.node.deref().LeaveInfoset()             # <<<<<<<<<<<<<<
 *         return i
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 120, __pyx_L1_error)
  }
  __pyx_v_i->infoset = __pyx_t_2->LeaveInfoset();

  /* "pygambit/lib/node.pxi":121
 *         i = Infoset()
 *         i.infoset = self.node.deref().LeaveInfoset()
 *         return i             # <<<<<<<<<<<<<<
 * 
 *     def delete_parent(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_i));
  __pyx_r = ((PyObject *)__pyx_v_i);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":117
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"
 * 
 *     def leave_infoset(self):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         i = Infoset()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.leave_infoset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":123
 *         return i
 * 
 *     def delete_parent(self):             # <<<<<<<<<<<<<<
 *         self.node.deref().DeleteParent()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_17delete_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_17delete_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_parent (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_16delete_parent(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_16delete_parent(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete_parent", 0);

  /* "pygambit/lib/node.pxi":124
 * 
 *     def delete_parent(self):
 *         self.node.deref().DeleteParent()             # <<<<<<<<<<<<<<
 * 
 *     def delete_tree(self):
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 124, __pyx_L1_error)
  }
  __pyx_t_1->DeleteParent();

  /* "pygambit/lib/node.pxi":123
 *         return i
 * 
 *     def delete_parent(self):             # <<<<<<<<<<<<<<
 *         self.node.deref().DeleteParent()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.delete_parent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":126
 *         self.node.deref().DeleteParent()
 * 
 *     def delete_tree(self):             # <<<<<<<<<<<<<<
 *         self.node.deref().DeleteTree()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_19delete_tree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_19delete_tree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_18delete_tree(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_18delete_tree(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("delete_tree", 0);

  /* "pygambit/lib/node.pxi":127
 * 
 *     def delete_tree(self):
 *         self.node.deref().DeleteTree()             # <<<<<<<<<<<<<<
 * 
 *     def copy_tree(self, node):
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 127, __pyx_L1_error)
  }
  __pyx_t_1->DeleteTree();

  /* "pygambit/lib/node.pxi":126
 *         self.node.deref().DeleteParent()
 * 
 *     def delete_tree(self):             # <<<<<<<<<<<<<<
 *         self.node.deref().DeleteTree()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.delete_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":129
 *         self.node.deref().DeleteTree()
 * 
 *     def copy_tree(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_21copy_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_21copy_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_20copy_tree(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_20copy_tree(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameNodeRep *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_tree", 0);

  /* "pygambit/lib/node.pxi":130
 * 
 *     def copy_tree(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_8pygambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/node.pxi":131
 *     def copy_tree(self, node):
 *         if isinstance(node, Node):
 *             if node.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(11, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_t_2)) {

      /* "pygambit/lib/node.pxi":132
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \             # <<<<<<<<<<<<<<
 *                                     objects of the same game")
 *             self.node.deref().CopyTree((<Node>node).node)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_s_copy_tree_can_only_be_applied_be) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_copy_tree_can_only_be_applied_be);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(11, 132, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":131
 *     def copy_tree(self, node):
 *         if isinstance(node, Node):
 *             if node.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 */
    }

    /* "pygambit/lib/node.pxi":134
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 *             self.node.deref().CopyTree((<Node>node).node)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("copy_tree takes a Node object as its input")
 */
    try {
      __pyx_t_6 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 134, __pyx_L1_error)
    }
    try {
      __pyx_t_6->CopyTree(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_node)->node);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(11, 134, __pyx_L1_error)
    }

    /* "pygambit/lib/node.pxi":130
 * 
 *     def copy_tree(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/node.pxi":136
 *             self.node.deref().CopyTree((<Node>node).node)
 *         else:
 *             raise TypeError("copy_tree takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     def move_tree(self, node):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(11, 136, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/node.pxi":129
 *         self.node.deref().DeleteTree()
 * 
 *     def copy_tree(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.copy_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":138
 *             raise TypeError("copy_tree takes a Node object as its input")
 * 
 *     def move_tree(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_23move_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_23move_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("move_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_22move_tree(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_22move_tree(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameNodeRep *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("move_tree", 0);

  /* "pygambit/lib/node.pxi":139
 * 
 *     def move_tree(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_8pygambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/node.pxi":140
 *     def move_tree(self, node):
 *         if isinstance(node, Node):
 *             if node.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(11, 140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_t_2)) {

      /* "pygambit/lib/node.pxi":141
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \             # <<<<<<<<<<<<<<
 *                                     objects of the same game")
 *             self.node.deref().MoveTree((<Node>node).node)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_s_copy_tree_can_only_be_applied_be) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_copy_tree_can_only_be_applied_be);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(11, 141, __pyx_L1_error)

      /* "pygambit/lib/node.pxi":140
 *     def move_tree(self, node):
 *         if isinstance(node, Node):
 *             if node.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 */
    }

    /* "pygambit/lib/node.pxi":143
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 *             self.node.deref().MoveTree((<Node>node).node)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("move_tree takes a Node object as its input")
 */
    try {
      __pyx_t_6 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 143, __pyx_L1_error)
    }
    try {
      __pyx_t_6->MoveTree(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_node)->node);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(11, 143, __pyx_L1_error)
    }

    /* "pygambit/lib/node.pxi":139
 * 
 *     def move_tree(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/node.pxi":145
 *             self.node.deref().MoveTree((<Node>node).node)
 *         else:
 *             raise TypeError("move_tree takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(11, 145, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/node.pxi":138
 *             raise TypeError("copy_tree takes a Node object as its input")
 * 
 *     def move_tree(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.move_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":148
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.node.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_5label___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_5label___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":149
 *     property label:
 *         def __get__(self):
 *             return self.node.deref().GetLabel().decode('ascii')             # <<<<<<<<<<<<<<
 *         def __set__(self, str value):
 *             self.node.deref().SetLabel(value.encode('ascii'))
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 149, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1->GetLabel(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":148
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.node.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":150
 *         def __get__(self):
 *             return self.node.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             self.node.deref().SetLabel(value.encode('ascii'))
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_4Node_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_4Node_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(11, 150, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_5label_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_4Node_5label_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/node.pxi":151
 *             return self.node.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):
 *             self.node.deref().SetLabel(value.encode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     property children:
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 151, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_value, __pyx_n_s_ascii); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1->SetLabel(__pyx_t_3);

  /* "pygambit/lib/node.pxi":150
 *         def __get__(self):
 *             return self.node.deref().GetLabel().decode('ascii')
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             self.node.deref().SetLabel(value.encode('ascii'))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":154
 * 
 *     property children:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Children c
 *             c = Children()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_8children_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_8children_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_8children___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_8children___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Children *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameNodeRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":156
 *         def __get__(self):
 *             cdef Children c
 *             c = Children()             # <<<<<<<<<<<<<<
 *             c.parent = self.node
 *             return c
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Children)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Children *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/node.pxi":157
 *             cdef Children c
 *             c = Children()
 *             c.parent = self.node             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
  __pyx_t_2 = __pyx_v_self->node;
  __pyx_v_c->parent = __pyx_t_2;

  /* "pygambit/lib/node.pxi":158
 *             c = Children()
 *             c.parent = self.node
 *             return c             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":154
 * 
 *     property children:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Children c
 *             c = Children()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.children.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":161
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameNodeRep *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":163
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.node.deref().GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/node.pxi":164
 *             cdef Game g
 *             g = Game()
 *             g.game = self.node.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 164, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "pygambit/lib/node.pxi":165
 *             g = Game()
 *             g.game = self.node.deref().GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property infoset:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":161
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":168
 * 
 *     property infoset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_7infoset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_7infoset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_7infoset___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_7infoset___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":170
 *         def __get__(self):
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:             # <<<<<<<<<<<<<<
 *                 i = Infoset()
 *                 i.infoset = self.node.deref().GetInfoset()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 170, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetInfoset() != ((GameObjectPtr<GameInfosetRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":171
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:
 *                 i = Infoset()             # <<<<<<<<<<<<<<
 *                 i.infoset = self.node.deref().GetInfoset()
 *                 return i
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infoset)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_i = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/node.pxi":172
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:
 *                 i = Infoset()
 *                 i.infoset = self.node.deref().GetInfoset()             # <<<<<<<<<<<<<<
 *                 return i
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 172, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_1->GetInfoset();

    /* "pygambit/lib/node.pxi":173
 *                 i = Infoset()
 *                 i.infoset = self.node.deref().GetInfoset()
 *                 return i             # <<<<<<<<<<<<<<
 *             return None
 *         def __set__(self, infoset):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":170
 *         def __get__(self):
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:             # <<<<<<<<<<<<<<
 *                 i = Infoset()
 *                 i.infoset = self.node.deref().GetInfoset()
 */
  }

  /* "pygambit/lib/node.pxi":174
 *                 i.infoset = self.node.deref().GetInfoset()
 *                 return i
 *             return None             # <<<<<<<<<<<<<<
 *         def __set__(self, infoset):
 *             if isinstance(infoset, Infoset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":168
 * 
 *     property infoset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.infoset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":175
 *                 return i
 *             return None
 *         def __set__(self, infoset):             # <<<<<<<<<<<<<<
 *             if isinstance(infoset, Infoset):
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_4Node_7infoset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_4Node_7infoset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_7infoset_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_infoset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_4Node_7infoset_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameNodeRep *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/node.pxi":176
 *             return None
 *         def __set__(self, infoset):
 *             if isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 *             else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/node.pxi":177
 *         def __set__(self, infoset):
 *             if isinstance(infoset, Infoset):
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError, "type Infoset required for setting infoset at a node"
 */
    try {
      __pyx_t_3 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 177, __pyx_L1_error)
    }
    try {
      __pyx_t_3->SetInfoset(((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_infoset)->infoset);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_ValueError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(11, 177, __pyx_L1_error)
    }

    /* "pygambit/lib/node.pxi":176
 *             return None
 *         def __set__(self, infoset):
 *             if isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 *             else:
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/node.pxi":179
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 *             else:
 *                 raise TypeError, "type Infoset required for setting infoset at a node"             # <<<<<<<<<<<<<<
 * 
 *     property player:
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_type_Infoset_required_for_settin, 0, 0);
    __PYX_ERR(11, 179, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/node.pxi":175
 *                 return i
 *             return None
 *         def __set__(self, infoset):             # <<<<<<<<<<<<<<
 *             if isinstance(infoset, Infoset):
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.infoset.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":182
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_6player_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_6player_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_6player___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_6player___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":184
 *         def __get__(self):
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:             # <<<<<<<<<<<<<<
 *                 p = Player()
 *                 p.player = self.node.deref().GetPlayer()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 184, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetPlayer() != ((GameObjectPtr<GamePlayerRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":185
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:
 *                 p = Player()             # <<<<<<<<<<<<<<
 *                 p.player = self.node.deref().GetPlayer()
 *                 return p
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Player)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/node.pxi":186
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:
 *                 p = Player()
 *                 p.player = self.node.deref().GetPlayer()             # <<<<<<<<<<<<<<
 *                 return p
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 186, __pyx_L1_error)
    }
    __pyx_v_p->player = __pyx_t_1->GetPlayer();

    /* "pygambit/lib/node.pxi":187
 *                 p = Player()
 *                 p.player = self.node.deref().GetPlayer()
 *                 return p             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_p));
    __pyx_r = ((PyObject *)__pyx_v_p);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":184
 *         def __get__(self):
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:             # <<<<<<<<<<<<<<
 *                 p = Player()
 *                 p.player = self.node.deref().GetPlayer()
 */
  }

  /* "pygambit/lib/node.pxi":188
 *                 p.player = self.node.deref().GetPlayer()
 *                 return p
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property parent:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":182
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.player.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":191
 * 
 *     property parent:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_6parent___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_6parent___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":193
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetParent()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 193, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetParent() != ((GameObjectPtr<GameNodeRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":194
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:
 *                 n = Node()             # <<<<<<<<<<<<<<
 *                 n.node = self.node.deref().GetParent()
 *                 return n
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Node)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_n = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/node.pxi":195
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:
 *                 n = Node()
 *                 n.node = self.node.deref().GetParent()             # <<<<<<<<<<<<<<
 *                 return n
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 195, __pyx_L1_error)
    }
    __pyx_v_n->node = __pyx_t_1->GetParent();

    /* "pygambit/lib/node.pxi":196
 *                 n = Node()
 *                 n.node = self.node.deref().GetParent()
 *                 return n             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":193
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetParent()
 */
  }

  /* "pygambit/lib/node.pxi":197
 *                 n.node = self.node.deref().GetParent()
 *                 return n
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property prior_action:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":191
 * 
 *     property parent:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.parent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":200
 * 
 *     property prior_action:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_12prior_action_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_12prior_action_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_12prior_action___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_12prior_action___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":202
 *         def __get__(self):
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:             # <<<<<<<<<<<<<<
 *                 a = Action()
 *                 a.action = self.node.deref().GetPriorAction()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 202, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetPriorAction() != ((GameObjectPtr<GameActionRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":203
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:
 *                 a = Action()             # <<<<<<<<<<<<<<
 *                 a.action = self.node.deref().GetPriorAction()
 *                 return a
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Action)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_a = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/node.pxi":204
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:
 *                 a = Action()
 *                 a.action = self.node.deref().GetPriorAction()             # <<<<<<<<<<<<<<
 *                 return a
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 204, __pyx_L1_error)
    }
    __pyx_v_a->action = __pyx_t_1->GetPriorAction();

    /* "pygambit/lib/node.pxi":205
 *                 a = Action()
 *                 a.action = self.node.deref().GetPriorAction()
 *                 return a             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_a));
    __pyx_r = ((PyObject *)__pyx_v_a);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":202
 *         def __get__(self):
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:             # <<<<<<<<<<<<<<
 *                 a = Action()
 *                 a.action = self.node.deref().GetPriorAction()
 */
  }

  /* "pygambit/lib/node.pxi":206
 *                 a.action = self.node.deref().GetPriorAction()
 *                 return a
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property prior_sibling:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":200
 * 
 *     property prior_action:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.prior_action.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":209
 * 
 *     property prior_sibling:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_13prior_sibling_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_13prior_sibling_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_13prior_sibling___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_13prior_sibling___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":211
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetPriorSibling()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 211, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetPriorSibling() != ((GameObjectPtr<GameNodeRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":212
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:
 *                 n = Node()             # <<<<<<<<<<<<<<
 *                 n.node = self.node.deref().GetPriorSibling()
 *                 return n
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Node)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_n = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/node.pxi":213
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:
 *                 n = Node()
 *                 n.node = self.node.deref().GetPriorSibling()             # <<<<<<<<<<<<<<
 *                 return n
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 213, __pyx_L1_error)
    }
    __pyx_v_n->node = __pyx_t_1->GetPriorSibling();

    /* "pygambit/lib/node.pxi":214
 *                 n = Node()
 *                 n.node = self.node.deref().GetPriorSibling()
 *                 return n             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":211
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetPriorSibling()
 */
  }

  /* "pygambit/lib/node.pxi":215
 *                 n.node = self.node.deref().GetPriorSibling()
 *                 return n
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property next_sibling:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":209
 * 
 *     property prior_sibling:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.prior_sibling.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":218
 * 
 *     property next_sibling:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_12next_sibling_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_12next_sibling_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_12next_sibling___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_12next_sibling___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":220
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetNextSibling()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 220, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetNextSibling() != ((GameObjectPtr<GameNodeRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":221
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:
 *                 n = Node()             # <<<<<<<<<<<<<<
 *                 n.node = self.node.deref().GetNextSibling()
 *                 return n
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Node)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_n = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/node.pxi":222
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:
 *                 n = Node()
 *                 n.node = self.node.deref().GetNextSibling()             # <<<<<<<<<<<<<<
 *                 return n
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 222, __pyx_L1_error)
    }
    __pyx_v_n->node = __pyx_t_1->GetNextSibling();

    /* "pygambit/lib/node.pxi":223
 *                 n = Node()
 *                 n.node = self.node.deref().GetNextSibling()
 *                 return n             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":220
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetNextSibling()
 */
  }

  /* "pygambit/lib/node.pxi":224
 *                 n.node = self.node.deref().GetNextSibling()
 *                 return n
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property is_terminal:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":218
 * 
 *     property next_sibling:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.next_sibling.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":227
 * 
 *     property is_terminal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.node.deref().IsTerminal()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_11is_terminal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_11is_terminal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_11is_terminal___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_11is_terminal___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":228
 *     property is_terminal:
 *         def __get__(self):
 *             return self.node.deref().IsTerminal()             # <<<<<<<<<<<<<<
 * 
 *     property outcome:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 228, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsTerminal()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":227
 * 
 *     property is_terminal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.node.deref().IsTerminal()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.is_terminal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":231
 * 
 *     property outcome:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_7outcome_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_7outcome_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_7outcome___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_7outcome___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/node.pxi":233
 *         def __get__(self):
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:             # <<<<<<<<<<<<<<
 *                 o = Outcome()
 *                 o.outcome = self.node.deref().GetOutcome()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 233, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetOutcome() != ((GameObjectPtr<GameOutcomeRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":234
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:
 *                 o = Outcome()             # <<<<<<<<<<<<<<
 *                 o.outcome = self.node.deref().GetOutcome()
 *                 return o
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Outcome)); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_o = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/node.pxi":235
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:
 *                 o = Outcome()
 *                 o.outcome = self.node.deref().GetOutcome()             # <<<<<<<<<<<<<<
 *                 return o
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 235, __pyx_L1_error)
    }
    __pyx_v_o->outcome = __pyx_t_1->GetOutcome();

    /* "pygambit/lib/node.pxi":236
 *                 o = Outcome()
 *                 o.outcome = self.node.deref().GetOutcome()
 *                 return o             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_o));
    __pyx_r = ((PyObject *)__pyx_v_o);
    goto __pyx_L0;

    /* "pygambit/lib/node.pxi":233
 *         def __get__(self):
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:             # <<<<<<<<<<<<<<
 *                 o = Outcome()
 *                 o.outcome = self.node.deref().GetOutcome()
 */
  }

  /* "pygambit/lib/node.pxi":237
 *                 o.outcome = self.node.deref().GetOutcome()
 *                 return o
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, outcome):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pygambit/lib/node.pxi":231
 * 
 *     property outcome:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.outcome.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/node.pxi":239
 *             return None
 * 
 *         def __set__(self, outcome):             # <<<<<<<<<<<<<<
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_4Node_7outcome_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_outcome); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_4Node_7outcome_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_outcome) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_7outcome_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_outcome));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_4Node_7outcome_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_outcome) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameNodeRep *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/node.pxi":240
 * 
 *         def __set__(self, outcome):
 *             if outcome is None:             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):
 */
  __pyx_t_1 = (__pyx_v_outcome == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/node.pxi":241
 *         def __set__(self, outcome):
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)             # <<<<<<<<<<<<<<
 *             elif isinstance(outcome, Outcome):
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)
 */
    try {
      __pyx_t_3 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 241, __pyx_L1_error)
    }
    __pyx_t_3->SetOutcome(((GameObjectPtr<GameOutcomeRep>)NULL));

    /* "pygambit/lib/node.pxi":240
 * 
 *         def __set__(self, outcome):
 *             if outcome is None:             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/node.pxi":242
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)
 *             else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_outcome, __pyx_ptype_8pygambit_3lib_9libgambit_Outcome); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "pygambit/lib/node.pxi":243
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError, "type Outcome required for setting outcome at a node"
 */
    try {
      __pyx_t_3 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(11, 243, __pyx_L1_error)
    }
    __pyx_t_3->SetOutcome(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_v_outcome)->outcome);

    /* "pygambit/lib/node.pxi":242
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)
 *             else:
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/node.pxi":245
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)
 *             else:
 *                 raise TypeError, "type Outcome required for setting outcome at a node"             # <<<<<<<<<<<<<<
 * 
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_type_Outcome_required_for_settin, 0, 0);
    __PYX_ERR(11, 245, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/node.pxi":239
 *             return None
 * 
 *         def __set__(self, outcome):             # <<<<<<<<<<<<<<
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.outcome.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_24__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Node_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Node_26__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Node_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Node.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8BaseGame_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8BaseGame_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8BaseGame___reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8BaseGame___reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_BaseGame); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseGame__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_BaseGame); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.BaseGame.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseGame__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8BaseGame_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8BaseGame_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8BaseGame_2__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8BaseGame_2__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseGame__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_BaseGame__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseGame, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseGame__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.BaseGame.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":34
 *     cdef c_StrategySupportProfile *support
 * 
 *     def __init__(self, strategies, Game game not None):             # <<<<<<<<<<<<<<
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strategies = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategies,&__pyx_n_s_game,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategies)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_game)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(2, 34, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 34, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_strategies = values[0];
    __pyx_v_game = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 34, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 0, "game", 0))) __PYX_ERR(2, 34, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile___init__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), __pyx_v_strategies, __pyx_v_game);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategies, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_temp_restriction = NULL;
  PyObject *__pyx_v_strategy = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pygambit/lib/stratspt.pxi":35
 * 
 *     def __init__(self, strategies, Game game not None):
 *        self.support = (<c_StrategySupportProfile *>0)             # <<<<<<<<<<<<<<
 *        if self.is_valid(strategies, len(game.players)):
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 */
  __pyx_v_self->support = ((StrategySupportProfile *)0);

  /* "pygambit/lib/stratspt.pxi":36
 *     def __init__(self, strategies, Game game not None):
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):             # <<<<<<<<<<<<<<
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_valid); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_game), __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_strategies, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 36, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_strategies, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 36, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_strategies);
    __Pyx_GIVEREF(__pyx_v_strategies);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_strategies);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(2, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_8)) {

    /* "pygambit/lib/stratspt.pxi":37
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()             # <<<<<<<<<<<<<<
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_game), __pyx_n_s_mixed_strategy_profile); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_restriction); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_temp_restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "pygambit/lib/stratspt.pxi":38
 *        if self.is_valid(strategies, len(game.players)):
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))             # <<<<<<<<<<<<<<
 *             for strategy in game.strategies:
 *                 if strategy not in strategies:
 */
    __pyx_v_self->support = new StrategySupportProfile((*__pyx_v_temp_restriction->support));

    /* "pygambit/lib/stratspt.pxi":39
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:             # <<<<<<<<<<<<<<
 *                 if strategy not in strategies:
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_game), __pyx_n_s_strategies); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_1 = __pyx_t_7; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 39, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 39, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 39, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 39, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 39, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_9(__pyx_t_1);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 39, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_strategy, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "pygambit/lib/stratspt.pxi":40
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:
 *                 if strategy not in strategies:             # <<<<<<<<<<<<<<
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 *        else:
 */
      __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_strategy, __pyx_v_strategies, Py_NE)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(2, 40, __pyx_L1_error)
      __pyx_t_10 = (__pyx_t_8 != 0);
      if (__pyx_t_10) {

        /* "pygambit/lib/stratspt.pxi":41
 *             for strategy in game.strategies:
 *                 if strategy not in strategies:
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)             # <<<<<<<<<<<<<<
 *        else:
 *             raise ValueError("invalid set of strategies")
 */
        (void)(__pyx_v_self->support->RemoveStrategy(((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_strategy)->strategy));

        /* "pygambit/lib/stratspt.pxi":40
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:
 *                 if strategy not in strategies:             # <<<<<<<<<<<<<<
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 *        else:
 */
      }

      /* "pygambit/lib/stratspt.pxi":39
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:             # <<<<<<<<<<<<<<
 *                 if strategy not in strategies:
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pygambit/lib/stratspt.pxi":36
 *     def __init__(self, strategies, Game game not None):
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):             # <<<<<<<<<<<<<<
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/stratspt.pxi":43
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 *        else:
 *             raise ValueError("invalid set of strategies")             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 43, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/stratspt.pxi":34
 *     cdef c_StrategySupportProfile *support
 * 
 *     def __init__(self, strategies, Game game not None):             # <<<<<<<<<<<<<<
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_temp_restriction);
  __Pyx_XDECREF(__pyx_v_strategy);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":44
 *        else:
 *             raise ValueError("invalid set of strategies")
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/stratspt.pxi":45
 *             raise ValueError("invalid set of strategies")
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):             # <<<<<<<<<<<<<<
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()
 */
  __pyx_t_1 = ((__pyx_v_self->support != ((StrategySupportProfile *)0)) != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/stratspt.pxi":46
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support             # <<<<<<<<<<<<<<
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 */
    delete __pyx_v_self->support;

    /* "pygambit/lib/stratspt.pxi":45
 *             raise ValueError("invalid set of strategies")
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):             # <<<<<<<<<<<<<<
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()
 */
  }

  /* "pygambit/lib/stratspt.pxi":44
 *        else:
 *             raise ValueError("invalid set of strategies")
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/stratspt.pxi":47
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()             # <<<<<<<<<<<<<<
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_4__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_4__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);
  __pyx_r = __pyx_v_self->support->MixedProfileLength();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":48
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(2, 48, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_6__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_6__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/stratspt.pxi":49
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             if whichop == 1:
 *                 return self.issubset(other)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/stratspt.pxi":50
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:             # <<<<<<<<<<<<<<
 *                 return self.issubset(other)
 *             elif whichop == 2:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 50, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/stratspt.pxi":51
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:
 *                 return self.issubset(other)             # <<<<<<<<<<<<<<
 *             elif whichop == 2:
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_issubset); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_other) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":50
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:             # <<<<<<<<<<<<<<
 *                 return self.issubset(other)
 *             elif whichop == 2:
 */
    }

    /* "pygambit/lib/stratspt.pxi":52
 *             if whichop == 1:
 *                 return self.issubset(other)
 *             elif whichop == 2:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 52, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/stratspt.pxi":53
 *                 return self.issubset(other)
 *             elif whichop == 2:
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_self->support) == (*((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other)->support))); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":52
 *             if whichop == 1:
 *                 return self.issubset(other)
 *             elif whichop == 2:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/stratspt.pxi":54
 *             elif whichop == 2:
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/stratspt.pxi":55
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)             # <<<<<<<<<<<<<<
 *             elif whichop == 5:
 *                 return self.issuperset(other)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_self->support) != (*((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other)->support))); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 55, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":54
 *             elif whichop == 2:
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:
 */
    }

    /* "pygambit/lib/stratspt.pxi":56
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:             # <<<<<<<<<<<<<<
 *                 return self.issuperset(other)
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_5, 5, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 56, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/stratspt.pxi":57
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:
 *                 return self.issuperset(other)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_issuperset); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 57, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_other) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 57, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":56
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:             # <<<<<<<<<<<<<<
 *                 return self.issuperset(other)
 *             else:
 */
    }

    /* "pygambit/lib/stratspt.pxi":59
 *                 return self.issuperset(other)
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(2, 59, __pyx_L1_error)
    }

    /* "pygambit/lib/stratspt.pxi":49
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             if whichop == 1:
 *                 return self.issubset(other)
 */
  }

  /* "pygambit/lib/stratspt.pxi":61
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/stratspt.pxi":62
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":61
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/stratspt.pxi":63
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 63, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/stratspt.pxi":64
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":63
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/stratspt.pxi":66
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(2, 66, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/stratspt.pxi":48
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":67
 *             else:
 *                 raise NotImplementedError
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_8__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((PyObject *)__pyx_v_strat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_8__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strat) {
  Array<int>  __pyx_v_num_strategies;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  GameObjectPtr<GameStrategyRep> __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_strat);

  /* "pygambit/lib/stratspt.pxi":68
 *                 raise NotImplementedError
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Array[int] num_strategies
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_strat); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/stratspt.pxi":69
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)             # <<<<<<<<<<<<<<
 *         cdef Array[int] num_strategies
 *         cdef Strategy s
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_strat};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 69, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_strat};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 69, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_strat);
      __Pyx_GIVEREF(__pyx_v_strat);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_strat);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/stratspt.pxi":68
 *                 raise NotImplementedError
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Array[int] num_strategies
 */
  }

  /* "pygambit/lib/stratspt.pxi":72
 *         cdef Array[int] num_strategies
 *         cdef Strategy s
 *         num_strategies = self.support.NumStrategies()             # <<<<<<<<<<<<<<
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:
 */
  __pyx_v_num_strategies = __pyx_v_self->support->NumStrategies();

  /* "pygambit/lib/stratspt.pxi":73
 *         cdef Strategy s
 *         num_strategies = self.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):             # <<<<<<<<<<<<<<
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 */
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_num_strategies.Length() + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 73, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(2, 73, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(2, 73, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 73, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/stratspt.pxi":74
 *         num_strategies = self.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:             # <<<<<<<<<<<<<<
 *                 s = Strategy()
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 74, __pyx_L1_error)
    try {
      __pyx_t_10 = __pyx_v_num_strategies.operator[](__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(2, 74, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Subtract(__pyx_v_strat, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_7, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/stratspt.pxi":75
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()             # <<<<<<<<<<<<<<
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restrict()
 */
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Strategy)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pygambit/lib/stratspt.pxi":76
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 *                 s.strategy = self.support.GetStrategy(i, strat+1)             # <<<<<<<<<<<<<<
 *                 s.restriction = self.restrict()
 *                 return s
 */
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 76, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_strat, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 76, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_t_11 = __pyx_v_self->support->GetStrategy(__pyx_t_10, __pyx_t_6);
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
        __PYX_ERR(2, 76, __pyx_L1_error)
      }
      __pyx_v_s->strategy = __pyx_t_11;

      /* "pygambit/lib/stratspt.pxi":77
 *                 s = Strategy()
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restrict()             # <<<<<<<<<<<<<<
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_restrict); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction))))) __PYX_ERR(2, 77, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_s->restriction);
      __Pyx_DECREF(((PyObject *)__pyx_v_s->restriction));
      __pyx_v_s->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pygambit/lib/stratspt.pxi":78
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restrict()
 *                 return s             # <<<<<<<<<<<<<<
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_s));
      __pyx_r = ((PyObject *)__pyx_v_s);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":74
 *         num_strategies = self.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:             # <<<<<<<<<<<<<<
 *                 s = Strategy()
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 */
    }

    /* "pygambit/lib/stratspt.pxi":79
 *                 s.restriction = self.restrict()
 *                 return s
 *             strat = strat - num_strategies.getitem(i)             # <<<<<<<<<<<<<<
 *         raise IndexError("Index out of range")
 *     # Set-like methods
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 79, __pyx_L1_error)
    try {
      __pyx_t_10 = __pyx_v_num_strategies.operator[](__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(2, 79, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Subtract(__pyx_v_strat, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_strat, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pygambit/lib/stratspt.pxi":73
 *         cdef Strategy s
 *         num_strategies = self.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):             # <<<<<<<<<<<<<<
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygambit/lib/stratspt.pxi":80
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 *     # Set-like methods
 *     def __and__(self, other):
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(2, 80, __pyx_L1_error)

  /* "pygambit/lib/stratspt.pxi":67
 *             else:
 *                 raise NotImplementedError
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_strat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":82
 *         raise IndexError("Index out of range")
 *     # Set-like methods
 *     def __and__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.intersection(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_11__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_11__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_10__and__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_10__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__and__", 0);

  /* "pygambit/lib/stratspt.pxi":83
 *     # Set-like methods
 *     def __and__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.intersection(other)
 *         raise NotImplementedError
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/stratspt.pxi":84
 *     def __and__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 *             return self.intersection(other)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 *     def __or__(self, other):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_intersection); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_other) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/stratspt.pxi":83
 *     # Set-like methods
 *     def __and__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.intersection(other)
 *         raise NotImplementedError
 */
  }

  /* "pygambit/lib/stratspt.pxi":85
 *         if isinstance(other, StrategySupportProfile):
 *             return self.intersection(other)
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     def __or__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(2, 85, __pyx_L1_error)

  /* "pygambit/lib/stratspt.pxi":82
 *         raise IndexError("Index out of range")
 *     # Set-like methods
 *     def __and__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.intersection(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":86
 *             return self.intersection(other)
 *         raise NotImplementedError
 *     def __or__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.union(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_13__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_13__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_12__or__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_12__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__or__", 0);

  /* "pygambit/lib/stratspt.pxi":87
 *         raise NotImplementedError
 *     def __or__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.union(other)
 *         raise NotImplementedError
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/stratspt.pxi":88
 *     def __or__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 *             return self.union(other)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 *     def __sub__(self, other):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_union); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_other) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/stratspt.pxi":87
 *         raise NotImplementedError
 *     def __or__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.union(other)
 *         raise NotImplementedError
 */
  }

  /* "pygambit/lib/stratspt.pxi":89
 *         if isinstance(other, StrategySupportProfile):
 *             return self.union(other)
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     def __sub__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(2, 89, __pyx_L1_error)

  /* "pygambit/lib/stratspt.pxi":86
 *             return self.intersection(other)
 *         raise NotImplementedError
 *     def __or__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.union(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":90
 *             return self.union(other)
 *         raise NotImplementedError
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.difference(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_15__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_15__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_14__sub__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_14__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "pygambit/lib/stratspt.pxi":91
 *         raise NotImplementedError
 *     def __sub__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.difference(other)
 *         raise NotImplementedError
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/stratspt.pxi":92
 *     def __sub__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 *             return self.difference(other)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_difference); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_other) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/stratspt.pxi":91
 *         raise NotImplementedError
 *     def __sub__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.difference(other)
 *         raise NotImplementedError
 */
  }

  /* "pygambit/lib/stratspt.pxi":93
 *         if isinstance(other, StrategySupportProfile):
 *             return self.difference(other)
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def remove(self, strategy):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(2, 93, __pyx_L1_error)

  /* "pygambit/lib/stratspt.pxi":90
 *             return self.union(other)
 *         raise NotImplementedError
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.difference(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":95
 *         raise NotImplementedError
 * 
 *     def remove(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, Strategy):
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_17remove(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_17remove(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_16remove(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((PyObject *)__pyx_v_strategy));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":97
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:             # <<<<<<<<<<<<<<
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda = {"lambda", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *__pyx_cur_scope;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_strategy)) { __Pyx_RaiseClosureNameError("strategy"); __PYX_ERR(2, 97, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_strategy, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.remove.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":95
 *         raise NotImplementedError
 * 
 *     def remove(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, Strategy):
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_16remove(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategy) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *__pyx_cur_scope;
  PyObject *__pyx_v_strategies = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct__remove(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct__remove, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(2, 95, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_strategy = __pyx_v_strategy;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_strategy);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_strategy);

  /* "pygambit/lib/stratspt.pxi":96
 * 
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):             # <<<<<<<<<<<<<<
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:
 *                 strategies = list(self)[:]
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_strategy;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_Strategy); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pygambit/lib/stratspt.pxi":97
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:             # <<<<<<<<<<<<<<
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)
 */
    __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda, 0, __pyx_n_s_remove_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_self));
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = PyList_GET_SIZE(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 97, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = ((__pyx_t_5 > 1) != 0);
    if (likely(__pyx_t_3)) {

      /* "pygambit/lib/stratspt.pxi":98
 *         if isinstance(strategy, Strategy):
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:
 *                 strategies = list(self)[:]             # <<<<<<<<<<<<<<
 *                 strategies.remove(strategy)
 *                 return StrategySupportProfile(strategies, self.game)
 */
      __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_t_4, 0, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_strategies = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "pygambit/lib/stratspt.pxi":99
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)             # <<<<<<<<<<<<<<
 *                 return StrategySupportProfile(strategies, self.game)
 *             else:
 */
      __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyList_Type_remove, __pyx_v_strategies, __pyx_cur_scope->__pyx_v_strategy); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pygambit/lib/stratspt.pxi":100
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)
 *                 return StrategySupportProfile(strategies, self.game)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise UndefinedOperationError("cannot remove last strategy"\
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_strategies);
      __Pyx_GIVEREF(__pyx_v_strategies);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_strategies);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":97
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:             # <<<<<<<<<<<<<<
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)
 */
    }

    /* "pygambit/lib/stratspt.pxi":102
 *                 return StrategySupportProfile(strategies, self.game)
 *             else:
 *                 raise UndefinedOperationError("cannot remove last strategy"\             # <<<<<<<<<<<<<<
 *                                               " of a player")
 *         raise TypeError("delete requires a Strategy object")
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_kp_s_cannot_remove_last_strategy_of_a) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_cannot_remove_last_strategy_of_a);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(2, 102, __pyx_L1_error)
    }

    /* "pygambit/lib/stratspt.pxi":96
 * 
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):             # <<<<<<<<<<<<<<
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:
 *                 strategies = list(self)[:]
 */
  }

  /* "pygambit/lib/stratspt.pxi":104
 *                 raise UndefinedOperationError("cannot remove last strategy"\
 *                                               " of a player")
 *         raise TypeError("delete requires a Strategy object")             # <<<<<<<<<<<<<<
 * 
 *     def difference(self, StrategySupportProfile other):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 104, __pyx_L1_error)

  /* "pygambit/lib/stratspt.pxi":95
 *         raise NotImplementedError
 * 
 *     def remove(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, Strategy):
 *             if len(list(filter(lambda x: x.player == strategy.player, self))) > 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strategies);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":106
 *         raise TypeError("delete requires a Strategy object")
 * 
 *     def difference(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_19difference(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_19difference(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("difference (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(2, 106, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_18difference(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":107
 * 
 *     def difference(self, StrategySupportProfile other):
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def intersection(self, StrategySupportProfile other):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1 = {"lambda1", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *__pyx_cur_scope;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_other)) { __Pyx_RaiseClosureNameError("other"); __PYX_ERR(2, 107, __pyx_L1_error) }
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_x, ((PyObject *)__pyx_cur_scope->__pyx_v_other), Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 107, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.difference.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":106
 *         raise TypeError("delete requires a Strategy object")
 * 
 *     def difference(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)
 * 
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_18difference(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("difference", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(2, 106, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_other = __pyx_v_other;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_other);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_other);

  /* "pygambit/lib/stratspt.pxi":107
 * 
 *     def difference(self, StrategySupportProfile other):
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def intersection(self, StrategySupportProfile other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1, 0, __pyx_n_s_difference_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":106
 *         raise TypeError("delete requires a Strategy object")
 * 
 *     def difference(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.difference", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":109
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)
 * 
 *     def intersection(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(filter(lambda x: x in other, self)), self.game)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_21intersection(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_21intersection(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersection (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(2, 109, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_20intersection(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":110
 * 
 *     def intersection(self, StrategySupportProfile other):
 *         return StrategySupportProfile(list(filter(lambda x: x in other, self)), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def is_valid(self, strategies, num_players):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2 = {"lambda2", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda2(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *__pyx_cur_scope;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda2", 0);
  __pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_other)) { __Pyx_RaiseClosureNameError("other"); __PYX_ERR(2, 110, __pyx_L1_error) }
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_x, ((PyObject *)__pyx_cur_scope->__pyx_v_other), Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 110, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.intersection.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":109
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)
 * 
 *     def intersection(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(filter(lambda x: x in other, self)), self.game)
 * 
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_20intersection(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersection", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(2, 109, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_other = __pyx_v_other;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_other);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_other);

  /* "pygambit/lib/stratspt.pxi":110
 * 
 *     def intersection(self, StrategySupportProfile other):
 *         return StrategySupportProfile(list(filter(lambda x: x in other, self)), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def is_valid(self, strategies, num_players):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2, 0, __pyx_n_s_intersection_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":109
 *         return StrategySupportProfile(list(filter(lambda x: x not in other, self)), self.game)
 * 
 *     def intersection(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(filter(lambda x: x in other, self)), self.game)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.intersection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":112
 *         return StrategySupportProfile(list(filter(lambda x: x in other, self)), self.game)
 * 
 *     def is_valid(self, strategies, num_players):             # <<<<<<<<<<<<<<
 *         if len(set([strat.player.number for strat in strategies])) == num_players \
 *             & num_players >= 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_23is_valid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_23is_valid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strategies = 0;
  PyObject *__pyx_v_num_players = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_valid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategies,&__pyx_n_s_num_players,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategies)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_players)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_valid", 1, 2, 2, 1); __PYX_ERR(2, 112, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_valid") < 0)) __PYX_ERR(2, 112, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_strategies = values[0];
    __pyx_v_num_players = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_valid", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 112, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_22is_valid(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), __pyx_v_strategies, __pyx_v_num_players);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_22is_valid(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategies, PyObject *__pyx_v_num_players) {
  PyObject *__pyx_8genexpr5__pyx_v_strat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_valid", 0);

  /* "pygambit/lib/stratspt.pxi":113
 * 
 *     def is_valid(self, strategies, num_players):
 *         if len(set([strat.player.number for strat in strategies])) == num_players \             # <<<<<<<<<<<<<<
 *             & num_players >= 1:
 *             return True
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 113, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_strategies)) || PyTuple_CheckExact(__pyx_v_strategies)) {
      __pyx_t_2 = __pyx_v_strategies; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_strategies); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 113, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 113, __pyx_L6_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 113, __pyx_L6_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 113, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 113, __pyx_L6_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 113, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 113, __pyx_L6_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_strat, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr5__pyx_v_strat, __pyx_n_s_player); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 113, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_number); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 113, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 113, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_strat); __pyx_8genexpr5__pyx_v_strat = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_strat); __pyx_8genexpr5__pyx_v_strat = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PySet_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(2, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pygambit/lib/stratspt.pxi":114
 *     def is_valid(self, strategies, num_players):
 *         if len(set([strat.player.number for strat in strategies])) == num_players \
 *             & num_players >= 1:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_1 = PyNumber_And(__pyx_v_num_players, __pyx_v_num_players); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 113, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_6)) {
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 114, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":113
 * 
 *     def is_valid(self, strategies, num_players):
 *         if len(set([strat.player.number for strat in strategies])) == num_players \             # <<<<<<<<<<<<<<
 *             & num_players >= 1:
 *             return True
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(2, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_7) {

    /* "pygambit/lib/stratspt.pxi":115
 *         if len(set([strat.player.number for strat in strategies])) == num_players \
 *             & num_players >= 1:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "pygambit/lib/stratspt.pxi":113
 * 
 *     def is_valid(self, strategies, num_players):
 *         if len(set([strat.player.number for strat in strategies])) == num_players \             # <<<<<<<<<<<<<<
 *             & num_players >= 1:
 *             return True
 */
  }

  /* "pygambit/lib/stratspt.pxi":116
 *             & num_players >= 1:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def issubset(self, StrategySupportProfile other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":112
 *         return StrategySupportProfile(list(filter(lambda x: x in other, self)), self.game)
 * 
 *     def is_valid(self, strategies, num_players):             # <<<<<<<<<<<<<<
 *         if len(set([strat.player.number for strat in strategies])) == num_players \
 *             & num_players >= 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_strat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":118
 *         return False
 * 
 *     def issubset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return functools.reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_25issubset(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_25issubset(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("issubset (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(2, 118, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_24issubset(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":119
 * 
 *     def issubset(self, StrategySupportProfile other):
 *         return functools.reduce(lambda acc,st: acc & (st in other), self, True)             # <<<<<<<<<<<<<<
 * 
 *     def issuperset(self, StrategySupportProfile other):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3 = {"lambda3", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_acc = 0;
  PyObject *__pyx_v_st = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_acc,&__pyx_n_s_st,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_acc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda3", 1, 2, 2, 1); __PYX_ERR(2, 119, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda3") < 0)) __PYX_ERR(2, 119, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_acc = values[0];
    __pyx_v_st = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 119, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.issubset.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda3(__pyx_self, __pyx_v_acc, __pyx_v_st);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_acc, PyObject *__pyx_v_st) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *__pyx_cur_scope;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_other)) { __Pyx_RaiseClosureNameError("other"); __PYX_ERR(2, 119, __pyx_L1_error) }
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_st, ((PyObject *)__pyx_cur_scope->__pyx_v_other), Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 119, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_v_acc, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.issubset.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":118
 *         return False
 * 
 *     def issubset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return functools.reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_24issubset(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("issubset", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(2, 118, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_other = __pyx_v_other;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_other);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_other);

  /* "pygambit/lib/stratspt.pxi":119
 * 
 *     def issubset(self, StrategySupportProfile other):
 *         return functools.reduce(lambda acc,st: acc & (st in other), self, True)             # <<<<<<<<<<<<<<
 * 
 *     def issuperset(self, StrategySupportProfile other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_functools); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_reduce); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3, 0, __pyx_n_s_issubset_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_t_2, ((PyObject *)__pyx_v_self), Py_True};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 119, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_t_2, ((PyObject *)__pyx_v_self), Py_True};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 119, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, Py_True);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":118
 *         return False
 * 
 *     def issubset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return functools.reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.issubset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":121
 *         return functools.reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 *     def issuperset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return other.issubset(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_27issuperset(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_27issuperset(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("issuperset (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(2, 121, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_26issuperset(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_26issuperset(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("issuperset", 0);

  /* "pygambit/lib/stratspt.pxi":122
 * 
 *     def issuperset(self, StrategySupportProfile other):
 *         return other.issubset(self)             # <<<<<<<<<<<<<<
 * 
 *     def restrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_other), __pyx_n_s_issubset); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":121
 *         return functools.reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 *     def issuperset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return other.issubset(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.issuperset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":124
 *         return other.issubset(self)
 * 
 *     def restrict(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_29restrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_29restrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restrict (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_28restrict(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_28restrict(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restrict", 0);

  /* "pygambit/lib/stratspt.pxi":126
 *     def restrict(self):
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         restriction.support = new c_StrategySupportProfile(deref(self.support))
 *         return restriction
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":127
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 *         restriction.support = new c_StrategySupportProfile(deref(self.support))             # <<<<<<<<<<<<<<
 *         return restriction
 * 
 */
  __pyx_v_restriction->support = new StrategySupportProfile((*__pyx_v_self->support));

  /* "pygambit/lib/stratspt.pxi":128
 *         restriction = StrategicRestriction()
 *         restriction.support = new c_StrategySupportProfile(deref(self.support))
 *         return restriction             # <<<<<<<<<<<<<<
 * 
 *     def undominated(self, strict=False, external=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_restriction));
  __pyx_r = ((PyObject *)__pyx_v_restriction);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":124
 *         return other.issubset(self)
 * 
 *     def restrict(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.restrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_restriction);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":130
 *         return restriction
 * 
 *     def undominated(self, strict=False, external=False):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_31undominated(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_31undominated(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strict = 0;
  PyObject *__pyx_v_external = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("undominated (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strict,&__pyx_n_s_external,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strict);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_external);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "undominated") < 0)) __PYX_ERR(2, 130, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_strict = values[0];
    __pyx_v_external = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("undominated", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 130, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.undominated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_30undominated(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), __pyx_v_strict, __pyx_v_external);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_30undominated(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strict, PyObject *__pyx_v_external) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_new_profile = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("undominated", 0);

  /* "pygambit/lib/stratspt.pxi":132
 *     def undominated(self, strict=False, external=False):
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, external))
 *         new_profile = StrategySupportProfile(restriction.strategies, self.game)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":133
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 *         restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, external))             # <<<<<<<<<<<<<<
 *         new_profile = StrategySupportProfile(restriction.strategies, self.game)
 *         return new_profile
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_strict); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 133, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_external); if (unlikely((__pyx_t_3 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 133, __pyx_L1_error)
  __pyx_v_restriction->support = new StrategySupportProfile(__pyx_v_self->support->Undominated(__pyx_t_2, __pyx_t_3));

  /* "pygambit/lib/stratspt.pxi":134
 *         restriction = StrategicRestriction()
 *         restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, external))
 *         new_profile = StrategySupportProfile(restriction.strategies, self.game)             # <<<<<<<<<<<<<<
 *         return new_profile
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_restriction), __pyx_n_s_strategies); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_new_profile = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pygambit/lib/stratspt.pxi":135
 *         restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, external))
 *         new_profile = StrategySupportProfile(restriction.strategies, self.game)
 *         return new_profile             # <<<<<<<<<<<<<<
 * 
 *     def union(self, StrategySupportProfile other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_profile));
  __pyx_r = ((PyObject *)__pyx_v_new_profile);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":130
 *         return restriction
 * 
 *     def undominated(self, strict=False, external=False):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.undominated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_restriction);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_profile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":137
 *         return new_profile
 * 
 *     def union(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_33union(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_33union(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("union (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(2, 137, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_32union(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_32union(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("union", 0);

  /* "pygambit/lib/stratspt.pxi":138
 * 
 *     def union(self, StrategySupportProfile other):
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def unique(self, lst):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unique); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_other)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":137
 *         return new_profile
 * 
 *     def union(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":140
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)
 * 
 *     def unique(self, lst):             # <<<<<<<<<<<<<<
 *         uniq = []
 *         [uniq.append(i) for i in lst if not uniq.count(i)]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_35unique(PyObject *__pyx_v_self, PyObject *__pyx_v_lst); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_35unique(PyObject *__pyx_v_self, PyObject *__pyx_v_lst) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unique (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_34unique(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((PyObject *)__pyx_v_lst));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_34unique(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_lst) {
  PyObject *__pyx_v_uniq = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unique", 0);

  /* "pygambit/lib/stratspt.pxi":141
 * 
 *     def unique(self, lst):
 *         uniq = []             # <<<<<<<<<<<<<<
 *         [uniq.append(i) for i in lst if not uniq.count(i)]
 *         return uniq
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_uniq = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":142
 *     def unique(self, lst):
 *         uniq = []
 *         [uniq.append(i) for i in lst if not uniq.count(i)]             # <<<<<<<<<<<<<<
 *         return uniq
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 142, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_lst)) || PyTuple_CheckExact(__pyx_v_lst)) {
      __pyx_t_2 = __pyx_v_lst; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_lst); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 142, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 142, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 142, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 142, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 142, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 142, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 142, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyList_Type_count, __pyx_v_uniq, __pyx_8genexpr6__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 142, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 142, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = ((!__pyx_t_6) != 0);
      if (__pyx_t_7) {
        __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_uniq, __pyx_8genexpr6__pyx_v_i); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(2, 142, __pyx_L5_error)
        __pyx_t_5 = __Pyx_Owned_Py_None(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 142, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 142, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_i); __pyx_8genexpr6__pyx_v_i = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_i); __pyx_8genexpr6__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":143
 *         uniq = []
 *         [uniq.append(i) for i in lst if not uniq.count(i)]
 *         return uniq             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_uniq);
  __pyx_r = __pyx_v_uniq;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":140
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)
 * 
 *     def unique(self, lst):             # <<<<<<<<<<<<<<
 *         uniq = []
 *         [uniq.append(i) for i in lst if not uniq.count(i)]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.unique", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_uniq);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":146
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":148
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.support.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":149
 *             cdef Game g
 *             g = Game()
 *             g.game = self.support.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->support->GetGame();

  /* "pygambit/lib/stratspt.pxi":150
 *             g = Game()
 *             g.game = self.support.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 * cdef class RestrictionOutcomes(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":146
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_36__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_38__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22StrategySupportProfile_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategySupportProfile.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":156
 *     cdef StrategicRestriction restriction
 * 
 *     def __init__(self, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_restriction,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_restriction)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 156, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionOutcomes.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_restriction), __pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction, 0, "restriction", 0))) __PYX_ERR(2, 156, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes___init__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self), __pyx_v_restriction);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pygambit/lib/stratspt.pxi":157
 * 
 *     def __init__(self, StrategicRestriction restriction not None):
 *         self.restriction = restriction             # <<<<<<<<<<<<<<
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 *     def __getitem__(self, outc):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GOTREF(__pyx_v_self->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->restriction));
  __pyx_v_self->restriction = __pyx_v_restriction;

  /* "pygambit/lib/stratspt.pxi":156
 *     cdef StrategicRestriction restriction
 * 
 *     def __init__(self, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":158
 *     def __init__(self, StrategicRestriction restriction not None):
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, outc):
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_2__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GameRep *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->restriction), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  try {
    __pyx_t_4 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1)->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(2, 158, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4->NumOutcomes();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionOutcomes.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":159
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 *     def __getitem__(self, outc):             # <<<<<<<<<<<<<<
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_outc); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_outc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_4__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self), ((PyObject *)__pyx_v_outc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_4__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, PyObject *__pyx_v_outc) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  GameObjectPtr<GameOutcomeRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/stratspt.pxi":160
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 *     def __getitem__(self, outc):
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)             # <<<<<<<<<<<<<<
 *         cdef Outcome c
 *         c = Outcome()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_outc); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_outc};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 160, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_outc};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 160, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_outc);
      __Pyx_GIVEREF(__pyx_v_outc);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_outc);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/stratspt.pxi":162
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 *         c = Outcome()             # <<<<<<<<<<<<<<
 *         c.outcome = (<Game>self.restriction.unrestrict()).game.deref().GetOutcome(outc+1)
 *         c.restriction = self.restriction
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Outcome)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_c = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/stratspt.pxi":163
 *         cdef Outcome c
 *         c = Outcome()
 *         c.outcome = (<Game>self.restriction.unrestrict()).game.deref().GetOutcome(outc+1)             # <<<<<<<<<<<<<<
 *         c.restriction = self.restriction
 *         return c
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->restriction), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  try {
    __pyx_t_8 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_3)->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(2, 163, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_outc, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetOutcome(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(2, 163, __pyx_L1_error)
  }
  __pyx_v_c->outcome = __pyx_t_9;

  /* "pygambit/lib/stratspt.pxi":164
 *         c = Outcome()
 *         c.outcome = (<Game>self.restriction.unrestrict()).game.deref().GetOutcome(outc+1)
 *         c.restriction = self.restriction             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->restriction);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_c->restriction));
  __pyx_v_c->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/stratspt.pxi":165
 *         c.outcome = (<Game>self.restriction.unrestrict()).game.deref().GetOutcome(outc+1)
 *         c.restriction = self.restriction
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def add(self, label=""):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":159
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 *     def __getitem__(self, outc):             # <<<<<<<<<<<<<<
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionOutcomes.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":167
 *         return c
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         raise UndefinedOperationError("Changing objects in a restriction is not supported")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_7add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_7add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_label = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__19);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(2, 167, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 167, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionOutcomes.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_6add(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_6add(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "pygambit/lib/stratspt.pxi":168
 * 
 *     def add(self, label=""):
 *         raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 * 
 * cdef class RestrictionStrategies(Collection):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_Changing_objects_in_a_restrictio) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_Changing_objects_in_a_restrictio);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 168, __pyx_L1_error)

  /* "pygambit/lib/stratspt.pxi":167
 *         return c
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         raise UndefinedOperationError("Changing objects in a restriction is not supported")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionOutcomes.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_8__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_8__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.restriction,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->restriction));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->restriction));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->restriction));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.restriction,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.restriction,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.restriction is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.restriction,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.restriction is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.restriction is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.restriction is not None
 *     if use_setstate:
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_RestrictionOutcom); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_64675758);
    __Pyx_GIVEREF(__pyx_int_64675758);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_64675758);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.restriction is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, None), state
 *     else:
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RestrictionOutcomes__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_RestrictionOutcom); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_64675758);
    __Pyx_GIVEREF(__pyx_int_64675758);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_64675758);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionOutcomes.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RestrictionOutcomes__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_10__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19RestrictionOutcomes_10__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RestrictionOutcomes__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_RestrictionOutcomes__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RestrictionOutcomes, (type(self), 0x3dadfae, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RestrictionOutcomes__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionOutcomes.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":174
 *     cdef StrategicRestriction restriction
 * 
 *     def __init__(self, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_restriction,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_restriction)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 174, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionStrategies.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_restriction), __pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction, 0, "restriction", 0))) __PYX_ERR(2, 174, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies___init__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)__pyx_v_self), __pyx_v_restriction);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pygambit/lib/stratspt.pxi":175
 * 
 *     def __init__(self, StrategicRestriction restriction not None):
 *         self.restriction = restriction             # <<<<<<<<<<<<<<
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GOTREF(__pyx_v_self->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->restriction));
  __pyx_v_self->restriction = __pyx_v_restriction;

  /* "pygambit/lib/stratspt.pxi":174
 *     cdef StrategicRestriction restriction
 * 
 *     def __init__(self, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":176
 *     def __init__(self, StrategicRestriction restriction not None):
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_2__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);
  __pyx_r = __pyx_v_self->restriction->support->MixedProfileLength();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":177
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_4__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)__pyx_v_self), ((PyObject *)__pyx_v_strat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_4__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, PyObject *__pyx_v_strat) {
  Array<int>  __pyx_v_num_strategies;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  GameObjectPtr<GameStrategyRep> __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_strat);

  /* "pygambit/lib/stratspt.pxi":178
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Array[int] num_strategies
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_strat); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/stratspt.pxi":179
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)             # <<<<<<<<<<<<<<
 *         cdef Array[int] num_strategies
 *         cdef Strategy s
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_strat};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 179, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_strat};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 179, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_strat);
      __Pyx_GIVEREF(__pyx_v_strat);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_strat);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/stratspt.pxi":178
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Array[int] num_strategies
 */
  }

  /* "pygambit/lib/stratspt.pxi":182
 *         cdef Array[int] num_strategies
 *         cdef Strategy s
 *         num_strategies = self.restriction.support.NumStrategies()             # <<<<<<<<<<<<<<
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:
 */
  __pyx_v_num_strategies = __pyx_v_self->restriction->support->NumStrategies();

  /* "pygambit/lib/stratspt.pxi":183
 *         cdef Strategy s
 *         num_strategies = self.restriction.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):             # <<<<<<<<<<<<<<
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 */
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_num_strategies.Length() + 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 183, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(2, 183, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(2, 183, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 183, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/stratspt.pxi":184
 *         num_strategies = self.restriction.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:             # <<<<<<<<<<<<<<
 *                 s = Strategy()
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 184, __pyx_L1_error)
    try {
      __pyx_t_10 = __pyx_v_num_strategies.operator[](__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(2, 184, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Subtract(__pyx_v_strat, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_7, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/stratspt.pxi":185
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()             # <<<<<<<<<<<<<<
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restriction
 */
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Strategy)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pygambit/lib/stratspt.pxi":186
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)             # <<<<<<<<<<<<<<
 *                 s.restriction = self.restriction
 *                 return s
 */
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 186, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_strat, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 186, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_t_11 = __pyx_v_self->restriction->support->GetStrategy(__pyx_t_10, __pyx_t_6);
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
        __PYX_ERR(2, 186, __pyx_L1_error)
      }
      __pyx_v_s->strategy = __pyx_t_11;

      /* "pygambit/lib/stratspt.pxi":187
 *                 s = Strategy()
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restriction             # <<<<<<<<<<<<<<
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 */
      __pyx_t_3 = ((PyObject *)__pyx_v_self->restriction);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_s->restriction);
      __Pyx_DECREF(((PyObject *)__pyx_v_s->restriction));
      __pyx_v_s->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pygambit/lib/stratspt.pxi":188
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restriction
 *                 return s             # <<<<<<<<<<<<<<
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_s));
      __pyx_r = ((PyObject *)__pyx_v_s);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":184
 *         num_strategies = self.restriction.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:             # <<<<<<<<<<<<<<
 *                 s = Strategy()
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 */
    }

    /* "pygambit/lib/stratspt.pxi":189
 *                 s.restriction = self.restriction
 *                 return s
 *             strat = strat - num_strategies.getitem(i)             # <<<<<<<<<<<<<<
 *         raise IndexError("Index out of range")
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 189, __pyx_L1_error)
    try {
      __pyx_t_10 = __pyx_v_num_strategies.operator[](__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(2, 189, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Subtract(__pyx_v_strat, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_strat, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pygambit/lib/stratspt.pxi":183
 *         cdef Strategy s
 *         num_strategies = self.restriction.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):             # <<<<<<<<<<<<<<
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygambit/lib/stratspt.pxi":190
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 * 
 * cdef class StrategicRestriction(BaseGame):
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(2, 190, __pyx_L1_error)

  /* "pygambit/lib/stratspt.pxi":177
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionStrategies.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_strat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_6__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.restriction,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->restriction));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->restriction));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->restriction));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.restriction,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.restriction,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.restriction is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.restriction,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.restriction is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.restriction is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.restriction is not None
 *     if use_setstate:
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_RestrictionStrate); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_64675758);
    __Pyx_GIVEREF(__pyx_int_64675758);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_64675758);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.restriction is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, None), state
 *     else:
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RestrictionStrategies__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_RestrictionStrate); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_64675758);
    __Pyx_GIVEREF(__pyx_int_64675758);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_64675758);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionStrategies.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RestrictionStrategies__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21RestrictionStrategies_8__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RestrictionStrategies__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_RestrictionStrategies__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RestrictionStrategies, (type(self), 0x3dadfae, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RestrictionStrategies__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.RestrictionStrategies.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":199
 *     cdef c_StrategySupportProfile *support
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction___init__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pygambit/lib/stratspt.pxi":200
 * 
 *     def __init__(self):
 *         self.support = (<c_StrategySupportProfile *>0)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 */
  __pyx_v_self->support = ((StrategySupportProfile *)0);

  /* "pygambit/lib/stratspt.pxi":199
 *     cdef c_StrategySupportProfile *support
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":201
 *     def __init__(self):
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/stratspt.pxi":202
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):             # <<<<<<<<<<<<<<
 *             del self.support
 *     def __repr__(self):
 */
  __pyx_t_1 = ((__pyx_v_self->support != ((StrategySupportProfile *)0)) != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/stratspt.pxi":203
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.write()
 */
    delete __pyx_v_self->support;

    /* "pygambit/lib/stratspt.pxi":202
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):             # <<<<<<<<<<<<<<
 *             del self.support
 *     def __repr__(self):
 */
  }

  /* "pygambit/lib/stratspt.pxi":201
 *     def __init__(self):
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/stratspt.pxi":204
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.write()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_4__repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_4__repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/stratspt.pxi":205
 *             del self.support
 *     def __repr__(self):
 *         return self.write()             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":204
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.write()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":207
 *         return self.write()
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(2, 207, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_6__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_6__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/stratspt.pxi":208
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 *         if isinstance(other, StrategicRestriction):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/stratspt.pxi":209
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 209, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/stratspt.pxi":210
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_self->support) == (*((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_other)->support))); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":209
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/stratspt.pxi":211
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/stratspt.pxi":212
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_self->support) != (*((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_other)->support))); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 212, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":211
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)
 *             else:
 */
    }

    /* "pygambit/lib/stratspt.pxi":214
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(2, 214, __pyx_L1_error)
    }

    /* "pygambit/lib/stratspt.pxi":208
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 *         if isinstance(other, StrategicRestriction):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 */
  }

  /* "pygambit/lib/stratspt.pxi":216
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/stratspt.pxi":217
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":216
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/stratspt.pxi":218
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/stratspt.pxi":219
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/stratspt.pxi":218
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/stratspt.pxi":221
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(2, 221, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/stratspt.pxi":207
 *         return self.write()
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":223
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>&self.support)
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_9__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_9__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_8__hash__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_8__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_hash_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pygambit/lib/stratspt.pxi":224
 * 
 *     def __hash__(self):
 *         return long(<long>&self.support)             # <<<<<<<<<<<<<<
 * 
 *     property title:
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(((long)(&__pyx_v_self->support))); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyLong_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsHash_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":223
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>&self.support)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":227
 * 
 *     property title:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return "Restriction from Game '%s'" % self.unrestrict().title
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_5title_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_5title_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_5title___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_5title___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":228
 *     property title:
 *         def __get__(self):
 *             return "Restriction from Game '%s'" % self.unrestrict().title             # <<<<<<<<<<<<<<
 * 
 *     property players:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_title); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Restriction_from_Game_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":227
 * 
 *     property title:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return "Restriction from Game '%s'" % self.unrestrict().title
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.title.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":231
 * 
 *     property players:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Players p
 *             p = Players()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_7players_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_7players_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_7players___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_7players___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GameObjectPtr<GameRep> __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":233
 *         def __get__(self):
 *             cdef Players p
 *             p = Players()             # <<<<<<<<<<<<<<
 *             p.game = (<Game>self.unrestrict()).game
 *             p.restriction = self
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Players)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":234
 *             cdef Players p
 *             p = Players()
 *             p.game = (<Game>self.unrestrict()).game             # <<<<<<<<<<<<<<
 *             p.restriction = self
 *             return p
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1)->game;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_p->game = __pyx_t_4;

  /* "pygambit/lib/stratspt.pxi":235
 *             p = Players()
 *             p.game = (<Game>self.unrestrict()).game
 *             p.restriction = self             # <<<<<<<<<<<<<<
 *             return p
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_p->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_p->restriction));
  __pyx_v_p->restriction = __pyx_v_self;

  /* "pygambit/lib/stratspt.pxi":236
 *             p.game = (<Game>self.unrestrict()).game
 *             p.restriction = self
 *             return p             # <<<<<<<<<<<<<<
 * 
 *     property strategies:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":231
 * 
 *     property players:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Players p
 *             p = Players()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.players.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":239
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef RestrictionStrategies s
 *             s = RestrictionStrategies(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_10strategies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_10strategies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10strategies___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10strategies___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":241
 *         def __get__(self):
 *             cdef RestrictionStrategies s
 *             s = RestrictionStrategies(self)             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_RestrictionStrategies), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":242
 *             cdef RestrictionStrategies s
 *             s = RestrictionStrategies(self)
 *             return s             # <<<<<<<<<<<<<<
 * 
 *     property outcomes:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":239
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef RestrictionStrategies s
 *             s = RestrictionStrategies(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.strategies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":245
 * 
 *     property outcomes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef RestrictionOutcomes o
 *             o = RestrictionOutcomes(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_8outcomes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_8outcomes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_8outcomes___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_8outcomes___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":247
 *         def __get__(self):
 *             cdef RestrictionOutcomes o
 *             o = RestrictionOutcomes(self)             # <<<<<<<<<<<<<<
 *             return o
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_RestrictionOutcomes), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":248
 *             cdef RestrictionOutcomes o
 *             o = RestrictionOutcomes(self)
 *             return o             # <<<<<<<<<<<<<<
 * 
 *     property is_tree:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_o));
  __pyx_r = ((PyObject *)__pyx_v_o);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":245
 * 
 *     property outcomes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef RestrictionOutcomes o
 *             o = RestrictionOutcomes(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.outcomes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":251
 * 
 *     property is_tree:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             # Any strategic restriction is automatically not a tree
 *             # representation, even if the parent game does have one.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_7is_tree_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_7is_tree_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_7is_tree___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_7is_tree___get__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":254
 *             # Any strategic restriction is automatically not a tree
 *             # representation, even if the parent game does have one.
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     property is_const_sum:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":251
 * 
 *     property is_tree:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             # Any strategic restriction is automatically not a tree
 *             # representation, even if the parent game does have one.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":257
 * 
 *     property is_const_sum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().is_const_sum
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":258
 *     property is_const_sum:
 *         def __get__(self):
 *             return self.unrestrict().is_const_sum             # <<<<<<<<<<<<<<
 * 
 *     property is_perfect_recall:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_const_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":257
 * 
 *     property is_const_sum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().is_const_sum
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.is_const_sum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":261
 * 
 *     property is_perfect_recall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().is_perfect_recall
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":262
 *     property is_perfect_recall:
 *         def __get__(self):
 *             return self.unrestrict().is_perfect_recall             # <<<<<<<<<<<<<<
 * 
 *     property min_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_perfect_recall); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":261
 * 
 *     property is_perfect_recall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().is_perfect_recall
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.is_perfect_recall.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":265
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().min_payoff
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_10min_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_10min_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10min_payoff___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10min_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":266
 *     property min_payoff:
 *         def __get__(self):
 *             return self.unrestrict().min_payoff             # <<<<<<<<<<<<<<
 * 
 *     property max_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_min_payoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":265
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().min_payoff
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.min_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":269
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().max_payoff
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_10max_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_10max_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10max_payoff___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10max_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/stratspt.pxi":270
 *     property max_payoff:
 *         def __get__(self):
 *             return self.unrestrict().max_payoff             # <<<<<<<<<<<<<<
 * 
 *     def write(self, format='native'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_max_payoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":269
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().max_payoff
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.max_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":272
 *             return self.unrestrict().max_payoff
 * 
 *     def write(self, format='native'):             # <<<<<<<<<<<<<<
 *         if format != 'native' and format != 'nfg':
 *             raise NotImplementedError
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_11write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_11write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_format,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write") < 0)) __PYX_ERR(2, 272, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_format = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 272, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10write(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), __pyx_v_format);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_10write(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_format) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "pygambit/lib/stratspt.pxi":273
 * 
 *     def write(self, format='native'):
 *         if format != 'native' and format != 'nfg':             # <<<<<<<<<<<<<<
 *             raise NotImplementedError
 *         else:
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_format, __pyx_n_s_native, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 273, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_format, __pyx_n_s_nfg, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 273, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "pygambit/lib/stratspt.pxi":274
 *     def write(self, format='native'):
 *         if format != 'native' and format != 'nfg':
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             return WriteGame(deref(self.support)).c_str()
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(2, 274, __pyx_L1_error)

    /* "pygambit/lib/stratspt.pxi":273
 * 
 *     def write(self, format='native'):
 *         if format != 'native' and format != 'nfg':             # <<<<<<<<<<<<<<
 *             raise NotImplementedError
 *         else:
 */
  }

  /* "pygambit/lib/stratspt.pxi":276
 *             raise NotImplementedError
 *         else:
 *             return WriteGame(deref(self.support)).c_str()             # <<<<<<<<<<<<<<
 * 
 *     def undominated(self, strict=False):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = WriteGame((*__pyx_v_self->support));
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IOError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IOError); }
      __PYX_ERR(2, 276, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_t_3.c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/stratspt.pxi":272
 *             return self.unrestrict().max_payoff
 * 
 *     def write(self, format='native'):             # <<<<<<<<<<<<<<
 *         if format != 'native' and format != 'nfg':
 *             raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":278
 *             return WriteGame(deref(self.support)).c_str()
 * 
 *     def undominated(self, strict=False):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction new_restriction
 *         new_restriction = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_13undominated(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_13undominated(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strict = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("undominated (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strict,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strict);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "undominated") < 0)) __PYX_ERR(2, 278, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_strict = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("undominated", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 278, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.undominated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_12undominated(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), __pyx_v_strict);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_12undominated(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_strict) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_new_restriction = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("undominated", 0);

  /* "pygambit/lib/stratspt.pxi":280
 *     def undominated(self, strict=False):
 *         cdef StrategicRestriction new_restriction
 *         new_restriction = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         new_restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, False))
 *         return new_restriction
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":281
 *         cdef StrategicRestriction new_restriction
 *         new_restriction = StrategicRestriction()
 *         new_restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, False))             # <<<<<<<<<<<<<<
 *         return new_restriction
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_strict); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(2, 281, __pyx_L1_error)
  __pyx_v_new_restriction->support = new StrategySupportProfile(__pyx_v_self->support->Undominated(__pyx_t_2, 0));

  /* "pygambit/lib/stratspt.pxi":282
 *         new_restriction = StrategicRestriction()
 *         new_restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, False))
 *         return new_restriction             # <<<<<<<<<<<<<<
 * 
 *     def num_strategies_player(self, pl):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_restriction));
  __pyx_r = ((PyObject *)__pyx_v_new_restriction);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":278
 *             return WriteGame(deref(self.support)).c_str()
 * 
 *     def undominated(self, strict=False):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction new_restriction
 *         new_restriction = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.undominated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_restriction);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":284
 *         return new_restriction
 * 
 *     def num_strategies_player(self, pl):             # <<<<<<<<<<<<<<
 *         return self.support.NumStrategiesPlayer(pl+1)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_15num_strategies_player(PyObject *__pyx_v_self, PyObject *__pyx_v_pl); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_15num_strategies_player(PyObject *__pyx_v_self, PyObject *__pyx_v_pl) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_strategies_player (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_14num_strategies_player(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), ((PyObject *)__pyx_v_pl));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_14num_strategies_player(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_pl) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_strategies_player", 0);

  /* "pygambit/lib/stratspt.pxi":285
 * 
 *     def num_strategies_player(self, pl):
 *         return self.support.NumStrategiesPlayer(pl+1)             # <<<<<<<<<<<<<<
 * 
 *     def support_profile(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = __pyx_v_self->support->NumStrategies(__pyx_t_2);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(2, 285, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":284
 *         return new_restriction
 * 
 *     def num_strategies_player(self, pl):             # <<<<<<<<<<<<<<
 *         return self.support.NumStrategiesPlayer(pl+1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.num_strategies_player", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":287
 *         return self.support.NumStrategiesPlayer(pl+1)
 * 
 *     def support_profile(self):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_17support_profile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_17support_profile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("support_profile (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_16support_profile(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_16support_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("support_profile", 0);

  /* "pygambit/lib/stratspt.pxi":288
 * 
 *     def support_profile(self):
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategies); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":287
 *         return self.support.NumStrategiesPlayer(pl+1)
 * 
 *     def support_profile(self):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.support_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":290
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_19unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_19unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_18unrestrict(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_18unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "pygambit/lib/stratspt.pxi":292
 *     def unrestrict(self):
 *         cdef Game g
 *         g = Game()             # <<<<<<<<<<<<<<
 *         g.game = self.support.GetGame()
 *         return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/stratspt.pxi":293
 *         cdef Game g
 *         g = Game()
 *         g.game = self.support.GetGame()             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->support->GetGame();

  /* "pygambit/lib/stratspt.pxi":294
 *         g = Game()
 *         g.game = self.support.GetGame()
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     ###
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":290
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":302
 *     ###
 * 
 *     def _get_contingency(self, *args):             # <<<<<<<<<<<<<<
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_21_get_contingency(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_21_get_contingency(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_contingency (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_get_contingency", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_20_get_contingency(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_20_get_contingency(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_args) {
  PureStrategyProfile *__pyx_v_psp;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_outcome = 0;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  GameObjectPtr<GameStrategyRep> __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_contingency", 0);

  /* "pygambit/lib/stratspt.pxi":305
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 *         psp = new c_PureStrategyProfile(deref(self.support).GetGame().deref().NewPureStrategyProfile())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = (*__pyx_v_self->support).GetGame().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(2, 305, __pyx_L1_error)
  }
  __pyx_v_psp = new PureStrategyProfile(__pyx_t_1->NewPureStrategyProfile());

  /* "pygambit/lib/stratspt.pxi":308
 * 
 * 
 *         for (pl, st) in enumerate(args):             # <<<<<<<<<<<<<<
 *             psp.deref().SetStrategy(deref(self.support).GetStrategy(pl+1, st+1))
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __pyx_v_args; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 308, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_st, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_pl, __pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pygambit/lib/stratspt.pxi":309
 * 
 *         for (pl, st) in enumerate(args):
 *             psp.deref().SetStrategy(deref(self.support).GetStrategy(pl+1, st+1))             # <<<<<<<<<<<<<<
 * 
 *         outcome = Outcome()
 */
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_st, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_8 = (*__pyx_v_self->support).GetStrategy(__pyx_t_6, __pyx_t_7);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(2, 309, __pyx_L1_error)
    }
    __pyx_v_psp->operator->()->SetStrategy(__pyx_t_8);

    /* "pygambit/lib/stratspt.pxi":308
 * 
 * 
 *         for (pl, st) in enumerate(args):             # <<<<<<<<<<<<<<
 *             psp.deref().SetStrategy(deref(self.support).GetStrategy(pl+1, st+1))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/stratspt.pxi":311
 *             psp.deref().SetStrategy(deref(self.support).GetStrategy(pl+1, st+1))
 * 
 *         outcome = Outcome()             # <<<<<<<<<<<<<<
 *         outcome.outcome = psp.deref().GetOutcome()
 *         del psp
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Outcome)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_outcome = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/stratspt.pxi":312
 * 
 *         outcome = Outcome()
 *         outcome.outcome = psp.deref().GetOutcome()             # <<<<<<<<<<<<<<
 *         del psp
 *         return outcome
 */
  __pyx_v_outcome->outcome = __pyx_v_psp->operator->()->GetOutcome();

  /* "pygambit/lib/stratspt.pxi":313
 *         outcome = Outcome()
 *         outcome.outcome = psp.deref().GetOutcome()
 *         del psp             # <<<<<<<<<<<<<<
 *         return outcome
 * 
 */
  delete __pyx_v_psp;

  /* "pygambit/lib/stratspt.pxi":314
 *         outcome.outcome = psp.deref().GetOutcome()
 *         del psp
 *         return outcome             # <<<<<<<<<<<<<<
 * 
 *     # As of Cython 0.11.2, cython does not support the * notation for the argument
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_outcome));
  __pyx_r = ((PyObject *)__pyx_v_outcome);
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":302
 *     ###
 * 
 *     def _get_contingency(self, *args):             # <<<<<<<<<<<<<<
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction._get_contingency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_outcome);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":319
 *     # to __getitem__, which is required for multidimensional slicing to work.
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(i) != len(self.players):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_23__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_23__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_22__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_22__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_v_cont = NULL;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/stratspt.pxi":320
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "pygambit/lib/stratspt.pxi":321
 *     def __getitem__(self, i):
 *         try:
 *             if len(i) != len(self.players):             # <<<<<<<<<<<<<<
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 */
      __pyx_t_4 = PyObject_Length(__pyx_v_i); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 321, __pyx_L3_error)
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 321, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 321, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = ((__pyx_t_4 != __pyx_t_6) != 0);
      if (unlikely(__pyx_t_7)) {

        /* "pygambit/lib/stratspt.pxi":322
 *         try:
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"
 */
        __Pyx_Raise(__pyx_builtin_KeyError, __pyx_kp_s_Number_of_strategies_is_not_equa, 0, 0);
        __PYX_ERR(2, 322, __pyx_L3_error)

        /* "pygambit/lib/stratspt.pxi":321
 *     def __getitem__(self, i):
 *         try:
 *             if len(i) != len(self.players):             # <<<<<<<<<<<<<<
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 */
      }

      /* "pygambit/lib/stratspt.pxi":320
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/stratspt.pxi":323
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(2, 323, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_10);

      /* "pygambit/lib/stratspt.pxi":324
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"             # <<<<<<<<<<<<<<
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 */
      __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_contingency_must_be_a_tuple_like, 0, 0);
      __PYX_ERR(2, 324, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "pygambit/lib/stratspt.pxi":320
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "pygambit/lib/stratspt.pxi":325
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)             # <<<<<<<<<<<<<<
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyList_New(1 * ((__pyx_t_6<0) ? 0:__pyx_t_6)); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_6; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyList_SET_ITEM(__pyx_t_10, __pyx_temp, __pyx_int_0);
    }
  }
  __pyx_v_cont = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "pygambit/lib/stratspt.pxi":326
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):             # <<<<<<<<<<<<<<
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_10 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_i)) || PyTuple_CheckExact(__pyx_v_i)) {
    __pyx_t_9 = __pyx_v_i; __Pyx_INCREF(__pyx_t_9); __pyx_t_6 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 326, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 326, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 326, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 326, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 326, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_11(__pyx_t_9);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 326, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_st, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_pl, __pyx_t_10);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_10, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10);
    __pyx_t_10 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pygambit/lib/stratspt.pxi":327
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):             # <<<<<<<<<<<<<<
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 */
    __pyx_t_7 = PyInt_Check(__pyx_v_st); 
    __pyx_t_12 = (__pyx_t_7 != 0);
    if (__pyx_t_12) {

      /* "pygambit/lib/stratspt.pxi":328
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_st, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 328, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(2, 328, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!__pyx_t_7) {
      } else {
        __pyx_t_12 = __pyx_t_7;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_pl); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_strategies); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_4 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(2, 328, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyObject_RichCompare(__pyx_v_st, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 328, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(2, 328, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_12 = __pyx_t_7;
      __pyx_L16_bool_binop_done:;
      if (unlikely(__pyx_t_12)) {

        /* "pygambit/lib/stratspt.pxi":329
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)             # <<<<<<<<<<<<<<
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 */
        __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_v_st);
        __Pyx_GIVEREF(__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_st);
        __Pyx_INCREF(__pyx_v_pl);
        __Pyx_GIVEREF(__pyx_v_pl);
        PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_pl);
        __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Provided_strategy_index_d_out_of, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(2, 329, __pyx_L1_error)

        /* "pygambit/lib/stratspt.pxi":328
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 */
      }

      /* "pygambit/lib/stratspt.pxi":330
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st             # <<<<<<<<<<<<<<
 *             elif isinstance(st, str):
 *                 try:
 */
      if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_v_st) < 0)) __PYX_ERR(2, 330, __pyx_L1_error)

      /* "pygambit/lib/stratspt.pxi":327
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):             # <<<<<<<<<<<<<<
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 */
      goto __pyx_L14;
    }

    /* "pygambit/lib/stratspt.pxi":331
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 *             elif isinstance(st, str):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 */
    __pyx_t_12 = PyString_Check(__pyx_v_st); 
    __pyx_t_7 = (__pyx_t_12 != 0);
    if (__pyx_t_7) {

      /* "pygambit/lib/stratspt.pxi":332
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_1);
        /*try:*/ {

          /* "pygambit/lib/stratspt.pxi":333
 *             elif isinstance(st, str):
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)             # <<<<<<<<<<<<<<
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 */
          { /* enter inner scope */
            __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 333, __pyx_L28_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 333, __pyx_L28_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_t_14, __pyx_v_pl); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 333, __pyx_L28_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_strategies); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 333, __pyx_L28_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
              __pyx_t_15 = __pyx_t_14; __Pyx_INCREF(__pyx_t_15); __pyx_t_4 = 0;
              __pyx_t_16 = NULL;
            } else {
              __pyx_t_4 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 333, __pyx_L28_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 333, __pyx_L28_error)
            }
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            for (;;) {
              if (likely(!__pyx_t_16)) {
                if (likely(PyList_CheckExact(__pyx_t_15))) {
                  if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_15)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_14 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 333, __pyx_L28_error)
                  #else
                  __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 333, __pyx_L28_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  #endif
                } else {
                  if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 333, __pyx_L28_error)
                  #else
                  __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 333, __pyx_L28_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  #endif
                }
              } else {
                __pyx_t_14 = __pyx_t_16(__pyx_t_15);
                if (unlikely(!__pyx_t_14)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(2, 333, __pyx_L28_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_14);
              }
              __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_s, __pyx_t_14);
              __pyx_t_14 = 0;
              __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr7__pyx_v_s, __pyx_n_s_label); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 333, __pyx_L28_error)
              __Pyx_GOTREF(__pyx_t_14);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_14))) __PYX_ERR(2, 333, __pyx_L28_error)
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_s); __pyx_8genexpr7__pyx_v_s = 0;
            goto __pyx_L31_exit_scope;
            __pyx_L28_error:;
            __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_s); __pyx_8genexpr7__pyx_v_s = 0;
            goto __pyx_L18_error;
            __pyx_L31_exit_scope:;
          } /* exit inner scope */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 333, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_5 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_13, __pyx_v_st) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_st);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 333, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_t_5) < 0)) __PYX_ERR(2, 333, __pyx_L18_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "pygambit/lib/stratspt.pxi":332
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
        }
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L25_try_end;
        __pyx_L18_error:;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "pygambit/lib/stratspt.pxi":334
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 */
        __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_8) {
          __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_15, &__pyx_t_13) < 0) __PYX_ERR(2, 334, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_13);

          /* "pygambit/lib/stratspt.pxi":335
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st             # <<<<<<<<<<<<<<
 *             elif isinstance(st, Strategy):
 *                 try:
 */
          __pyx_t_14 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Provided_strategy_label_s_not_de, __pyx_v_st); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 335, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_14, 0, 0);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __PYX_ERR(2, 335, __pyx_L20_except_error)
        }
        goto __pyx_L20_except_error;
        __pyx_L20_except_error:;

        /* "pygambit/lib/stratspt.pxi":332
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
        goto __pyx_L1_error;
        __pyx_L25_try_end:;
      }

      /* "pygambit/lib/stratspt.pxi":331
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 *             elif isinstance(st, str):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 */
      goto __pyx_L14;
    }

    /* "pygambit/lib/stratspt.pxi":336
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 */
    __pyx_t_7 = __Pyx_TypeCheck(__pyx_v_st, __pyx_ptype_8pygambit_3lib_9libgambit_Strategy); 
    __pyx_t_12 = (__pyx_t_7 != 0);
    if (likely(__pyx_t_12)) {

      /* "pygambit/lib/stratspt.pxi":337
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_3);
        /*try:*/ {

          /* "pygambit/lib/stratspt.pxi":338
 *             elif isinstance(st, Strategy):
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)             # <<<<<<<<<<<<<<
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 338, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_15, __pyx_v_pl); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 338, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_strategies); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 338, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PySequence_List(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 338, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 338, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_13 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_5, __pyx_v_st) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_st);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 338, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_t_13) < 0)) __PYX_ERR(2, 338, __pyx_L34_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "pygambit/lib/stratspt.pxi":337
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
        }
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L41_try_end;
        __pyx_L34_error:;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "pygambit/lib/stratspt.pxi":339
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 */
        __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_8) {
          __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_15, &__pyx_t_5) < 0) __PYX_ERR(2, 339, __pyx_L36_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_5);

          /* "pygambit/lib/stratspt.pxi":340
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")
 */
          __pyx_t_14 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Provided_strategy_s_not_availabl, __pyx_v_st); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 340, __pyx_L36_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_14, 0, 0);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __PYX_ERR(2, 340, __pyx_L36_except_error)
        }
        goto __pyx_L36_except_error;
        __pyx_L36_except_error:;

        /* "pygambit/lib/stratspt.pxi":337
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
        goto __pyx_L1_error;
        __pyx_L41_try_end:;
      }

      /* "pygambit/lib/stratspt.pxi":336
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 */
      goto __pyx_L14;
    }

    /* "pygambit/lib/stratspt.pxi":342
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")             # <<<<<<<<<<<<<<
 *         return self._get_contingency(*tuple(cont))
 * 
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 342, __pyx_L1_error)
    }
    __pyx_L14:;

    /* "pygambit/lib/stratspt.pxi":326
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):             # <<<<<<<<<<<<<<
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "pygambit/lib/stratspt.pxi":343
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")
 *         return self._get_contingency(*tuple(cont))             # <<<<<<<<<<<<<<
 * 
 *     def mixed_strategy_profile(self, rational=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_contingency); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = PyList_AsTuple(__pyx_v_cont); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/stratspt.pxi":319
 *     # to __getitem__, which is required for multidimensional slicing to work.
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(i) != len(self.players):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cont);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/stratspt.pxi":345
 *         return self._get_contingency(*tuple(cont))
 * 
 *     def mixed_strategy_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mspd
 *         cdef MixedStrategyProfileRational mspr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_25mixed_strategy_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_25mixed_strategy_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rational = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mixed_strategy_profile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rational,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rational);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mixed_strategy_profile") < 0)) __PYX_ERR(2, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rational = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mixed_strategy_profile", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.mixed_strategy_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_24mixed_strategy_profile(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), __pyx_v_rational);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_24mixed_strategy_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_rational) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_mspd = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_mspr = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mixed_strategy_profile", 0);

  /* "pygambit/lib/stratspt.pxi":349
 *         cdef MixedStrategyProfileRational mspr
 *         cdef c_Rational dummy_rat
 *         if not rational:             # <<<<<<<<<<<<<<
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rational); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 349, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/stratspt.pxi":350
 *         cdef c_Rational dummy_rat
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())
 *             return mspd
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_mspd = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/stratspt.pxi":351
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())             # <<<<<<<<<<<<<<
 *             return mspd
 *         else:
 */
    __pyx_v_mspd->profile = new MixedStrategyProfile<double> ((*__pyx_v_self->support).NewMixedStrategyProfile<double>());

    /* "pygambit/lib/stratspt.pxi":352
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())
 *             return mspd             # <<<<<<<<<<<<<<
 *         else:
 *             mspr = MixedStrategyProfileRational()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_mspd));
    __pyx_r = ((PyObject *)__pyx_v_mspd);
    goto __pyx_L0;

    /* "pygambit/lib/stratspt.pxi":349
 *         cdef MixedStrategyProfileRational mspr
 *         cdef c_Rational dummy_rat
 *         if not rational:             # <<<<<<<<<<<<<<
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())
 */
  }

  /* "pygambit/lib/stratspt.pxi":354
 *             return mspd
 *         else:
 *             mspr = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             mspr.profile = new c_MixedStrategyProfileRational(deref(self.support).NewMixedStrategyProfileRational())
 *             return mspr
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_mspr = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/stratspt.pxi":355
 *         else:
 *             mspr = MixedStrategyProfileRational()
 *             mspr.profile = new c_MixedStrategyProfileRational(deref(self.support).NewMixedStrategyProfileRational())             # <<<<<<<<<<<<<<
 *             return mspr
 */
    __pyx_v_mspr->profile = new MixedStrategyProfile<Rational> ((*__pyx_v_self->support).NewMixedStrategyProfile<Rational>());

    /* "pygambit/lib/stratspt.pxi":356
 *             mspr = MixedStrategyProfileRational()
 *             mspr.profile = new c_MixedStrategyProfileRational(deref(self.support).NewMixedStrategyProfileRational())
 *             return mspr             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_mspr));
    __pyx_r = ((PyObject *)__pyx_v_mspr);
    goto __pyx_L0;
  }

  /* "pygambit/lib/stratspt.pxi":345
 *         return self._get_contingency(*tuple(cont))
 * 
 *     def mixed_strategy_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mspd
 *         cdef MixedStrategyProfileRational mspr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.mixed_strategy_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mspd);
  __Pyx_XDECREF((PyObject *)__pyx_v_mspr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_26__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_28__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20StrategicRestriction_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.StrategicRestriction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":33
 * 
 * cdef class MixedStrategyProfile(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str([ self[player] for player in self.game.players ])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile___repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_8genexpr8__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/mixed.pxi":34
 * cdef class MixedStrategyProfile(object):
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])             # <<<<<<<<<<<<<<
 * 
 *     def _repr_latex_(self):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 34, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 34, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 34, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 34, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 34, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 34, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 34, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 34, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 34, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 34, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_player, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_8genexpr8__pyx_v_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 34, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 34, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_player); __pyx_8genexpr8__pyx_v_player = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_player); __pyx_8genexpr8__pyx_v_player = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":33
 * 
 * cdef class MixedStrategyProfile(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str([ self[player] for player in self.game.players ])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":36
 *         return str([ self[player] for player in self.game.players ])
 * 
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_3_repr_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_3_repr_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_2_repr_latex_(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_2_repr_latex_(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_8genexpr9__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);

  /* "pygambit/lib/mixed.pxi":37
 * 
 *     def _repr_latex_(self):
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 37, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 37, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 37, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 37, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr9__pyx_v_player, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_8genexpr9__pyx_v_player); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 37, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 37, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_replace); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 37, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 37, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_player); __pyx_8genexpr9__pyx_v_player = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_player); __pyx_8genexpr9__pyx_v_player = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__30, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":36
 *         return str([ self[player] for player in self.game.players ])
 * 
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":39
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if whichop == 0:
 *             return list(self) < list(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(1, 39, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_4__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_4__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/mixed.pxi":40
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 *         if whichop == 0:             # <<<<<<<<<<<<<<
 *             return list(self) < list(other)
 *         elif whichop == 1:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":41
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 *         if whichop == 0:
 *             return list(self) < list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":40
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 *         if whichop == 0:             # <<<<<<<<<<<<<<
 *             return list(self) < list(other)
 *         elif whichop == 1:
 */
  }

  /* "pygambit/lib/mixed.pxi":42
 *         if whichop == 0:
 *             return list(self) < list(other)
 *         elif whichop == 1:             # <<<<<<<<<<<<<<
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":43
 *             return list(self) < list(other)
 *         elif whichop == 1:
 *             return list(self) <= list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 2:
 *             return list(self) == list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":42
 *         if whichop == 0:
 *             return list(self) < list(other)
 *         elif whichop == 1:             # <<<<<<<<<<<<<<
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 */
  }

  /* "pygambit/lib/mixed.pxi":44
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 *         elif whichop == 2:             # <<<<<<<<<<<<<<
 *             return list(self) == list(other)
 *         elif whichop == 3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":45
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 *             return list(self) == list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 3:
 *             return list(self) != list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":44
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 *         elif whichop == 2:             # <<<<<<<<<<<<<<
 *             return list(self) == list(other)
 *         elif whichop == 3:
 */
  }

  /* "pygambit/lib/mixed.pxi":46
 *         elif whichop == 2:
 *             return list(self) == list(other)
 *         elif whichop == 3:             # <<<<<<<<<<<<<<
 *             return list(self) != list(other)
 *         elif whichop == 4:
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":47
 *             return list(self) == list(other)
 *         elif whichop == 3:
 *             return list(self) != list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 4:
 *             return list(self) > list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":46
 *         elif whichop == 2:
 *             return list(self) == list(other)
 *         elif whichop == 3:             # <<<<<<<<<<<<<<
 *             return list(self) != list(other)
 *         elif whichop == 4:
 */
  }

  /* "pygambit/lib/mixed.pxi":48
 *         elif whichop == 3:
 *             return list(self) != list(other)
 *         elif whichop == 4:             # <<<<<<<<<<<<<<
 *             return list(self) > list(other)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":49
 *             return list(self) != list(other)
 *         elif whichop == 4:
 *             return list(self) > list(other)             # <<<<<<<<<<<<<<
 *         else:
 *             return list(self) >= list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":48
 *         elif whichop == 3:
 *             return list(self) != list(other)
 *         elif whichop == 4:             # <<<<<<<<<<<<<<
 *             return list(self) > list(other)
 *         else:
 */
  }

  /* "pygambit/lib/mixed.pxi":51
 *             return list(self) > list(other)
 *         else:
 *             return list(self) >= list(other)             # <<<<<<<<<<<<<<
 * 
 *     def _resolve_index(self, index, players=True):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/mixed.pxi":39
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if whichop == 0:
 *             return list(self) < list(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":53
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_7_resolve_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_7_resolve_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_players = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_resolve_index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_players,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_players);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_resolve_index") < 0)) __PYX_ERR(1, 53, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
    __pyx_v_players = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_resolve_index", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 53, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile._resolve_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_6_resolve_index(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_index, __pyx_v_players);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":63
 *         else:
 *             # if no player matches, check strategy labels
 *             strategies = functools.reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                                           [list(p.strategies)
 *                                            for p in self.game.players])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4 = {"lambda4", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda4", 1, 2, 2, 1); __PYX_ERR(1, 63, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda4") < 0)) __PYX_ERR(1, 63, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda4", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 63, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile._resolve_index.lambda4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda4(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda4", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile._resolve_index.lambda4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":66
 *                                           [list(p.strategies)
 *                                            for p in self.game.players])
 *             matches = list(filter(lambda x: x.label==index, strategies))             # <<<<<<<<<<<<<<
 *             if len(matches) == 1:
 *                 return matches[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5 = {"lambda5", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda5 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda5(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda5(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *__pyx_cur_scope;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda5", 0);
  __pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_index)) { __Pyx_RaiseClosureNameError("index"); __PYX_ERR(1, 66, __pyx_L1_error) }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_cur_scope->__pyx_v_index, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile._resolve_index.lambda5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":53
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_6_resolve_index(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_players) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *__pyx_cur_scope;
  PyObject *__pyx_v_strategies = NULL;
  PyObject *__pyx_v_matches = NULL;
  PyObject *__pyx_9genexpr10__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_resolve_index", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 53, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_index = __pyx_v_index;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_index);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_index);

  /* "pygambit/lib/mixed.pxi":55
 *     def _resolve_index(self, index, players=True):
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:             # <<<<<<<<<<<<<<
 *             try:
 *                 # first check to see if string is referring to a player
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_players); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 55, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pygambit/lib/mixed.pxi":56
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "pygambit/lib/mixed.pxi":58
 *             try:
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]             # <<<<<<<<<<<<<<
 *             except IndexError:
 *                 pass
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 58, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 58, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 58, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8_try_return;

        /* "pygambit/lib/mixed.pxi":56
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
      }
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pygambit/lib/mixed.pxi":59
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 *             except IndexError:             # <<<<<<<<<<<<<<
 *                 pass
 *         else:
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IndexError);
      if (__pyx_t_7) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "pygambit/lib/mixed.pxi":56
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    }

    /* "pygambit/lib/mixed.pxi":55
 *     def _resolve_index(self, index, players=True):
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:             # <<<<<<<<<<<<<<
 *             try:
 *                 # first check to see if string is referring to a player
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/mixed.pxi":63
 *         else:
 *             # if no player matches, check strategy labels
 *             strategies = functools.reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                                           [list(p.strategies)
 *                                            for p in self.game.players])
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_functools); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_reduce); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4, 0, __pyx_n_s_resolve_index_locals_lambda, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    { /* enter inner scope */

      /* "pygambit/lib/mixed.pxi":64
 *             # if no player matches, check strategy labels
 *             strategies = functools.reduce(lambda x,y: x+y,
 *                                           [list(p.strategies)             # <<<<<<<<<<<<<<
 *                                            for p in self.game.players])
 *             matches = list(filter(lambda x: x.label==index, strategies))
 */
      __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 64, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_9);

      /* "pygambit/lib/mixed.pxi":65
 *             strategies = functools.reduce(lambda x,y: x+y,
 *                                           [list(p.strategies)
 *                                            for p in self.game.players])             # <<<<<<<<<<<<<<
 *             matches = list(filter(lambda x: x.label==index, strategies))
 *             if len(matches) == 1:
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 65, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_players); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 65, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
        __pyx_t_10 = __pyx_t_11; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 65, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 65, __pyx_L12_error)
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_10))) {
            if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_11); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(1, 65, __pyx_L12_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 65, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_11); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(1, 65, __pyx_L12_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 65, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_13(__pyx_t_10);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 65, __pyx_L12_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr10__pyx_v_p, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "pygambit/lib/mixed.pxi":64
 *             # if no player matches, check strategy labels
 *             strategies = functools.reduce(lambda x,y: x+y,
 *                                           [list(p.strategies)             # <<<<<<<<<<<<<<
 *                                            for p in self.game.players])
 *             matches = list(filter(lambda x: x.label==index, strategies))
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr10__pyx_v_p, __pyx_n_s_strategies); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 64, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_14 = PySequence_List(__pyx_t_11); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 64, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_14))) __PYX_ERR(1, 64, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "pygambit/lib/mixed.pxi":65
 *             strategies = functools.reduce(lambda x,y: x+y,
 *                                           [list(p.strategies)
 *                                            for p in self.game.players])             # <<<<<<<<<<<<<<
 *             matches = list(filter(lambda x: x.label==index, strategies))
 *             if len(matches) == 1:
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_p); __pyx_9genexpr10__pyx_v_p = 0;
      goto __pyx_L15_exit_scope;
      __pyx_L12_error:;
      __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_p); __pyx_9genexpr10__pyx_v_p = 0;
      goto __pyx_L1_error;
      __pyx_L15_exit_scope:;
    } /* exit inner scope */
    __pyx_t_10 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_6, __pyx_t_9};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 63, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_6, __pyx_t_9};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 63, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 63, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_7, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_7, __pyx_t_9);
      __pyx_t_6 = 0;
      __pyx_t_9 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 63, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_strategies = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":66
 *                                           [list(p.strategies)
 *                                            for p in self.game.players])
 *             matches = list(filter(lambda x: x.label==index, strategies))             # <<<<<<<<<<<<<<
 *             if len(matches) == 1:
 *                 return matches[0]
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5, 0, __pyx_n_s_resolve_index_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_strategies);
    __Pyx_GIVEREF(__pyx_v_strategies);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_strategies);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_matches = ((PyObject*)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "pygambit/lib/mixed.pxi":67
 *                                            for p in self.game.players])
 *             matches = list(filter(lambda x: x.label==index, strategies))
 *             if len(matches) == 1:             # <<<<<<<<<<<<<<
 *                 return matches[0]
 *             elif len(matches) == 0:
 */
    __pyx_t_12 = PyList_GET_SIZE(__pyx_v_matches); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(1, 67, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_12 == 1) != 0);
    if (__pyx_t_1) {

      /* "pygambit/lib/mixed.pxi":68
 *             matches = list(filter(lambda x: x.label==index, strategies))
 *             if len(matches) == 1:
 *                 return matches[0]             # <<<<<<<<<<<<<<
 *             elif len(matches) == 0:
 *                 if players:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_matches, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 68, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/mixed.pxi":67
 *                                            for p in self.game.players])
 *             matches = list(filter(lambda x: x.label==index, strategies))
 *             if len(matches) == 1:             # <<<<<<<<<<<<<<
 *                 return matches[0]
 *             elif len(matches) == 0:
 */
    }

    /* "pygambit/lib/mixed.pxi":69
 *             if len(matches) == 1:
 *                 return matches[0]
 *             elif len(matches) == 0:             # <<<<<<<<<<<<<<
 *                 if players:
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 */
    __pyx_t_12 = PyList_GET_SIZE(__pyx_v_matches); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(1, 69, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_12 == 0) != 0);
    if (likely(__pyx_t_1)) {

      /* "pygambit/lib/mixed.pxi":70
 *                 return matches[0]
 *             elif len(matches) == 0:
 *                 if players:             # <<<<<<<<<<<<<<
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 *                 else:
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_players); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 70, __pyx_L1_error)
      if (unlikely(__pyx_t_1)) {

        /* "pygambit/lib/mixed.pxi":71
 *             elif len(matches) == 0:
 *                 if players:
 *                     raise IndexError("no player or strategy matching label '%s'" % index)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise IndexError("no strategy matching label '%s'" % index)
 */
        __pyx_t_8 = __Pyx_PyString_FormatSafe(__pyx_kp_s_no_player_or_strategy_matching_l, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 71, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 71, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(1, 71, __pyx_L1_error)

        /* "pygambit/lib/mixed.pxi":70
 *                 return matches[0]
 *             elif len(matches) == 0:
 *                 if players:             # <<<<<<<<<<<<<<
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 *                 else:
 */
      }

      /* "pygambit/lib/mixed.pxi":73
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 *                 else:
 *                     raise IndexError("no strategy matching label '%s'" % index)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise IndexError("multiple strategies matching label '%s'" % index)
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_no_strategy_matching_label_s, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 73, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __PYX_ERR(1, 73, __pyx_L1_error)
      }

      /* "pygambit/lib/mixed.pxi":69
 *             if len(matches) == 1:
 *                 return matches[0]
 *             elif len(matches) == 0:             # <<<<<<<<<<<<<<
 *                 if players:
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 */
    }

    /* "pygambit/lib/mixed.pxi":75
 *                     raise IndexError("no strategy matching label '%s'" % index)
 *             else:
 *                 raise IndexError("multiple strategies matching label '%s'" % index)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, index):
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyString_FormatSafe(__pyx_kp_s_multiple_strategies_matching_lab, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 75, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "pygambit/lib/mixed.pxi":53
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile._resolve_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strategies);
  __Pyx_XDECREF(__pyx_v_matches);
  __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_p);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":77
 *                 raise IndexError("multiple strategies matching label '%s'" % index)
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_8__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":84
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_profile = 0;
  PyObject *__pyx_v_player = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_profile,&__pyx_n_s_player,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(1, 84, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(1, 84, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 84, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_profile = values[1];
    __pyx_v_player = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 84, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy___init__(__pyx_self, __pyx_v_self, __pyx_v_profile, __pyx_v_player);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pygambit/lib/mixed.pxi":85
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):
 *                     self.profile = profile             # <<<<<<<<<<<<<<
 *                     self.player = player
 *                 def __eq__(self, other):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_profile, __pyx_v_profile) < 0) __PYX_ERR(1, 85, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":86
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 *                     self.player = player             # <<<<<<<<<<<<<<
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_player, __pyx_v_player) < 0) __PYX_ERR(1, 86, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":84
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":87
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__ = {"__eq__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_other = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_other,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, 1); __PYX_ERR(1, 87, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__eq__") < 0)) __PYX_ERR(1, 87, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 87, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_2__eq__(__pyx_self, __pyx_v_self, __pyx_v_other);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "pygambit/lib/mixed.pxi":88
 *                     self.player = player
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)             # <<<<<<<<<<<<<<
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":87
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":89
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__ = {"__len__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_4__len__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/mixed.pxi":90
 *                     return list(self) == list(other)
 *                 def __len__(self):
 *                     return len(self.player.strategies)             # <<<<<<<<<<<<<<
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_strategies); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":89
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":91
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__ = {"__repr__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_6__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/mixed.pxi":92
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))             # <<<<<<<<<<<<<<
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":91
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":93
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_ = {"_repr_latex_", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_8_repr_latex_(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pygambit/lib/mixed.pxi":95
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 95, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_getitem___locals_MixedStrategy, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!gen)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy._repr_latex_.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 95, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(1, 95, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_strategies); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 95, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 95, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 95, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 95, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 95, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 95, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(1, 95, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 95, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":93
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *__pyx_cur_scope;
  PyObject *__pyx_gb_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 93, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "pygambit/lib/mixed.pxi":94
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 *                     else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pygambit/lib/mixed.pxi":95
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s__30, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":94
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 *                     else:
 */
  }

  /* "pygambit/lib/mixed.pxi":97
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 *                     else:
 *                        return repr(self)             # <<<<<<<<<<<<<<
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_self;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/mixed.pxi":93
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__2generator);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":98
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__ = {"__getitem__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, 1); __PYX_ERR(1, 98, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__getitem__") < 0)) __PYX_ERR(1, 98, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 98, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_10__getitem__(__pyx_self, __pyx_v_self, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/mixed.pxi":99
 *                        return repr(self)
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]             # <<<<<<<<<<<<<<
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.strategies[index]] = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strategies); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":98
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":100
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__ = {"__setitem__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 1); __PYX_ERR(1, 100, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 2); __PYX_ERR(1, 100, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__setitem__") < 0)) __PYX_ERR(1, 100, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 100, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12__setitem__(__pyx_self, __pyx_v_self, __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pygambit/lib/mixed.pxi":101
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.strategies[index]] = value             # <<<<<<<<<<<<<<
 *             return MixedStrategy(self, index)
 *         elif isinstance(index, str):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strategies); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_2, __pyx_v_value) < 0)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/mixed.pxi":100
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":77
 *                 raise IndexError("multiple strategies matching label '%s'" % index)
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_8__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_MixedStrategy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/mixed.pxi":78
 * 
 *     def __getitem__(self, index):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":79
 *     def __getitem__(self, index):
 *         if isinstance(index, int):
 *             return self._getprob(index+1)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Strategy):
 *             return self._getprob_strategy(index)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getprob); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":78
 * 
 *     def __getitem__(self, index):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):
 */
  }

  /* "pygambit/lib/mixed.pxi":80
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):             # <<<<<<<<<<<<<<
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/mixed.pxi":81
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):
 *             return self._getprob_strategy(index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getprob_strategy); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":80
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):             # <<<<<<<<<<<<<<
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):
 */
  }

  /* "pygambit/lib/mixed.pxi":82
 *         elif isinstance(index, Strategy):
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":83
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
    __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__48); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_tuple__48, __pyx_n_s_MixedStrategy, __pyx_n_s_getitem___locals_MixedStrategy_2, (PyObject *) NULL, __pyx_n_s_pygambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "pygambit/lib/mixed.pxi":84
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__, 0, __pyx_n_s_getitem___locals_MixedStrategy_3, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":87
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__, 0, __pyx_n_s_getitem___locals_MixedStrategy_4, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_eq, __pyx_t_5) < 0) __PYX_ERR(1, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":89
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__, 0, __pyx_n_s_getitem___locals_MixedStrategy_5, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_len, __pyx_t_5) < 0) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":91
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__, 0, __pyx_n_s_getitem___locals_MixedStrategy_6, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_repr, __pyx_t_5) < 0) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":93
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_, 0, __pyx_n_s_getitem___locals_MixedStrategy_7, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_repr_latex, __pyx_t_5) < 0) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":98
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__, 0, __pyx_n_s_getitem___locals_MixedStrategy_8, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_getitem, __pyx_t_5) < 0) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":100
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__, 0, __pyx_n_s_getitem___locals_MixedStrategy_9, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_setitem, __pyx_t_5) < 0) __PYX_ERR(1, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":83
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
    __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_MixedStrategy, __pyx_tuple__48, __pyx_t_4, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_MixedStrategy = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/mixed.pxi":102
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, str):
 *             return self[self._resolve_index(index, players=True)]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_index);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_v_MixedStrategy, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":82
 *         elif isinstance(index, Strategy):
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):
 */
  }

  /* "pygambit/lib/mixed.pxi":103
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 */
  __pyx_t_2 = PyString_Check(__pyx_v_index); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "pygambit/lib/mixed.pxi":104
 *             return MixedStrategy(self, index)
 *         elif isinstance(index, str):
 *             return self[self._resolve_index(index, players=True)]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_True) < 0) __PYX_ERR(1, 104, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":103
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 */
  }

  /* "pygambit/lib/mixed.pxi":106
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "pygambit/lib/mixed.pxi":107
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %
 *                             index.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, index, value):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":106
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
    __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_indexes_must_be_int_str, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(1, 106, __pyx_L1_error)
  }

  /* "pygambit/lib/mixed.pxi":77
 *                 raise IndexError("multiple strategies matching label '%s'" % index)
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_MixedStrategy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":109
 *                             index.__class__.__name__)
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_10__setitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_10__setitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pygambit/lib/mixed.pxi":110
 * 
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":111
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Strategy):
 *             self._setprob_strategy(index, value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setprob); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 111, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 111, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_5);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/mixed.pxi":110
 * 
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/mixed.pxi":112
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):             # <<<<<<<<<<<<<<
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/mixed.pxi":113
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):
 *             self._setprob_strategy(index, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Player):
 *             self._setprob_player(index, value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setprob_strategy); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_index);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/mixed.pxi":112
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):             # <<<<<<<<<<<<<<
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/mixed.pxi":114
 *         elif isinstance(index, Strategy):
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":115
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):
 *             self._setprob_player(index, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, str):
 *             self[self._resolve_index(index)] = value
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setprob_player); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 115, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 115, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_index);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/mixed.pxi":114
 *         elif isinstance(index, Strategy):
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/mixed.pxi":116
 *         elif isinstance(index, Player):
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             self[self._resolve_index(index)] = value
 *         else:
 */
  __pyx_t_2 = PyString_Check(__pyx_v_index); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "pygambit/lib/mixed.pxi":117
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):
 *             self[self._resolve_index(index)] = value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self), __pyx_t_3, __pyx_v_value) < 0)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/mixed.pxi":116
 *         elif isinstance(index, Player):
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             self[self._resolve_index(index)] = value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/mixed.pxi":119
 *             self[self._resolve_index(index)] = value
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "pygambit/lib/mixed.pxi":120
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %
 *                             index.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def _setprob_player(self, Player player, value):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/mixed.pxi":119
 *             self[self._resolve_index(index)] = value
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_indexes_must_be_int_str, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 119, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/mixed.pxi":109
 *                             index.__class__.__name__)
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":122
 *                             index.__class__.__name__)
 * 
 *     def _setprob_player(self, Player player, value):             # <<<<<<<<<<<<<<
 *         class Filler(object): pass
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_13_setprob_player(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_13_setprob_player(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob_player (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob_player", 1, 2, 2, 1); __PYX_ERR(1, 122, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob_player") < 0)) __PYX_ERR(1, 122, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_player = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob_player", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile._setprob_player", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_8pygambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(1, 122, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_12_setprob_player(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_player, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_12_setprob_player(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_Filler = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setprob_player", 0);

  /* "pygambit/lib/mixed.pxi":123
 * 
 *     def _setprob_player(self, Player player, value):
 *         class Filler(object): pass             # <<<<<<<<<<<<<<
 *         try:
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):
 */
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__63); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1, __pyx_tuple__63, __pyx_n_s_Filler, __pyx_n_s_setprob_player_locals_Filler, (PyObject *) NULL, __pyx_n_s_pygambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_Filler, __pyx_tuple__63, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_Filler = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":124
 *     def _setprob_player(self, Player player, value):
 *         class Filler(object): pass
 *         try:             # <<<<<<<<<<<<<<
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "pygambit/lib/mixed.pxi":125
 *         class Filler(object): pass
 *         try:
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):             # <<<<<<<<<<<<<<
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_zip_longest); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_player), __pyx_n_s_strategies); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 125, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 125, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_value);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 125, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_v_Filler); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 125, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fillvalue, __pyx_t_7) < 0) __PYX_ERR(1, 125, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 125, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_2 = __pyx_t_7; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 125, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 125, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 125, __pyx_L3_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 125, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 125, __pyx_L3_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 125, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_9(__pyx_t_2);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 125, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
          PyObject* sequence = __pyx_t_7;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(1, 125, __pyx_L3_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          #else
          __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 125, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_10 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 125, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
          index = 0; __pyx_t_3 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_3)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_3);
          index = 1; __pyx_t_1 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_1)) goto __pyx_L11_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_1);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(1, 125, __pyx_L3_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L12_unpacking_done;
          __pyx_L11_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(1, 125, __pyx_L3_error)
          __pyx_L12_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "pygambit/lib/mixed.pxi":126
 *         try:
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):             # <<<<<<<<<<<<<<
 *                      raise ValueError("must specify exactly one value per strategy")
 *                 self[s] = v
 */
        __pyx_t_13 = PyObject_IsInstance(__pyx_v_s, __pyx_v_Filler); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(1, 126, __pyx_L3_error)
        __pyx_t_14 = (__pyx_t_13 != 0);
        if (!__pyx_t_14) {
        } else {
          __pyx_t_12 = __pyx_t_14;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_14 = PyObject_IsInstance(__pyx_v_v, __pyx_v_Filler); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 126, __pyx_L3_error)
        __pyx_t_13 = (__pyx_t_14 != 0);
        __pyx_t_12 = __pyx_t_13;
        __pyx_L14_bool_binop_done:;
        if (unlikely(__pyx_t_12)) {

          /* "pygambit/lib/mixed.pxi":127
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")             # <<<<<<<<<<<<<<
 *                 self[s] = v
 *         except TypeError as e:
 */
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 127, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_Raise(__pyx_t_7, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __PYX_ERR(1, 127, __pyx_L3_error)

          /* "pygambit/lib/mixed.pxi":126
 *         try:
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):             # <<<<<<<<<<<<<<
 *                      raise ValueError("must specify exactly one value per strategy")
 *                 self[s] = v
 */
        }

        /* "pygambit/lib/mixed.pxi":128
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")
 *                 self[s] = v             # <<<<<<<<<<<<<<
 *         except TypeError as e:
 *             if "must support iteration" in str(e):
 */
        if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self), __pyx_v_s, __pyx_v_v) < 0)) __PYX_ERR(1, 128, __pyx_L3_error)

        /* "pygambit/lib/mixed.pxi":125
 *         class Filler(object): pass
 *         try:
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):             # <<<<<<<<<<<<<<
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pygambit/lib/mixed.pxi":124
 *     def _setprob_player(self, Player player, value):
 *         class Filler(object): pass
 *         try:             # <<<<<<<<<<<<<<
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 */
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pygambit/lib/mixed.pxi":129
 *                      raise ValueError("must specify exactly one value per strategy")
 *                 self[s] = v
 *         except TypeError as e:             # <<<<<<<<<<<<<<
 *             if "must support iteration" in str(e):
 *                 raise TypeError("value vector must support iteration")
 */
    __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_15) {
      __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile._setprob_player", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_1) < 0) __PYX_ERR(1, 129, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __pyx_v_e = __pyx_t_7;
      /*try:*/ {

        /* "pygambit/lib/mixed.pxi":130
 *                 self[s] = v
 *         except TypeError as e:
 *             if "must support iteration" in str(e):             # <<<<<<<<<<<<<<
 *                 raise TypeError("value vector must support iteration")
 *             else:
 */
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_e); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 130, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_must_support_iteration, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(1, 130, __pyx_L21_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_13 = (__pyx_t_12 != 0);
        if (unlikely(__pyx_t_13)) {

          /* "pygambit/lib/mixed.pxi":131
 *         except TypeError as e:
 *             if "must support iteration" in str(e):
 *                 raise TypeError("value vector must support iteration")             # <<<<<<<<<<<<<<
 *             else:
 *                 raise e
 */
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 131, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_Raise(__pyx_t_3, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __PYX_ERR(1, 131, __pyx_L21_error)

          /* "pygambit/lib/mixed.pxi":130
 *                 self[s] = v
 *         except TypeError as e:
 *             if "must support iteration" in str(e):             # <<<<<<<<<<<<<<
 *                 raise TypeError("value vector must support iteration")
 *             else:
 */
        }

        /* "pygambit/lib/mixed.pxi":133
 *                 raise TypeError("value vector must support iteration")
 *             else:
 *                 raise e             # <<<<<<<<<<<<<<
 * 
 *     def payoff(self, player=None):
 */
        /*else*/ {
          __Pyx_Raise(__pyx_v_e, 0, 0, 0);
          __PYX_ERR(1, 133, __pyx_L21_error)
        }
      }

      /* "pygambit/lib/mixed.pxi":129
 *                      raise ValueError("must specify exactly one value per strategy")
 *                 self[s] = v
 *         except TypeError as e:             # <<<<<<<<<<<<<<
 *             if "must support iteration" in str(e):
 *                 raise TypeError("value vector must support iteration")
 */
      /*finally:*/ {
        __pyx_L21_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __pyx_t_15 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
          }
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
          __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
          goto __pyx_L5_except_error;
        }
      }
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "pygambit/lib/mixed.pxi":124
 *     def _setprob_player(self, Player player, value):
 *         class Filler(object): pass
 *         try:             # <<<<<<<<<<<<<<
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 */
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "pygambit/lib/mixed.pxi":122
 *                             index.__class__.__name__)
 * 
 *     def _setprob_player(self, Player player, value):             # <<<<<<<<<<<<<<
 *         class Filler(object): pass
 *         try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile._setprob_player", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Filler);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":135
 *                 raise e
 * 
 *     def payoff(self, player=None):             # <<<<<<<<<<<<<<
 *         if player is None:
 *             return [self._payoff(player) for player in self.game.players]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_15payoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_15payoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("payoff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_player);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "payoff") < 0)) __PYX_ERR(1, 135, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_player = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("payoff", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 135, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_player);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_14payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_9genexpr12__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("payoff", 0);

  /* "pygambit/lib/mixed.pxi":136
 * 
 *     def payoff(self, player=None):
 *         if player is None:             # <<<<<<<<<<<<<<
 *             return [self._payoff(player) for player in self.game.players]
 *         elif isinstance(player, Player):
 */
  __pyx_t_1 = (__pyx_v_player == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":137
 *     def payoff(self, player=None):
 *         if player is None:
 *             return [self._payoff(player) for player in self.game.players]             # <<<<<<<<<<<<<<
 *         elif isinstance(player, Player):
 *             return self._payoff(player)
 */
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 137, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 137, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 137, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 137, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 137, __pyx_L6_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 137, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 137, __pyx_L6_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 137, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_7(__pyx_t_4);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 137, __pyx_L6_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr12__pyx_v_player, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 137, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_9genexpr12__pyx_v_player) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_9genexpr12__pyx_v_player);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 137, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 137, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_player); __pyx_9genexpr12__pyx_v_player = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_player); __pyx_9genexpr12__pyx_v_player = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":136
 * 
 *     def payoff(self, player=None):
 *         if player is None:             # <<<<<<<<<<<<<<
 *             return [self._payoff(player) for player in self.game.players]
 *         elif isinstance(player, Player):
 */
  }

  /* "pygambit/lib/mixed.pxi":138
 *         if player is None:
 *             return [self._payoff(player) for player in self.game.players]
 *         elif isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/mixed.pxi":139
 *             return [self._payoff(player) for player in self.game.players]
 *         elif isinstance(player, Player):
 *             return self._payoff(player)             # <<<<<<<<<<<<<<
 *         elif isinstance(player, (int, str)):
 *             return self.payoff(self.game.players[player])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_player) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_player);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":138
 *         if player is None:
 *             return [self._payoff(player) for player in self.game.players]
 *         elif isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):
 */
  }

  /* "pygambit/lib/mixed.pxi":140
 *         elif isinstance(player, Player):
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):             # <<<<<<<<<<<<<<
 *             return self.payoff(self.game.players[player])
 *         raise TypeError("argument should be an int, str, or Player instance; received {}"
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_player); 
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (!__pyx_t_10) {
  } else {
    __pyx_t_1 = __pyx_t_10;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_10 = PyString_Check(__pyx_v_player); 
  __pyx_t_2 = (__pyx_t_10 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L10_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":141
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):
 *             return self.payoff(self.game.players[player])             # <<<<<<<<<<<<<<
 *         raise TypeError("argument should be an int, str, or Player instance; received {}"
 *                         .format(player.__class__.__name__))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_player); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":140
 *         elif isinstance(player, Player):
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):             # <<<<<<<<<<<<<<
 *             return self.payoff(self.game.players[player])
 *         raise TypeError("argument should be an int, str, or Player instance; received {}"
 */
  }

  /* "pygambit/lib/mixed.pxi":143
 *             return self.payoff(self.game.players[player])
 *         raise TypeError("argument should be an int, str, or Player instance; received {}"
 *                         .format(player.__class__.__name__))             # <<<<<<<<<<<<<<
 * 
 *     def strategy_value(self, strategy):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_argument_should_be_an_int_str_or, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygambit/lib/mixed.pxi":142
 *         elif isinstance(player, (int, str)):
 *             return self.payoff(self.game.players[player])
 *         raise TypeError("argument should be an int, str, or Player instance; received {}"             # <<<<<<<<<<<<<<
 *                         .format(player.__class__.__name__))
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 142, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":135
 *                 raise e
 * 
 *     def payoff(self, player=None):             # <<<<<<<<<<<<<<
 *         if player is None:
 *             return [self._payoff(player) for player in self.game.players]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":145
 *                         .format(player.__class__.__name__))
 * 
 *     def strategy_value(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_17strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_17strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strategy_value (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_16strategy_value(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v_strategy));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_16strategy_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("strategy_value", 0);
  __Pyx_INCREF(__pyx_v_strategy);

  /* "pygambit/lib/mixed.pxi":146
 * 
 *     def strategy_value(self, strategy):
 *         if isinstance(strategy, str):             # <<<<<<<<<<<<<<
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_strategy); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":147
 *     def strategy_value(self, strategy):
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)             # <<<<<<<<<<<<<<
 *         elif not isinstance(strategy, Strategy):
 *             raise TypeError("argument should be a str or Strategy instance; received {}"
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_strategy);
    __Pyx_GIVEREF(__pyx_v_strategy);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_strategy);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(1, 147, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_strategy, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pygambit/lib/mixed.pxi":146
 * 
 *     def strategy_value(self, strategy):
 *         if isinstance(strategy, str):             # <<<<<<<<<<<<<<
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/mixed.pxi":148
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("argument should be a str or Strategy instance; received {}"
 * 	                    .format(strategy.__class__.__name__))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_strategy, __pyx_ptype_8pygambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pygambit/lib/mixed.pxi":150
 *         elif not isinstance(strategy, Strategy):
 *             raise TypeError("argument should be a str or Strategy instance; received {}"
 * 	                    .format(strategy.__class__.__name__))             # <<<<<<<<<<<<<<
 *         return self._strategy_value(strategy)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_argument_should_be_a_str_or_Stra, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_strategy, __pyx_n_s_class); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":149
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):
 *             raise TypeError("argument should be a str or Strategy instance; received {}"             # <<<<<<<<<<<<<<
 * 	                    .format(strategy.__class__.__name__))
 *         return self._strategy_value(strategy)
 */
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 149, __pyx_L1_error)

    /* "pygambit/lib/mixed.pxi":148
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("argument should be a str or Strategy instance; received {}"
 * 	                    .format(strategy.__class__.__name__))
 */
  }
  __pyx_L3:;

  /* "pygambit/lib/mixed.pxi":151
 *             raise TypeError("argument should be a str or Strategy instance; received {}"
 * 	                    .format(strategy.__class__.__name__))
 *         return self._strategy_value(strategy)             # <<<<<<<<<<<<<<
 * 
 *     def strategy_values(self, player=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategy_value); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_v_strategy) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_strategy);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":145
 *                         .format(player.__class__.__name__))
 * 
 *     def strategy_value(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.strategy_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strategy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":153
 *         return self._strategy_value(strategy)
 * 
 *     def strategy_values(self, player=None):             # <<<<<<<<<<<<<<
 *         if player is None:
 *             return [self.strategy_values(player) for player in self.game.players]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_19strategy_values(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_19strategy_values(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strategy_values (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_player);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "strategy_values") < 0)) __PYX_ERR(1, 153, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_player = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("strategy_values", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 153, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.strategy_values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_18strategy_values(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_player);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_18strategy_values(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_9genexpr13__pyx_v_player = NULL;
  PyObject *__pyx_9genexpr14__pyx_v_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("strategy_values", 0);
  __Pyx_INCREF(__pyx_v_player);

  /* "pygambit/lib/mixed.pxi":154
 * 
 *     def strategy_values(self, player=None):
 *         if player is None:             # <<<<<<<<<<<<<<
 *             return [self.strategy_values(player) for player in self.game.players]
 *         elif isinstance(player, str):
 */
  __pyx_t_1 = (__pyx_v_player == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":155
 *     def strategy_values(self, player=None):
 *         if player is None:
 *             return [self.strategy_values(player) for player in self.game.players]             # <<<<<<<<<<<<<<
 *         elif isinstance(player, str):
 *             player = self.game.players[player]
 */
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 155, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 155, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 155, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 155, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 155, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 155, __pyx_L6_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 155, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 155, __pyx_L6_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 155, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_7(__pyx_t_4);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 155, __pyx_L6_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr13__pyx_v_player, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategy_values); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 155, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_9genexpr13__pyx_v_player) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_9genexpr13__pyx_v_player);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 155, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 155, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_player); __pyx_9genexpr13__pyx_v_player = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_player); __pyx_9genexpr13__pyx_v_player = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/mixed.pxi":154
 * 
 *     def strategy_values(self, player=None):
 *         if player is None:             # <<<<<<<<<<<<<<
 *             return [self.strategy_values(player) for player in self.game.players]
 *         elif isinstance(player, str):
 */
  }

  /* "pygambit/lib/mixed.pxi":156
 *         if player is None:
 *             return [self.strategy_values(player) for player in self.game.players]
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 */
  __pyx_t_2 = PyString_Check(__pyx_v_player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/mixed.pxi":157
 *             return [self.strategy_values(player) for player in self.game.players]
 *         elif isinstance(player, str):
 *             player = self.game.players[player]             # <<<<<<<<<<<<<<
 *         elif not isinstance(player, Player):
 *             raise TypeError("argument should be a str or Player instance; received {}"
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_players); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_player, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/mixed.pxi":156
 *         if player is None:
 *             return [self.strategy_values(player) for player in self.game.players]
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/mixed.pxi":158
 *         elif isinstance(player, str):
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             raise TypeError("argument should be a str or Player instance; received {}"
 *                             .format(player.__class__.__name__))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/mixed.pxi":160
 *         elif not isinstance(player, Player):
 *             raise TypeError("argument should be a str or Player instance; received {}"
 *                             .format(player.__class__.__name__))             # <<<<<<<<<<<<<<
 *         return [self.strategy_value(item) for item in player.strategies]
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_argument_should_be_a_str_or_Play, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pygambit/lib/mixed.pxi":159
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 *             raise TypeError("argument should be a str or Player instance; received {}"             # <<<<<<<<<<<<<<
 *                             .format(player.__class__.__name__))
 *         return [self.strategy_value(item) for item in player.strategies]
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 159, __pyx_L1_error)

    /* "pygambit/lib/mixed.pxi":158
 *         elif isinstance(player, str):
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             raise TypeError("argument should be a str or Player instance; received {}"
 *                             .format(player.__class__.__name__))
 */
  }
  __pyx_L3:;

  /* "pygambit/lib/mixed.pxi":161
 *             raise TypeError("argument should be a str or Player instance; received {}"
 *                             .format(player.__class__.__name__))
 *         return [self.strategy_value(item) for item in player.strategies]             # <<<<<<<<<<<<<<
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 161, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_strategies); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 161, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_8 = __pyx_t_3; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 161, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 161, __pyx_L12_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 161, __pyx_L12_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 161, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_3); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 161, __pyx_L12_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 161, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_8);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 161, __pyx_L12_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr14__pyx_v_item, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategy_value_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 161, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_9, __pyx_9genexpr14__pyx_v_item) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_9genexpr14__pyx_v_item);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 161, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 161, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_item); __pyx_9genexpr14__pyx_v_item = 0;
    goto __pyx_L15_exit_scope;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_item); __pyx_9genexpr14__pyx_v_item = 0;
    goto __pyx_L1_error;
    __pyx_L15_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":153
 *         return self._strategy_value(strategy)
 * 
 *     def strategy_values(self, player=None):             # <<<<<<<<<<<<<<
 *         if player is None:
 *             return [self.strategy_values(player) for player in self.game.players]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.strategy_values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_player);
  __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":163
 *         return [self.strategy_value(item) for item in player.strategies]
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):             # <<<<<<<<<<<<<<
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_21strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_21strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_strategy1 = 0;
  PyObject *__pyx_v_strategy2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strategy_value_deriv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_strategy1,&__pyx_n_s_strategy2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategy1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strategy_value_deriv", 1, 3, 3, 1); __PYX_ERR(1, 163, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategy2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strategy_value_deriv", 1, 3, 3, 2); __PYX_ERR(1, 163, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "strategy_value_deriv") < 0)) __PYX_ERR(1, 163, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_player = values[0];
    __pyx_v_strategy1 = values[1];
    __pyx_v_strategy2 = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("strategy_value_deriv", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 163, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_20strategy_value_deriv(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_player, __pyx_v_strategy1, __pyx_v_strategy2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_20strategy_value_deriv(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_strategy1, PyObject *__pyx_v_strategy2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  GamePlayerRep *__pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("strategy_value_deriv", 0);
  __Pyx_INCREF(__pyx_v_player);
  __Pyx_INCREF(__pyx_v_strategy1);
  __Pyx_INCREF(__pyx_v_strategy2);

  /* "pygambit/lib/mixed.pxi":164
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):
 *         if isinstance(player, (int, str)):             # <<<<<<<<<<<<<<
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_player); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyString_Check(__pyx_v_player); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":165
 *     def strategy_value_deriv(self, player, strategy1, strategy2):
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]             # <<<<<<<<<<<<<<
 *         elif not isinstance(player, Player):
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_player); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_player, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pygambit/lib/mixed.pxi":164
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):
 *         if isinstance(player, (int, str)):             # <<<<<<<<<<<<<<
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/mixed.pxi":166
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pygambit/lib/mixed.pxi":168
 *         elif not isinstance(player, Player):
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)             # <<<<<<<<<<<<<<
 *         if isinstance(strategy1, str):
 *             strategy1 = self._resolve_index(strategy1, players=False)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_class); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pygambit/lib/mixed.pxi":167
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 *             raise TypeError("player index must be int, str, or Player, not %s" %             # <<<<<<<<<<<<<<
 *                             player.__class__.__name__)
 *         if isinstance(strategy1, str):
 */
    __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_player_index_must_be_int_str_or, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 167, __pyx_L1_error)

    /* "pygambit/lib/mixed.pxi":166
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "pygambit/lib/mixed.pxi":169
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)
 *         if isinstance(strategy1, str):             # <<<<<<<<<<<<<<
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_strategy1); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":170
 *                             player.__class__.__name__)
 *         if isinstance(strategy1, str):
 *             strategy1 = self._resolve_index(strategy1, players=False)             # <<<<<<<<<<<<<<
 *         elif not isinstance(strategy1, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_strategy1);
    __Pyx_GIVEREF(__pyx_v_strategy1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_strategy1);
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(1, 170, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_strategy1, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pygambit/lib/mixed.pxi":169
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)
 *         if isinstance(strategy1, str):             # <<<<<<<<<<<<<<
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):
 */
    goto __pyx_L6;
  }

  /* "pygambit/lib/mixed.pxi":171
 *         if isinstance(strategy1, str):
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_strategy1, __pyx_ptype_8pygambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pygambit/lib/mixed.pxi":173
 *         elif not isinstance(strategy1, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)             # <<<<<<<<<<<<<<
 *         if isinstance(strategy2, str):
 *             strategy2 = self._resolve_index(strategy2, players=False)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_strategy1, __pyx_n_s_class); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pygambit/lib/mixed.pxi":172
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             strategy1.__class__.__name__)
 *         if isinstance(strategy2, str):
 */
    __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_strategy_index_must_be_s, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(1, 172, __pyx_L1_error)

    /* "pygambit/lib/mixed.pxi":171
 *         if isinstance(strategy1, str):
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)
 */
  }
  __pyx_L6:;

  /* "pygambit/lib/mixed.pxi":174
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)
 *         if isinstance(strategy2, str):             # <<<<<<<<<<<<<<
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_strategy2); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":175
 *                             strategy1.__class__.__name__)
 *         if isinstance(strategy2, str):
 *             strategy2 = self._resolve_index(strategy2, players=False)             # <<<<<<<<<<<<<<
 *         elif not isinstance(strategy2, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_strategy2);
    __Pyx_GIVEREF(__pyx_v_strategy2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_strategy2);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(1, 175, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_strategy2, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":174
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)
 *         if isinstance(strategy2, str):             # <<<<<<<<<<<<<<
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):
 */
    goto __pyx_L7;
  }

  /* "pygambit/lib/mixed.pxi":176
 *         if isinstance(strategy2, str):
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy2.__class__.__name__)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_strategy2, __pyx_ptype_8pygambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pygambit/lib/mixed.pxi":178
 *         elif not isinstance(strategy2, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy2.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return self._strategy_value_deriv((<Player>player).player.deref().GetNumber(), strategy1, strategy2)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_strategy2, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/mixed.pxi":177
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             strategy2.__class__.__name__)
 *         return self._strategy_value_deriv((<Player>player).player.deref().GetNumber(), strategy1, strategy2)
 */
    __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_strategy_index_must_be_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 177, __pyx_L1_error)

    /* "pygambit/lib/mixed.pxi":176
 *         if isinstance(strategy2, str):
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy2.__class__.__name__)
 */
  }
  __pyx_L7:;

  /* "pygambit/lib/mixed.pxi":179
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy2.__class__.__name__)
 *         return self._strategy_value_deriv((<Player>player).player.deref().GetNumber(), strategy1, strategy2)             # <<<<<<<<<<<<<<
 * 
 * cdef class MixedStrategyProfileDouble(MixedStrategyProfile):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategy_value_deriv); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  try {
    __pyx_t_8 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_player)->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(1, 179, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_t_8->GetNumber()); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_7, __pyx_v_strategy1, __pyx_v_strategy2};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_7, __pyx_v_strategy1, __pyx_v_strategy2};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 3+__pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_7);
    __Pyx_INCREF(__pyx_v_strategy1);
    __Pyx_GIVEREF(__pyx_v_strategy1);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_strategy1);
    __Pyx_INCREF(__pyx_v_strategy2);
    __Pyx_GIVEREF(__pyx_v_strategy2);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_v_strategy2);
    __pyx_t_7 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":163
 *         return [self.strategy_value(item) for item in player.strategies]
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):             # <<<<<<<<<<<<<<
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XDECREF(__pyx_v_strategy1);
  __Pyx_XDECREF(__pyx_v_strategy2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_22__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_22__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_MixedStrategyProf); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MixedStrategyProfile__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_MixedStrategyProf); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MixedStrategyProfile__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_24__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedStrategyProfile_24__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MixedStrategyProfile__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_MixedStrategyProfile__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MixedStrategyProfile, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MixedStrategyProfile__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfile.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":184
 *     cdef c_MixedStrategyProfileDouble *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble___dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble___dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/mixed.pxi":185
 * 
 *     def __dealloc__(self):
 *         del self.profile             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.profile.MixedProfileLength()
 */
  delete __pyx_v_self->profile;

  /* "pygambit/lib/mixed.pxi":184
 *     cdef c_MixedStrategyProfileDouble *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/mixed.pxi":186
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.MixedProfileLength()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_2__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/mixed.pxi":187
 *         del self.profile
 *     def __len__(self):
 *         return self.profile.MixedProfileLength()             # <<<<<<<<<<<<<<
 * 
 *     def _strategy_index(self, Strategy st):
 */
  __pyx_r = __pyx_v_self->profile->MixedProfileLength();
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":186
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.MixedProfileLength()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":189
 *         return self.profile.MixedProfileLength()
 * 
 *     def _strategy_index(self, Strategy st):             # <<<<<<<<<<<<<<
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_5_strategy_index(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_5_strategy_index(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_index (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_st), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "st", 0))) __PYX_ERR(1, 189, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_4_strategy_index(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_st));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_4_strategy_index(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_st) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_strategy_index", 0);

  /* "pygambit/lib/mixed.pxi":190
 * 
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)             # <<<<<<<<<<<<<<
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->profile->GetSupport().GetIndex(__pyx_v_st->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":189
 *         return self.profile.MixedProfileLength()
 * 
 *     def _strategy_index(self, Strategy st):             # <<<<<<<<<<<<<<
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._strategy_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":191
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 191, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_6_getprob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_6_getprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getprob", 0);

  /* "pygambit/lib/mixed.pxi":192
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)             # <<<<<<<<<<<<<<
 *     def _getprob_strategy(self, Strategy strategy):
 *         return self.profile.getitem_strategy(strategy.strategy)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator[](__pyx_v_index);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(1, 192, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":191
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":193
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_9_getprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_9_getprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob_strategy (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(1, 193, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_8_getprob_strategy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_strategy));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_8_getprob_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getprob_strategy", 0);

  /* "pygambit/lib/mixed.pxi":194
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):
 *         return self.profile.getitem_strategy(strategy.strategy)             # <<<<<<<<<<<<<<
 *     def _setprob(self, int index, value):
 *         setitem_mspd_int(self.profile, index, value)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator[](__pyx_v_strategy->strategy);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(1, 194, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":193
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._getprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":195
 *     def _getprob_strategy(self, Strategy strategy):
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, 1); __PYX_ERR(1, 195, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob") < 0)) __PYX_ERR(1, 195, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 195, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 195, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_10_setprob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_10_setprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setprob", 0);

  /* "pygambit/lib/mixed.pxi":196
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):
 *         setitem_mspd_int(self.profile, index, value)             # <<<<<<<<<<<<<<
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 196, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_index, __pyx_t_1);

  /* "pygambit/lib/mixed.pxi":195
 *     def _getprob_strategy(self, Strategy strategy):
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":197
 *     def _setprob(self, int index, value):
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):             # <<<<<<<<<<<<<<
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_13_setprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_13_setprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob_strategy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategy,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategy)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob_strategy", 1, 2, 2, 1); __PYX_ERR(1, 197, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob_strategy") < 0)) __PYX_ERR(1, 197, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_strategy = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob_strategy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 197, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._setprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(1, 197, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_12_setprob_strategy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), __pyx_v_strategy, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_12_setprob_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setprob_strategy", 0);

  /* "pygambit/lib/mixed.pxi":198
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)             # <<<<<<<<<<<<<<
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 198, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_strategy->strategy, __pyx_t_1);

  /* "pygambit/lib/mixed.pxi":197
 *     def _setprob(self, int index, value):
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):             # <<<<<<<<<<<<<<
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._setprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":199
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_8pygambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(1, 199, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_14_payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_player));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_14_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_payoff", 0);

  /* "pygambit/lib/mixed.pxi":200
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player)             # <<<<<<<<<<<<<<
 *     def _strategy_value(self, Strategy strategy):
 *         return self.profile.GetPayoff(strategy.strategy)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_v_player->player)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":199
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":201
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(strategy.strategy)
 *     def _strategy_value_deriv(self, int pl,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_17_strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_17_strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_value (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(1, 201, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_16_strategy_value(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_strategy));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_16_strategy_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_strategy_value", 0);

  /* "pygambit/lib/mixed.pxi":202
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):
 *         return self.profile.GetPayoff(strategy.strategy)             # <<<<<<<<<<<<<<
 *     def _strategy_value_deriv(self, int pl,
 *                               Strategy s1, Strategy s2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_v_strategy->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":201
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(strategy.strategy)
 *     def _strategy_value_deriv(self, int pl,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._strategy_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":203
 *     def _strategy_value(self, Strategy strategy):
 *         return self.profile.GetPayoff(strategy.strategy)
 *     def _strategy_value_deriv(self, int pl,             # <<<<<<<<<<<<<<
 *                               Strategy s1, Strategy s2):
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_19_strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_19_strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_pl;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s1 = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_value_deriv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pl,&__pyx_n_s_s1,&__pyx_n_s_s2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pl)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, 1); __PYX_ERR(1, 203, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, 2); __PYX_ERR(1, 203, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_strategy_value_deriv") < 0)) __PYX_ERR(1, 203, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_pl = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_pl == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 203, __pyx_L3_error)
    __pyx_v_s1 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)values[1]);
    __pyx_v_s2 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 203, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s1), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "s1", 0))) __PYX_ERR(1, 204, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s2), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "s2", 0))) __PYX_ERR(1, 204, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_18_strategy_value_deriv(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), __pyx_v_pl, __pyx_v_s1, __pyx_v_s2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_18_strategy_value_deriv(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_pl, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s1, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_strategy_value_deriv", 0);

  /* "pygambit/lib/mixed.pxi":205
 *     def _strategy_value_deriv(self, int pl,
 *                               Strategy s1, Strategy s2):
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)             # <<<<<<<<<<<<<<
 * 
 *     def liap_value(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoffDeriv(__pyx_v_pl, __pyx_v_s1->strategy, __pyx_v_s2->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":203
 *     def _strategy_value(self, Strategy strategy):
 *         return self.profile.GetPayoff(strategy.strategy)
 *     def _strategy_value_deriv(self, int pl,             # <<<<<<<<<<<<<<
 *                               Strategy s1, Strategy s2):
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble._strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":207
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)
 * 
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return self.profile.GetLiapValue()
 *     def copy(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_21liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_21liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("liap_value (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_20liap_value(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_20liap_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("liap_value", 0);

  /* "pygambit/lib/mixed.pxi":208
 * 
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()             # <<<<<<<<<<<<<<
 *     def copy(self):
 *         cdef MixedStrategyProfileDouble mixed
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetLiapValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":207
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)
 * 
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return self.profile.GetLiapValue()
 *     def copy(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.liap_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":209
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_22copy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_22copy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_mixed = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pygambit/lib/mixed.pxi":211
 *     def copy(self):
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))
 *         return mixed
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mixed = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":212
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return mixed
 *     def as_behavior(self):
 */
  __pyx_v_mixed->profile = new MixedStrategyProfile<double> ((*__pyx_v_self->profile));

  /* "pygambit/lib/mixed.pxi":213
 *         mixed = MixedStrategyProfileDouble()
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))
 *         return mixed             # <<<<<<<<<<<<<<
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileDouble behav
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mixed));
  __pyx_r = ((PyObject *)__pyx_v_mixed);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":209
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mixed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":214
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))
 *         return mixed
 *     def as_behavior(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_25as_behavior(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_25as_behavior(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_behavior (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_24as_behavior(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_24as_behavior(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_behav = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  MixedBehaviorProfile<double>  *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_behavior", 0);

  /* "pygambit/lib/mixed.pxi":216
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\
 *                                           "defined for strategic games")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pygambit/lib/mixed.pxi":217
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\             # <<<<<<<<<<<<<<
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileDouble()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_s_Mixed_behavior_profiles_are_not) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s_Mixed_behavior_profiles_are_not);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 217, __pyx_L1_error)

    /* "pygambit/lib/mixed.pxi":216
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\
 *                                           "defined for strategic games")
 */
  }

  /* "pygambit/lib/mixed.pxi":219
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_behav = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/mixed.pxi":220
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileDouble()
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return behav
 *     def restriction(self):
 */
  try {
    __pyx_t_6 = new MixedBehaviorProfile<double> ((*__pyx_v_self->profile));
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_NotImplementedError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_NotImplementedError); }
    __PYX_ERR(1, 220, __pyx_L1_error)
  }
  __pyx_v_behav->profile = __pyx_t_6;

  /* "pygambit/lib/mixed.pxi":221
 *         behav = MixedBehaviorProfileDouble()
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav             # <<<<<<<<<<<<<<
 *     def restriction(self):
 *         cdef StrategicRestriction s
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_behav));
  __pyx_r = ((PyObject *)__pyx_v_behav);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":214
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))
 *         return mixed
 *     def as_behavior(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.as_behavior", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_behav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":222
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 *     def restriction(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_27restriction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_27restriction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restriction (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_26restriction(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_26restriction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restriction", 0);

  /* "pygambit/lib/mixed.pxi":224
 *     def restriction(self):
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":225
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())             # <<<<<<<<<<<<<<
 *         return s
 *     def unrestrict(self):
 */
  __pyx_v_s->support = new StrategySupportProfile(__pyx_v_self->profile->GetSupport());

  /* "pygambit/lib/mixed.pxi":226
 *         s = StrategicRestriction()
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s             # <<<<<<<<<<<<<<
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileDouble()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":222
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 *     def restriction(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.restriction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":227
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         profile = MixedStrategyProfileDouble()
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_29unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_29unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_28unrestrict(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_28unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_profile = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "pygambit/lib/mixed.pxi":228
 *         return s
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 *         return profile
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_profile = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":229
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileDouble()
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())             # <<<<<<<<<<<<<<
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()
 */
  __pyx_v_profile->profile = new MixedStrategyProfile<double> (__pyx_v_self->profile->ToFullSupport());

  /* "pygambit/lib/mixed.pxi":230
 *         profile = MixedStrategyProfileDouble()
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 *         return profile             # <<<<<<<<<<<<<<
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_profile));
  __pyx_r = ((PyObject *)__pyx_v_profile);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":227
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         profile = MixedStrategyProfileDouble()
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_profile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":231
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()             # <<<<<<<<<<<<<<
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_31set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_31set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_30set_centroid(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_30set_centroid(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid", 0);
  __pyx_v_self->profile->SetCentroid();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":232
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()             # <<<<<<<<<<<<<<
 *     def randomize(self, denom=None):
 *         if denom is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_33normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_33normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_32normalize(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_32normalize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);
  __pyx_v_self->profile->Normalize();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":233
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):             # <<<<<<<<<<<<<<
 *         if denom is None:
 *             self.profile.Randomize()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_35randomize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_35randomize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_denom = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("randomize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_denom,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_denom);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "randomize") < 0)) __PYX_ERR(1, 233, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_denom = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("randomize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 233, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.randomize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_34randomize(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), __pyx_v_denom);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_34randomize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, PyObject *__pyx_v_denom) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("randomize", 0);

  /* "pygambit/lib/mixed.pxi":234
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):
 *         if denom is None:             # <<<<<<<<<<<<<<
 *             self.profile.Randomize()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_denom == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/mixed.pxi":235
 *     def randomize(self, denom=None):
 *         if denom is None:
 *             self.profile.Randomize()             # <<<<<<<<<<<<<<
 *         else:
 *             self.profile.Randomize(denom)
 */
    try {
      __pyx_v_self->profile->Randomize();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_TypeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_TypeError); }
      __PYX_ERR(1, 235, __pyx_L1_error)
    }

    /* "pygambit/lib/mixed.pxi":234
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):
 *         if denom is None:             # <<<<<<<<<<<<<<
 *             self.profile.Randomize()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/mixed.pxi":237
 *             self.profile.Randomize()
 *         else:
 *             self.profile.Randomize(denom)             # <<<<<<<<<<<<<<
 *     property game:
 *         def __get__(self):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_denom); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 237, __pyx_L1_error)
    __pyx_v_self->profile->Randomize(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pygambit/lib/mixed.pxi":233
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):             # <<<<<<<<<<<<<<
 *         if denom is None:
 *             self.profile.Randomize()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.randomize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":239
 *             self.profile.Randomize(denom)
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/mixed.pxi":241
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.profile.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":242
 *             cdef Game g
 *             g = Game()
 *             g.game = self.profile.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->profile->GetGame();

  /* "pygambit/lib/mixed.pxi":243
 *             g = Game()
 *             g.game = self.profile.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":239
 *             self.profile.Randomize(denom)
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_36__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_38__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileDouble.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":249
 *     cdef c_MixedStrategyProfileRational *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational___dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational___dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/mixed.pxi":250
 * 
 *     def __dealloc__(self):
 *         del self.profile             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.profile.MixedProfileLength()
 */
  delete __pyx_v_self->profile;

  /* "pygambit/lib/mixed.pxi":249
 *     cdef c_MixedStrategyProfileRational *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/mixed.pxi":251
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.MixedProfileLength()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_2__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/mixed.pxi":252
 *         del self.profile
 *     def __len__(self):
 *         return self.profile.MixedProfileLength()             # <<<<<<<<<<<<<<
 * 
 *     def _strategy_index(self, Strategy st):
 */
  __pyx_r = __pyx_v_self->profile->MixedProfileLength();
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":251
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.MixedProfileLength()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":254
 *         return self.profile.MixedProfileLength()
 * 
 *     def _strategy_index(self, Strategy st):             # <<<<<<<<<<<<<<
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_5_strategy_index(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_5_strategy_index(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_index (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_st), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "st", 0))) __PYX_ERR(1, 254, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_4_strategy_index(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_st));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_4_strategy_index(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_st) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_strategy_index", 0);

  /* "pygambit/lib/mixed.pxi":255
 * 
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)             # <<<<<<<<<<<<<<
 *     def _getprob(self, int index):
 *         return rat_to_py(self.profile.getitem(index))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->profile->GetSupport().GetIndex(__pyx_v_st->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":254
 *         return self.profile.MixedProfileLength()
 * 
 *     def _strategy_index(self, Strategy st):             # <<<<<<<<<<<<<<
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._strategy_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":256
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getprob_strategy(self, Strategy strategy):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 256, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_6_getprob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_6_getprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Rational __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getprob", 0);

  /* "pygambit/lib/mixed.pxi":257
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 *         return rat_to_py(self.profile.getitem(index))             # <<<<<<<<<<<<<<
 *     def _getprob_strategy(self, Strategy strategy):
 *         return rat_to_py(self.profile.getitem_strategy(strategy.strategy))
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator[](__pyx_v_index);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(1, 257, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":256
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getprob_strategy(self, Strategy strategy):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":258
 *     def _getprob(self, int index):
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getprob_strategy(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.getitem_strategy(strategy.strategy))
 *     def _setprob(self, int index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_9_getprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_9_getprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob_strategy (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(1, 258, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_8_getprob_strategy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_strategy));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_8_getprob_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Rational __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getprob_strategy", 0);

  /* "pygambit/lib/mixed.pxi":259
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getprob_strategy(self, Strategy strategy):
 *         return rat_to_py(self.profile.getitem_strategy(strategy.strategy))             # <<<<<<<<<<<<<<
 *     def _setprob(self, int index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator[](__pyx_v_strategy->strategy);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(1, 259, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":258
 *     def _getprob(self, int index):
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getprob_strategy(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.getitem_strategy(strategy.strategy))
 *     def _setprob(self, int index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._getprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":260
 *     def _getprob_strategy(self, Strategy strategy):
 *         return rat_to_py(self.profile.getitem_strategy(strategy.strategy))
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, 1); __PYX_ERR(1, 260, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob") < 0)) __PYX_ERR(1, 260, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 260, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 260, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_10_setprob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_10_setprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setprob", 0);

  /* "pygambit/lib/mixed.pxi":261
 *         return rat_to_py(self.profile.getitem_strategy(strategy.strategy))
 *     def _setprob(self, int index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 *                             .format(value.__class__.__name__))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_value); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pygambit/lib/mixed.pxi":263
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 *                             .format(value.__class__.__name__))             # <<<<<<<<<<<<<<
 *         setitem_mspr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setprob_strategy(self, Strategy strategy, value):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_probability_should_be_int_or_Fra, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pygambit/lib/mixed.pxi":262
 *     def _setprob(self, int index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("probability should be int or Fraction instance; received {}"             # <<<<<<<<<<<<<<
 *                             .format(value.__class__.__name__))
 *         setitem_mspr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 262, __pyx_L1_error)

    /* "pygambit/lib/mixed.pxi":261
 *         return rat_to_py(self.profile.getitem_strategy(strategy.strategy))
 *     def _setprob(self, int index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 *                             .format(value.__class__.__name__))
 */
  }

  /* "pygambit/lib/mixed.pxi":264
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 *                             .format(value.__class__.__name__))
 *         setitem_mspr_int(self.profile, index, to_rational(str(value).encode('ascii')))             # <<<<<<<<<<<<<<
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         if not isinstance(value, (int, fractions.Fraction)):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 264, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_index, to_rational(__pyx_t_8));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":260
 *     def _getprob_strategy(self, Strategy strategy):
 *         return rat_to_py(self.profile.getitem_strategy(strategy.strategy))
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":265
 *                             .format(value.__class__.__name__))
 *         setitem_mspr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setprob_strategy(self, Strategy strategy, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_13_setprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_13_setprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob_strategy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategy,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strategy)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob_strategy", 1, 2, 2, 1); __PYX_ERR(1, 265, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob_strategy") < 0)) __PYX_ERR(1, 265, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_strategy = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob_strategy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 265, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._setprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(1, 265, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_12_setprob_strategy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), __pyx_v_strategy, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_12_setprob_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setprob_strategy", 0);

  /* "pygambit/lib/mixed.pxi":266
 *         setitem_mspr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 *                             .format(value.__class__.__name__))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_value); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pygambit/lib/mixed.pxi":268
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 *                             .format(value.__class__.__name__))             # <<<<<<<<<<<<<<
 *         setitem_mspr_strategy(self.profile, strategy.strategy,
 *                               to_rational(str(value).encode('ascii')))
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_probability_should_be_int_or_Fra, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pygambit/lib/mixed.pxi":267
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("probability should be int or Fraction instance; received {}"             # <<<<<<<<<<<<<<
 *                             .format(value.__class__.__name__))
 *         setitem_mspr_strategy(self.profile, strategy.strategy,
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 267, __pyx_L1_error)

    /* "pygambit/lib/mixed.pxi":266
 *         setitem_mspr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 *                             .format(value.__class__.__name__))
 */
  }

  /* "pygambit/lib/mixed.pxi":270
 *                             .format(value.__class__.__name__))
 *         setitem_mspr_strategy(self.profile, strategy.strategy,
 *                               to_rational(str(value).encode('ascii')))             # <<<<<<<<<<<<<<
 *     def _payoff(self, Player player):
 *         return rat_to_py(self.profile.GetPayoff(player.player))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(1, 270, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":269
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 *                             .format(value.__class__.__name__))
 *         setitem_mspr_strategy(self.profile, strategy.strategy,             # <<<<<<<<<<<<<<
 *                               to_rational(str(value).encode('ascii')))
 *     def _payoff(self, Player player):
 */
  setitem(__pyx_v_self->profile, __pyx_v_strategy->strategy, to_rational(__pyx_t_8));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":265
 *                             .format(value.__class__.__name__))
 *         setitem_mspr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setprob_strategy(self, Strategy strategy, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("probability should be int or Fraction instance; received {}"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._setprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":271
 *         setitem_mspr_strategy(self.profile, strategy.strategy,
 *                               to_rational(str(value).encode('ascii')))
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(player.player))
 *     def _strategy_value(self, Strategy strategy):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_8pygambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(1, 271, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_14_payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_player));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_14_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_payoff", 0);

  /* "pygambit/lib/mixed.pxi":272
 *                               to_rational(str(value).encode('ascii')))
 *     def _payoff(self, Player player):
 *         return rat_to_py(self.profile.GetPayoff(player.player))             # <<<<<<<<<<<<<<
 *     def _strategy_value(self, Strategy strategy):
 *         return rat_to_py(self.profile.GetPayoff(strategy.strategy))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetPayoff(__pyx_v_player->player)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":271
 *         setitem_mspr_strategy(self.profile, strategy.strategy,
 *                               to_rational(str(value).encode('ascii')))
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(player.player))
 *     def _strategy_value(self, Strategy strategy):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":273
 *     def _payoff(self, Player player):
 *         return rat_to_py(self.profile.GetPayoff(player.player))
 *     def _strategy_value(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(strategy.strategy))
 *     def _strategy_value_deriv(self, int pl,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_17_strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_17_strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_value (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(1, 273, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_16_strategy_value(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_v_strategy));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_16_strategy_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_strategy_value", 0);

  /* "pygambit/lib/mixed.pxi":274
 *         return rat_to_py(self.profile.GetPayoff(player.player))
 *     def _strategy_value(self, Strategy strategy):
 *         return rat_to_py(self.profile.GetPayoff(strategy.strategy))             # <<<<<<<<<<<<<<
 *     def _strategy_value_deriv(self, int pl,
 *                               Strategy s1, Strategy s2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetPayoff(__pyx_v_strategy->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":273
 *     def _payoff(self, Player player):
 *         return rat_to_py(self.profile.GetPayoff(player.player))
 *     def _strategy_value(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(strategy.strategy))
 *     def _strategy_value_deriv(self, int pl,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._strategy_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":275
 *     def _strategy_value(self, Strategy strategy):
 *         return rat_to_py(self.profile.GetPayoff(strategy.strategy))
 *     def _strategy_value_deriv(self, int pl,             # <<<<<<<<<<<<<<
 *                               Strategy s1, Strategy s2):
 *         return rat_to_py(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_19_strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_19_strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_pl;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s1 = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_value_deriv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pl,&__pyx_n_s_s1,&__pyx_n_s_s2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pl)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, 1); __PYX_ERR(1, 275, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, 2); __PYX_ERR(1, 275, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_strategy_value_deriv") < 0)) __PYX_ERR(1, 275, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_pl = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_pl == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 275, __pyx_L3_error)
    __pyx_v_s1 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)values[1]);
    __pyx_v_s2 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 275, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s1), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "s1", 0))) __PYX_ERR(1, 276, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s2), __pyx_ptype_8pygambit_3lib_9libgambit_Strategy, 1, "s2", 0))) __PYX_ERR(1, 276, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_18_strategy_value_deriv(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), __pyx_v_pl, __pyx_v_s1, __pyx_v_s2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_18_strategy_value_deriv(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_pl, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s1, struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_strategy_value_deriv", 0);

  /* "pygambit/lib/mixed.pxi":277
 *     def _strategy_value_deriv(self, int pl,
 *                               Strategy s1, Strategy s2):
 *         return rat_to_py(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy))             # <<<<<<<<<<<<<<
 * 
 *     def liap_value(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetPayoffDeriv(__pyx_v_pl, __pyx_v_s1->strategy, __pyx_v_s2->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":275
 *     def _strategy_value(self, Strategy strategy):
 *         return rat_to_py(self.profile.GetPayoff(strategy.strategy))
 *     def _strategy_value_deriv(self, int pl,             # <<<<<<<<<<<<<<
 *                               Strategy s1, Strategy s2):
 *         return rat_to_py(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational._strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":279
 *         return rat_to_py(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy))
 * 
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetLiapValue())
 *     def copy(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_21liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_21liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("liap_value (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_20liap_value(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_20liap_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("liap_value", 0);

  /* "pygambit/lib/mixed.pxi":280
 * 
 *     def liap_value(self):
 *         return rat_to_py(self.profile.GetLiapValue())             # <<<<<<<<<<<<<<
 *     def copy(self):
 *         cdef MixedStrategyProfileRational mixed
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetLiapValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":279
 *         return rat_to_py(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy))
 * 
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetLiapValue())
 *     def copy(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational.liap_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":281
 *     def liap_value(self):
 *         return rat_to_py(self.profile.GetLiapValue())
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_22copy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_22copy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_mixed = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pygambit/lib/mixed.pxi":283
 *     def copy(self):
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))
 *         return mixed
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mixed = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":284
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return mixed
 *     def as_behavior(self):
 */
  __pyx_v_mixed->profile = new MixedStrategyProfile<Rational> ((*__pyx_v_self->profile));

  /* "pygambit/lib/mixed.pxi":285
 *         mixed = MixedStrategyProfileRational()
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))
 *         return mixed             # <<<<<<<<<<<<<<
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileRational behav
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mixed));
  __pyx_r = ((PyObject *)__pyx_v_mixed);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":281
 *     def liap_value(self):
 *         return rat_to_py(self.profile.GetLiapValue())
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mixed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":286
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))
 *         return mixed
 *     def as_behavior(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_25as_behavior(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_25as_behavior(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_behavior (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_24as_behavior(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_24as_behavior(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_behav = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  MixedBehaviorProfile<Rational>  *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_behavior", 0);

  /* "pygambit/lib/mixed.pxi":288
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed behavior profiles are not "
 *                                           "defined for strategic games")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pygambit/lib/mixed.pxi":289
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:
 *             raise UndefinedOperationError("Mixed behavior profiles are not "             # <<<<<<<<<<<<<<
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileRational()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_s_Mixed_behavior_profiles_are_not) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s_Mixed_behavior_profiles_are_not);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 289, __pyx_L1_error)

    /* "pygambit/lib/mixed.pxi":288
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed behavior profiles are not "
 *                                           "defined for strategic games")
 */
  }

  /* "pygambit/lib/mixed.pxi":291
 *             raise UndefinedOperationError("Mixed behavior profiles are not "
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_behav = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/mixed.pxi":292
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileRational()
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return behav
 *     def restriction(self):
 */
  try {
    __pyx_t_6 = new MixedBehaviorProfile<Rational> ((*__pyx_v_self->profile));
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_NotImplementedError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_NotImplementedError); }
    __PYX_ERR(1, 292, __pyx_L1_error)
  }
  __pyx_v_behav->profile = __pyx_t_6;

  /* "pygambit/lib/mixed.pxi":293
 *         behav = MixedBehaviorProfileRational()
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav             # <<<<<<<<<<<<<<
 *     def restriction(self):
 *         cdef StrategicRestriction s
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_behav));
  __pyx_r = ((PyObject *)__pyx_v_behav);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":286
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))
 *         return mixed
 *     def as_behavior(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational.as_behavior", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_behav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":294
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 *     def restriction(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_27restriction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_27restriction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restriction (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_26restriction(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_26restriction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restriction", 0);

  /* "pygambit/lib/mixed.pxi":296
 *     def restriction(self):
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":297
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())             # <<<<<<<<<<<<<<
 *         return s
 *     def unrestrict(self):
 */
  __pyx_v_s->support = new StrategySupportProfile(__pyx_v_self->profile->GetSupport());

  /* "pygambit/lib/mixed.pxi":298
 *         s = StrategicRestriction()
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s             # <<<<<<<<<<<<<<
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileRational()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":294
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 *     def restriction(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational.restriction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":299
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         profile = MixedStrategyProfileRational()
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_29unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_29unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_28unrestrict(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_28unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_profile = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "pygambit/lib/mixed.pxi":300
 *         return s
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 *         return profile
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_profile = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":301
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileRational()
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())             # <<<<<<<<<<<<<<
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()
 */
  __pyx_v_profile->profile = new MixedStrategyProfile<Rational> (__pyx_v_self->profile->ToFullSupport());

  /* "pygambit/lib/mixed.pxi":302
 *         profile = MixedStrategyProfileRational()
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 *         return profile             # <<<<<<<<<<<<<<
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_profile));
  __pyx_r = ((PyObject *)__pyx_v_profile);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":299
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         profile = MixedStrategyProfileRational()
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_profile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":303
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()             # <<<<<<<<<<<<<<
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_31set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_31set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_30set_centroid(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_30set_centroid(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid", 0);
  __pyx_v_self->profile->SetCentroid();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":304
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()             # <<<<<<<<<<<<<<
 *     def randomize(self, denom):
 *         self.profile.Randomize(denom)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_33normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_33normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_32normalize(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_32normalize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);
  __pyx_v_self->profile->Normalize();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":305
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom):             # <<<<<<<<<<<<<<
 *         self.profile.Randomize(denom)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_35randomize(PyObject *__pyx_v_self, PyObject *__pyx_v_denom); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_35randomize(PyObject *__pyx_v_self, PyObject *__pyx_v_denom) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("randomize (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_34randomize(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((PyObject *)__pyx_v_denom));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_34randomize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, PyObject *__pyx_v_denom) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("randomize", 0);

  /* "pygambit/lib/mixed.pxi":306
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom):
 *         self.profile.Randomize(denom)             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_denom); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 306, __pyx_L1_error)
  __pyx_v_self->profile->Randomize(__pyx_t_1);

  /* "pygambit/lib/mixed.pxi":305
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom):             # <<<<<<<<<<<<<<
 *         self.profile.Randomize(denom)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational.randomize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/mixed.pxi":309
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/mixed.pxi":311
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.profile.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":312
 *             cdef Game g
 *             g = Game()
 *             g.game = self.profile.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 */
  __pyx_v_g->game = __pyx_v_self->profile->GetGame();

  /* "pygambit/lib/mixed.pxi":313
 *             g = Game()
 *             g.game = self.profile.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/mixed.pxi":309
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_36__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_38__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedStrategyProfileRational.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":28
 * 
 * cdef class MixedBehaviorProfile(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile___repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile___repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self) {
  PyObject *__pyx_9genexpr15__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/behav.pxi":29
 * cdef class MixedBehaviorProfile(object):
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])             # <<<<<<<<<<<<<<
 *     def _repr_latex_(self):
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 29, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 29, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 29, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 29, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(3, 29, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(3, 29, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 29, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr15__pyx_v_player, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_9genexpr15__pyx_v_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(3, 29, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_player); __pyx_9genexpr15__pyx_v_player = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_player); __pyx_9genexpr15__pyx_v_player = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":28
 * 
 * cdef class MixedBehaviorProfile(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":30
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_3_repr_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_3_repr_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_2_repr_latex_(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_2_repr_latex_(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self) {
  PyObject *__pyx_9genexpr16__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);

  /* "pygambit/lib/behav.pxi":31
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 31, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 31, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 31, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 31, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 31, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(3, 31, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 31, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(3, 31, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 31, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 31, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr16__pyx_v_player, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_9genexpr16__pyx_v_player); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 31, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 31, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 31, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_replace); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 31, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 31, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(3, 31, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_player); __pyx_9genexpr16__pyx_v_player = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_player); __pyx_9genexpr16__pyx_v_player = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__30, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":30
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":33
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if whichop == 0:
 *             return list(self) < list(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(3, 33, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_4__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_4__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/behav.pxi":34
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):
 *         if whichop == 0:             # <<<<<<<<<<<<<<
 *             return list(self) < list(other)
 *         elif whichop == 1:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":35
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):
 *         if whichop == 0:
 *             return list(self) < list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 35, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":34
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):
 *         if whichop == 0:             # <<<<<<<<<<<<<<
 *             return list(self) < list(other)
 *         elif whichop == 1:
 */
  }

  /* "pygambit/lib/behav.pxi":36
 *         if whichop == 0:
 *             return list(self) < list(other)
 *         elif whichop == 1:             # <<<<<<<<<<<<<<
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":37
 *             return list(self) < list(other)
 *         elif whichop == 1:
 *             return list(self) <= list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 2:
 *             return list(self) == list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 37, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":36
 *         if whichop == 0:
 *             return list(self) < list(other)
 *         elif whichop == 1:             # <<<<<<<<<<<<<<
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 */
  }

  /* "pygambit/lib/behav.pxi":38
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 *         elif whichop == 2:             # <<<<<<<<<<<<<<
 *             return list(self) == list(other)
 *         elif whichop == 3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":39
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 *             return list(self) == list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 3:
 *             return list(self) != list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":38
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 *         elif whichop == 2:             # <<<<<<<<<<<<<<
 *             return list(self) == list(other)
 *         elif whichop == 3:
 */
  }

  /* "pygambit/lib/behav.pxi":40
 *         elif whichop == 2:
 *             return list(self) == list(other)
 *         elif whichop == 3:             # <<<<<<<<<<<<<<
 *             return list(self) != list(other)
 *         elif whichop == 4:
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":41
 *             return list(self) == list(other)
 *         elif whichop == 3:
 *             return list(self) != list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 4:
 *             return list(self) > list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":40
 *         elif whichop == 2:
 *             return list(self) == list(other)
 *         elif whichop == 3:             # <<<<<<<<<<<<<<
 *             return list(self) != list(other)
 *         elif whichop == 4:
 */
  }

  /* "pygambit/lib/behav.pxi":42
 *         elif whichop == 3:
 *             return list(self) != list(other)
 *         elif whichop == 4:             # <<<<<<<<<<<<<<
 *             return list(self) > list(other)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":43
 *             return list(self) != list(other)
 *         elif whichop == 4:
 *             return list(self) > list(other)             # <<<<<<<<<<<<<<
 *         else:
 *             return list(self) >= list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":42
 *         elif whichop == 3:
 *             return list(self) != list(other)
 *         elif whichop == 4:             # <<<<<<<<<<<<<<
 *             return list(self) > list(other)
 *         else:
 */
  }

  /* "pygambit/lib/behav.pxi":45
 *             return list(self) > list(other)
 *         else:
 *             return list(self) >= list(other)             # <<<<<<<<<<<<<<
 * 
 *     def _resolve_index(self, index, players=True):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/behav.pxi":33
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if whichop == 0:
 *             return list(self) < list(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":47
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_7_resolve_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_7_resolve_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_players = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_resolve_index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_players,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_players);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_resolve_index") < 0)) __PYX_ERR(3, 47, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
    __pyx_v_players = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_resolve_index", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 47, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._resolve_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_6_resolve_index(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), __pyx_v_index, __pyx_v_players);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":57
 * 
 *         # if no player matches, check infoset labels
 *         infosets = functools.reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                                     [list(p.infosets)
 *                                      for p in self.game.players])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7 = {"lambda7", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda7 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda7", 1, 2, 2, 1); __PYX_ERR(3, 57, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda7") < 0)) __PYX_ERR(3, 57, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda7", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 57, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda7", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda7(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda7(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda7", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda7", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":60
 *                                     [list(p.infosets)
 *                                      for p in self.game.players])
 *         matches = list(filter(lambda x: x.label==index, infosets))             # <<<<<<<<<<<<<<
 *         if len(matches) == 1:
 *             return matches[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8 = {"lambda8", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda8 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda8(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_cur_scope;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda8", 0);
  __pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_index)) { __Pyx_RaiseClosureNameError("index"); __PYX_ERR(3, 60, __pyx_L1_error) }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_cur_scope->__pyx_v_index, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":67
 * 
 *         # if no infoset matches, check action labels
 *         actions = functools.reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                                    [list(i.actions)
 *                                     for p in self.game.players
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9 = {"lambda9", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda9 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda9", 1, 2, 2, 1); __PYX_ERR(3, 67, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda9") < 0)) __PYX_ERR(3, 67, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda9", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 67, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda9", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda9(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda9(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda9", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda9", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":71
 *                                     for p in self.game.players
 *                                     for i in p.infosets])
 *         matches = list(filter(lambda x: x.label==index, actions))             # <<<<<<<<<<<<<<
 *         if len(matches) == 1:
 *             return matches[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10 = {"lambda10", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda10 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda10(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda10(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_cur_scope;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda10", 0);
  __pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_index)) { __Pyx_RaiseClosureNameError("index"); __PYX_ERR(3, 71, __pyx_L1_error) }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_cur_scope->__pyx_v_index, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda10", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":47
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_6_resolve_index(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_players) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_cur_scope;
  PyObject *__pyx_v_infosets = NULL;
  PyObject *__pyx_v_matches = NULL;
  PyObject *__pyx_v_actions = NULL;
  PyObject *__pyx_9genexpr17__pyx_v_p = NULL;
  PyObject *__pyx_9genexpr18__pyx_v_p = NULL;
  PyObject *__pyx_9genexpr18__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_resolve_index", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 47, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_index = __pyx_v_index;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_index);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_index);

  /* "pygambit/lib/behav.pxi":49
 *     def _resolve_index(self, index, players=True):
 *         # Given a string index, resolve into a player or action object.
 *         if players:             # <<<<<<<<<<<<<<
 *             try:
 *                 # first check to see if string is referring to a player
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_players); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 49, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":50
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "pygambit/lib/behav.pxi":52
 *             try:
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]             # <<<<<<<<<<<<<<
 *             except IndexError:
 *                 pass
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 52, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 52, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 52, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8_try_return;

        /* "pygambit/lib/behav.pxi":50
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
      }
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pygambit/lib/behav.pxi":53
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 *             except IndexError:             # <<<<<<<<<<<<<<
 *                 pass
 * 
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IndexError);
      if (__pyx_t_7) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "pygambit/lib/behav.pxi":50
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    }

    /* "pygambit/lib/behav.pxi":49
 *     def _resolve_index(self, index, players=True):
 *         # Given a string index, resolve into a player or action object.
 *         if players:             # <<<<<<<<<<<<<<
 *             try:
 *                 # first check to see if string is referring to a player
 */
  }

  /* "pygambit/lib/behav.pxi":57
 * 
 *         # if no player matches, check infoset labels
 *         infosets = functools.reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                                     [list(p.infosets)
 *                                      for p in self.game.players])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_functools); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_reduce); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7, 0, __pyx_n_s_resolve_index_locals_lambda, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  { /* enter inner scope */

    /* "pygambit/lib/behav.pxi":58
 *         # if no player matches, check infoset labels
 *         infosets = functools.reduce(lambda x,y: x+y,
 *                                     [list(p.infosets)             # <<<<<<<<<<<<<<
 *                                      for p in self.game.players])
 *         matches = list(filter(lambda x: x.label==index, infosets))
 */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 58, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "pygambit/lib/behav.pxi":59
 *         infosets = functools.reduce(lambda x,y: x+y,
 *                                     [list(p.infosets)
 *                                      for p in self.game.players])             # <<<<<<<<<<<<<<
 *         matches = list(filter(lambda x: x.label==index, infosets))
 *         if len(matches) == 1:
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 59, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_players); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 59, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
      __pyx_t_10 = __pyx_t_11; __Pyx_INCREF(__pyx_t_10); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 59, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_13 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 59, __pyx_L12_error)
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_10))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_11); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(3, 59, __pyx_L12_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 59, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_12); __Pyx_INCREF(__pyx_t_11); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(3, 59, __pyx_L12_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 59, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_13(__pyx_t_10);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 59, __pyx_L12_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr17__pyx_v_p, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "pygambit/lib/behav.pxi":58
 *         # if no player matches, check infoset labels
 *         infosets = functools.reduce(lambda x,y: x+y,
 *                                     [list(p.infosets)             # <<<<<<<<<<<<<<
 *                                      for p in self.game.players])
 *         matches = list(filter(lambda x: x.label==index, infosets))
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr17__pyx_v_p, __pyx_n_s_infosets); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 58, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_14 = PySequence_List(__pyx_t_11); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 58, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_14))) __PYX_ERR(3, 58, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "pygambit/lib/behav.pxi":59
 *         infosets = functools.reduce(lambda x,y: x+y,
 *                                     [list(p.infosets)
 *                                      for p in self.game.players])             # <<<<<<<<<<<<<<
 *         matches = list(filter(lambda x: x.label==index, infosets))
 *         if len(matches) == 1:
 */
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_p); __pyx_9genexpr17__pyx_v_p = 0;
    goto __pyx_L15_exit_scope;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_p); __pyx_9genexpr17__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L15_exit_scope:;
  } /* exit inner scope */
  __pyx_t_10 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_6, __pyx_t_9};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_t_6, __pyx_t_9};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_14 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_7, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_6 = 0;
    __pyx_t_9 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_infosets = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygambit/lib/behav.pxi":60
 *                                     [list(p.infosets)
 *                                      for p in self.game.players])
 *         matches = list(filter(lambda x: x.label==index, infosets))             # <<<<<<<<<<<<<<
 *         if len(matches) == 1:
 *             return matches[0]
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8, 0, __pyx_n_s_resolve_index_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_infosets);
  __Pyx_GIVEREF(__pyx_v_infosets);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_infosets);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_matches = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "pygambit/lib/behav.pxi":61
 *                                      for p in self.game.players])
 *         matches = list(filter(lambda x: x.label==index, infosets))
 *         if len(matches) == 1:             # <<<<<<<<<<<<<<
 *             return matches[0]
 *         elif len(matches) > 1:
 */
  __pyx_t_12 = PyList_GET_SIZE(__pyx_v_matches); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(3, 61, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_12 == 1) != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":62
 *         matches = list(filter(lambda x: x.label==index, infosets))
 *         if len(matches) == 1:
 *             return matches[0]             # <<<<<<<<<<<<<<
 *         elif len(matches) > 1:
 *             raise IndexError("multiple infosets matching label '%s'" % index)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_matches, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":61
 *                                      for p in self.game.players])
 *         matches = list(filter(lambda x: x.label==index, infosets))
 *         if len(matches) == 1:             # <<<<<<<<<<<<<<
 *             return matches[0]
 *         elif len(matches) > 1:
 */
  }

  /* "pygambit/lib/behav.pxi":63
 *         if len(matches) == 1:
 *             return matches[0]
 *         elif len(matches) > 1:             # <<<<<<<<<<<<<<
 *             raise IndexError("multiple infosets matching label '%s'" % index)
 * 
 */
  __pyx_t_12 = PyList_GET_SIZE(__pyx_v_matches); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(3, 63, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_12 > 1) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pygambit/lib/behav.pxi":64
 *             return matches[0]
 *         elif len(matches) > 1:
 *             raise IndexError("multiple infosets matching label '%s'" % index)             # <<<<<<<<<<<<<<
 * 
 *         # if no infoset matches, check action labels
 */
    __pyx_t_8 = __Pyx_PyString_FormatSafe(__pyx_kp_s_multiple_infosets_matching_label, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 64, __pyx_L1_error)

    /* "pygambit/lib/behav.pxi":63
 *         if len(matches) == 1:
 *             return matches[0]
 *         elif len(matches) > 1:             # <<<<<<<<<<<<<<
 *             raise IndexError("multiple infosets matching label '%s'" % index)
 * 
 */
  }

  /* "pygambit/lib/behav.pxi":67
 * 
 *         # if no infoset matches, check action labels
 *         actions = functools.reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                                    [list(i.actions)
 *                                     for p in self.game.players
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_functools); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_reduce); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9, 0, __pyx_n_s_resolve_index_locals_lambda, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  { /* enter inner scope */

    /* "pygambit/lib/behav.pxi":68
 *         # if no infoset matches, check action labels
 *         actions = functools.reduce(lambda x,y: x+y,
 *                                    [list(i.actions)             # <<<<<<<<<<<<<<
 *                                     for p in self.game.players
 *                                     for i in p.infosets])
 */
    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 68, __pyx_L19_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "pygambit/lib/behav.pxi":69
 *         actions = functools.reduce(lambda x,y: x+y,
 *                                    [list(i.actions)
 *                                     for p in self.game.players             # <<<<<<<<<<<<<<
 *                                     for i in p.infosets])
 *         matches = list(filter(lambda x: x.label==index, actions))
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 69, __pyx_L19_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_players); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 69, __pyx_L19_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
      __pyx_t_6 = __pyx_t_10; __Pyx_INCREF(__pyx_t_6); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 69, __pyx_L19_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 69, __pyx_L19_error)
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(3, 69, __pyx_L19_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 69, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12); __Pyx_INCREF(__pyx_t_10); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(3, 69, __pyx_L19_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_6, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 69, __pyx_L19_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_13(__pyx_t_6);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 69, __pyx_L19_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr18__pyx_v_p, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "pygambit/lib/behav.pxi":70
 *                                    [list(i.actions)
 *                                     for p in self.game.players
 *                                     for i in p.infosets])             # <<<<<<<<<<<<<<
 *         matches = list(filter(lambda x: x.label==index, actions))
 *         if len(matches) == 1:
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr18__pyx_v_p, __pyx_n_s_infosets); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 70, __pyx_L19_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
        __pyx_t_11 = __pyx_t_10; __Pyx_INCREF(__pyx_t_11); __pyx_t_15 = 0;
        __pyx_t_16 = NULL;
      } else {
        __pyx_t_15 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 70, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_16 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(3, 70, __pyx_L19_error)
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      for (;;) {
        if (likely(!__pyx_t_16)) {
          if (likely(PyList_CheckExact(__pyx_t_11))) {
            if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_11)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_15); __Pyx_INCREF(__pyx_t_10); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(3, 70, __pyx_L19_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_11, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 70, __pyx_L19_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_15 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_15); __Pyx_INCREF(__pyx_t_10); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(3, 70, __pyx_L19_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_11, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 70, __pyx_L19_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_16(__pyx_t_11);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(3, 70, __pyx_L19_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr18__pyx_v_i, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "pygambit/lib/behav.pxi":68
 *         # if no infoset matches, check action labels
 *         actions = functools.reduce(lambda x,y: x+y,
 *                                    [list(i.actions)             # <<<<<<<<<<<<<<
 *                                     for p in self.game.players
 *                                     for i in p.infosets])
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr18__pyx_v_i, __pyx_n_s_actions); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 68, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_17 = PySequence_List(__pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(3, 68, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_17))) __PYX_ERR(3, 68, __pyx_L19_error)
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

        /* "pygambit/lib/behav.pxi":70
 *                                    [list(i.actions)
 *                                     for p in self.game.players
 *                                     for i in p.infosets])             # <<<<<<<<<<<<<<
 *         matches = list(filter(lambda x: x.label==index, actions))
 *         if len(matches) == 1:
 */
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "pygambit/lib/behav.pxi":69
 *         actions = functools.reduce(lambda x,y: x+y,
 *                                    [list(i.actions)
 *                                     for p in self.game.players             # <<<<<<<<<<<<<<
 *                                     for i in p.infosets])
 *         matches = list(filter(lambda x: x.label==index, actions))
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_i); __pyx_9genexpr18__pyx_v_i = 0;
    __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_p); __pyx_9genexpr18__pyx_v_p = 0;
    goto __pyx_L24_exit_scope;
    __pyx_L19_error:;
    __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_i); __pyx_9genexpr18__pyx_v_i = 0;
    __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_p); __pyx_9genexpr18__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L24_exit_scope:;
  } /* exit inner scope */
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_8, __pyx_t_9};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 67, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_8, __pyx_t_9};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 67, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_7, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_actions = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "pygambit/lib/behav.pxi":71
 *                                     for p in self.game.players
 *                                     for i in p.infosets])
 *         matches = list(filter(lambda x: x.label==index, actions))             # <<<<<<<<<<<<<<
 *         if len(matches) == 1:
 *             return matches[0]
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10, 0, __pyx_n_s_resolve_index_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_pygambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_actions);
  __Pyx_GIVEREF(__pyx_v_actions);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_actions);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_matches, ((PyObject*)__pyx_t_14));
  __pyx_t_14 = 0;

  /* "pygambit/lib/behav.pxi":72
 *                                     for i in p.infosets])
 *         matches = list(filter(lambda x: x.label==index, actions))
 *         if len(matches) == 1:             # <<<<<<<<<<<<<<
 *             return matches[0]
 *         elif len(matches) == 0:
 */
  __pyx_t_12 = PyList_GET_SIZE(__pyx_v_matches); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(3, 72, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_12 == 1) != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":73
 *         matches = list(filter(lambda x: x.label==index, actions))
 *         if len(matches) == 1:
 *             return matches[0]             # <<<<<<<<<<<<<<
 *         elif len(matches) == 0:
 *             if players:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_14 = __Pyx_GetItemInt_List(__pyx_v_matches, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_r = __pyx_t_14;
    __pyx_t_14 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":72
 *                                     for i in p.infosets])
 *         matches = list(filter(lambda x: x.label==index, actions))
 *         if len(matches) == 1:             # <<<<<<<<<<<<<<
 *             return matches[0]
 *         elif len(matches) == 0:
 */
  }

  /* "pygambit/lib/behav.pxi":74
 *         if len(matches) == 1:
 *             return matches[0]
 *         elif len(matches) == 0:             # <<<<<<<<<<<<<<
 *             if players:
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 */
  __pyx_t_12 = PyList_GET_SIZE(__pyx_v_matches); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(3, 74, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_12 == 0) != 0);
  if (likely(__pyx_t_1)) {

    /* "pygambit/lib/behav.pxi":75
 *             return matches[0]
 *         elif len(matches) == 0:
 *             if players:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_players); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 75, __pyx_L1_error)
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/behav.pxi":76
 *         elif len(matches) == 0:
 *             if players:
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise IndexError("no infoset or action matching label '%s'" % index)
 */
      __pyx_t_14 = __Pyx_PyString_FormatSafe(__pyx_kp_s_no_player_infoset_or_action_matc, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(3, 76, __pyx_L1_error)

      /* "pygambit/lib/behav.pxi":75
 *             return matches[0]
 *         elif len(matches) == 0:
 *             if players:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 *             else:
 */
    }

    /* "pygambit/lib/behav.pxi":78
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 *             else:
 *                 raise IndexError("no infoset or action matching label '%s'" % index)             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError("multiple actions matching label '%s'" % index)
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_no_infoset_or_action_matching_la, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 78, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_14, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __PYX_ERR(3, 78, __pyx_L1_error)
    }

    /* "pygambit/lib/behav.pxi":74
 *         if len(matches) == 1:
 *             return matches[0]
 *         elif len(matches) == 0:             # <<<<<<<<<<<<<<
 *             if players:
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 */
  }

  /* "pygambit/lib/behav.pxi":80
 *                 raise IndexError("no infoset or action matching label '%s'" % index)
 *         else:
 *             raise IndexError("multiple actions matching label '%s'" % index)             # <<<<<<<<<<<<<<
 * 
 *     def _setinfoset(self, index, value):
 */
  /*else*/ {
    __pyx_t_14 = __Pyx_PyString_FormatSafe(__pyx_kp_s_multiple_actions_matching_label, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 80, __pyx_L1_error)
  }

  /* "pygambit/lib/behav.pxi":47
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._resolve_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infosets);
  __Pyx_XDECREF(__pyx_v_matches);
  __Pyx_XDECREF(__pyx_v_actions);
  __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_p);
  __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_p);
  __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_i);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":82
 *             raise IndexError("multiple actions matching label '%s'" % index)
 * 
 *     def _setinfoset(self, index, value):             # <<<<<<<<<<<<<<
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_9_setinfoset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_9_setinfoset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setinfoset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setinfoset", 1, 2, 2, 1); __PYX_ERR(3, 82, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setinfoset") < 0)) __PYX_ERR(3, 82, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setinfoset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 82, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._setinfoset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_8_setinfoset(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_8_setinfoset(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_action = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setinfoset", 0);

  /* "pygambit/lib/behav.pxi":83
 * 
 *     def _setinfoset(self, index, value):
 *         if len(index.actions) == len(value):             # <<<<<<<<<<<<<<
 *             for action, val in zip(index.actions, value):
 *                 self._setaction(action, val)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_actions); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 83, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_2 == __pyx_t_3) != 0);
  if (likely(__pyx_t_4)) {

    /* "pygambit/lib/behav.pxi":84
 *     def _setinfoset(self, index, value):
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):             # <<<<<<<<<<<<<<
 *                 self._setaction(action, val)
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_actions); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_value);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 84, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 84, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 84, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_5);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 84, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(3, 84, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(3, 84, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(3, 84, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_action, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "pygambit/lib/behav.pxi":85
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):
 *                 self._setaction(action, val)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setaction); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_action, __pyx_v_val};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 85, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_action, __pyx_v_val};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 85, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 85, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_v_action);
        __Pyx_GIVEREF(__pyx_v_action);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_v_action);
        __Pyx_INCREF(__pyx_v_val);
        __Pyx_GIVEREF(__pyx_v_val);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_v_val);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 85, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pygambit/lib/behav.pxi":84
 *     def _setinfoset(self, index, value):
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):             # <<<<<<<<<<<<<<
 *                 self._setaction(action, val)
 *         else:
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":83
 * 
 *     def _setinfoset(self, index, value):
 *         if len(index.actions) == len(value):             # <<<<<<<<<<<<<<
 *             for action, val in zip(index.actions, value):
 *                 self._setaction(action, val)
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":87
 *                 self._setaction(action, val)
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %             # <<<<<<<<<<<<<<
 *                              (len(index.actions), len(value)))
 * 
 */
  /*else*/ {

    /* "pygambit/lib/behav.pxi":88
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %
 *                              (len(index.actions), len(value)))             # <<<<<<<<<<<<<<
 * 
 *     def _setplayer(self, index, value):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_actions); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 88, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;

    /* "pygambit/lib/behav.pxi":87
 *                 self._setaction(action, val)
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %             # <<<<<<<<<<<<<<
 *                              (len(index.actions), len(value)))
 * 
 */
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_value_list_length_must_be_s_not, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(3, 87, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/behav.pxi":82
 *             raise IndexError("multiple actions matching label '%s'" % index)
 * 
 *     def _setinfoset(self, index, value):             # <<<<<<<<<<<<<<
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._setinfoset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_action);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":90
 *                              (len(index.actions), len(value)))
 * 
 *     def _setplayer(self, index, value):             # <<<<<<<<<<<<<<
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11_setplayer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11_setplayer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setplayer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setplayer", 1, 2, 2, 1); __PYX_ERR(3, 90, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setplayer") < 0)) __PYX_ERR(3, 90, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setplayer", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 90, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._setplayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_10_setplayer(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_10_setplayer(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_infoset = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setplayer", 0);

  /* "pygambit/lib/behav.pxi":91
 * 
 *     def _setplayer(self, index, value):
 *         if len(index.infosets) == len(value):             # <<<<<<<<<<<<<<
 *             for infoset, val in zip(index.infosets, value):
 *                 self._setinfoset(infoset, val)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_infosets); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 91, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_2 == __pyx_t_3) != 0);
  if (likely(__pyx_t_4)) {

    /* "pygambit/lib/behav.pxi":92
 *     def _setplayer(self, index, value):
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):             # <<<<<<<<<<<<<<
 *                 self._setinfoset(infoset, val)
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_infosets); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_value);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 92, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 92, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 92, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 92, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 92, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_5);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 92, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(3, 92, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 92, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(3, 92, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(3, 92, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_infoset, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "pygambit/lib/behav.pxi":93
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):
 *                 self._setinfoset(infoset, val)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setinfoset); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 93, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_infoset, __pyx_v_val};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 93, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_v_infoset, __pyx_v_val};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 93, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_INCREF(__pyx_v_infoset);
        __Pyx_GIVEREF(__pyx_v_infoset);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_11, __pyx_v_infoset);
        __Pyx_INCREF(__pyx_v_val);
        __Pyx_GIVEREF(__pyx_v_val);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_11, __pyx_v_val);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pygambit/lib/behav.pxi":92
 *     def _setplayer(self, index, value):
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):             # <<<<<<<<<<<<<<
 *                 self._setinfoset(infoset, val)
 *         else:
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":91
 * 
 *     def _setplayer(self, index, value):
 *         if len(index.infosets) == len(value):             # <<<<<<<<<<<<<<
 *             for infoset, val in zip(index.infosets, value):
 *                 self._setinfoset(infoset, val)
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":95
 *                 self._setinfoset(infoset, val)
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %             # <<<<<<<<<<<<<<
 *                              (len(index.actions), len(value)))
 * 
 */
  /*else*/ {

    /* "pygambit/lib/behav.pxi":96
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %
 *                              (len(index.actions), len(value)))             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, index):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_actions); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 96, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;

    /* "pygambit/lib/behav.pxi":95
 *                 self._setinfoset(infoset, val)
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %             # <<<<<<<<<<<<<<
 *                              (len(index.actions), len(value)))
 * 
 */
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_value_list_length_must_be_s_not, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(3, 95, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/behav.pxi":90
 *                              (len(index.actions), len(value)))
 * 
 *     def _setplayer(self, index, value):             # <<<<<<<<<<<<<<
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile._setplayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infoset);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":98
 *                              (len(index.actions), len(value)))
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_12__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":105
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.infoset = infoset
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_profile = 0;
  PyObject *__pyx_v_infoset = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_profile,&__pyx_n_s_infoset,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(3, 105, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_infoset)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(3, 105, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(3, 105, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_profile = values[1];
    __pyx_v_infoset = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 105, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset___init__(__pyx_self, __pyx_v_self, __pyx_v_profile, __pyx_v_infoset);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pygambit/lib/behav.pxi":106
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):
 *                     self.profile = profile             # <<<<<<<<<<<<<<
 *                     self.infoset = infoset
 *                 def __eq__(self, other):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_profile, __pyx_v_profile) < 0) __PYX_ERR(3, 106, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":107
 *                 def __init__(self, profile, infoset):
 *                     self.profile = profile
 *                     self.infoset = infoset             # <<<<<<<<<<<<<<
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_infoset, __pyx_v_infoset) < 0) __PYX_ERR(3, 107, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":105
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.infoset = infoset
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":108
 *                     self.profile = profile
 *                     self.infoset = infoset
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__ = {"__eq__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_other = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_other,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, 1); __PYX_ERR(3, 108, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__eq__") < 0)) __PYX_ERR(3, 108, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_2__eq__(__pyx_self, __pyx_v_self, __pyx_v_other);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "pygambit/lib/behav.pxi":109
 *                     self.infoset = infoset
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)             # <<<<<<<<<<<<<<
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":108
 *                     self.profile = profile
 *                     self.infoset = infoset
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":110
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__ = {"__len__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_4__len__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/behav.pxi":111
 *                     return list(self) == list(other)
 *                 def __len__(self):
 *                     return len(self.infoset.actions)             # <<<<<<<<<<<<<<
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_actions); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":110
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":112
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__ = {"__repr__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_6__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/behav.pxi":113
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))             # <<<<<<<<<<<<<<
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":112
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":114
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_ = {"_repr_latex_", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_8_repr_latex_(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pygambit/lib/behav.pxi":116
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 116, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_getitem___locals_MixedBehavInf, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!gen)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset._repr_latex_.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 116, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 116, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_actions); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 116, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 116, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 116, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 116, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 116, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 116, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":114
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *__pyx_cur_scope;
  PyObject *__pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__2generator1 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 114, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "pygambit/lib/behav.pxi":115
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 *                     else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pygambit/lib/behav.pxi":116
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s__30, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":115
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 *                     else:
 */
  }

  /* "pygambit/lib/behav.pxi":118
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 *                     else:
 *                        return repr(self)             # <<<<<<<<<<<<<<
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_self;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/behav.pxi":114
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__2generator1);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":119
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__ = {"__getitem__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, 1); __PYX_ERR(3, 119, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__getitem__") < 0)) __PYX_ERR(3, 119, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 119, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_10__getitem__(__pyx_self, __pyx_v_self, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/behav.pxi":120
 *                        return repr(self)
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]             # <<<<<<<<<<<<<<
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.infoset.actions[index]] = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_actions); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":119
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":121
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__ = {"__setitem__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 1); __PYX_ERR(3, 121, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 2); __PYX_ERR(3, 121, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__setitem__") < 0)) __PYX_ERR(3, 121, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 121, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12__setitem__(__pyx_self, __pyx_v_self, __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pygambit/lib/behav.pxi":122
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.infoset.actions[index]] = value             # <<<<<<<<<<<<<<
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_actions); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_2, __pyx_v_value) < 0)) __PYX_ERR(3, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/behav.pxi":121
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":126
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_profile = 0;
  PyObject *__pyx_v_player = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_profile,&__pyx_n_s_player,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(3, 126, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(3, 126, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(3, 126, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_profile = values[1];
    __pyx_v_player = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 126, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav___init__(__pyx_self, __pyx_v_self, __pyx_v_profile, __pyx_v_player);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pygambit/lib/behav.pxi":127
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):
 *                     self.profile = profile             # <<<<<<<<<<<<<<
 *                     self.player = player
 *                 def __eq__(self, other):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_profile, __pyx_v_profile) < 0) __PYX_ERR(3, 127, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":128
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 *                     self.player = player             # <<<<<<<<<<<<<<
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_player, __pyx_v_player) < 0) __PYX_ERR(3, 128, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":126
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":129
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__ = {"__eq__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_other = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_other,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, 1); __PYX_ERR(3, 129, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__eq__") < 0)) __PYX_ERR(3, 129, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 129, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_2__eq__(__pyx_self, __pyx_v_self, __pyx_v_other);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "pygambit/lib/behav.pxi":130
 *                     self.player = player
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)             # <<<<<<<<<<<<<<
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":129
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":131
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__ = {"__len__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_4__len__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/behav.pxi":132
 *                     return list(self) == list(other)
 *                 def __len__(self):
 *                     return len(self.player.infosets)             # <<<<<<<<<<<<<<
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_infosets); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":131
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":133
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__ = {"__repr__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_6__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/behav.pxi":134
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))             # <<<<<<<<<<<<<<
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":133
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":135
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_ = {"_repr_latex_", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_, METH_O, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_8_repr_latex_(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pygambit/lib/behav.pxi":137
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 137, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__2generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_getitem___locals_MixedBehav__r, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!gen)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav._repr_latex_.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 137, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 137, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_infosets); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 137, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 137, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 137, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 137, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 137, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 137, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":135
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *__pyx_cur_scope;
  PyObject *__pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__2generator2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 135, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "pygambit/lib/behav.pxi":136
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 *                     else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pygambit/lib/behav.pxi":137
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s__30, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":136
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 *                     else:
 */
  }

  /* "pygambit/lib/behav.pxi":139
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 *                     else:
 *                        return repr(self)             # <<<<<<<<<<<<<<
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_self;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/behav.pxi":135
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__2generator2);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":140
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__ = {"__getitem__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, 1); __PYX_ERR(3, 140, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__getitem__") < 0)) __PYX_ERR(3, 140, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_10__getitem__(__pyx_self, __pyx_v_self, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/behav.pxi":141
 *                        return repr(self)
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]             # <<<<<<<<<<<<<<
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.infosets[index]] = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_infosets); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":140
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":142
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__ = {"__setitem__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 1); __PYX_ERR(3, 142, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 2); __PYX_ERR(3, 142, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__setitem__") < 0)) __PYX_ERR(3, 142, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 142, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12__setitem__(__pyx_self, __pyx_v_self, __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pygambit/lib/behav.pxi":143
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.infosets[index]] = value             # <<<<<<<<<<<<<<
 *             return MixedBehav(self, index)
 *         elif isinstance(index, str):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_infosets); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_2, __pyx_v_value) < 0)) __PYX_ERR(3, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/behav.pxi":142
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":98
 *                              (len(index.actions), len(value)))
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_12__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_MixedBehavInfoset = NULL;
  PyObject *__pyx_v_MixedBehav = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/behav.pxi":99
 * 
 *     def __getitem__(self, index):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":100
 *     def __getitem__(self, index):
 *         if isinstance(index, int):
 *             return self._getprob(index+1)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Action):
 *             return self._getaction(index)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getprob); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":99
 * 
 *     def __getitem__(self, index):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):
 */
  }

  /* "pygambit/lib/behav.pxi":101
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):             # <<<<<<<<<<<<<<
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":102
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):
 *             return self._getaction(index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getaction); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":101
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):             # <<<<<<<<<<<<<<
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):
 */
  }

  /* "pygambit/lib/behav.pxi":103
 *         elif isinstance(index, Action):
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):             # <<<<<<<<<<<<<<
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":104
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, infoset):
 *                     self.profile = profile
 */
    __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__70); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_tuple__70, __pyx_n_s_MixedBehavInfoset, __pyx_n_s_getitem___locals_MixedBehavInf_2, (PyObject *) NULL, __pyx_n_s_pygambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "pygambit/lib/behav.pxi":105
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.infoset = infoset
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_3, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__72)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(3, 105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":108
 *                     self.profile = profile
 *                     self.infoset = infoset
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_4, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_eq, __pyx_t_5) < 0) __PYX_ERR(3, 108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":110
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_5, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_len, __pyx_t_5) < 0) __PYX_ERR(3, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":112
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_6, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_repr, __pyx_t_5) < 0) __PYX_ERR(3, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":114
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_, 0, __pyx_n_s_getitem___locals_MixedBehavInf_7, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_repr_latex, __pyx_t_5) < 0) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":119
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_8, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_getitem, __pyx_t_5) < 0) __PYX_ERR(3, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":121
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_9, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_setitem, __pyx_t_5) < 0) __PYX_ERR(3, 121, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":104
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, infoset):
 *                     self.profile = profile
 */
    __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_MixedBehavInfoset, __pyx_tuple__70, __pyx_t_4, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_MixedBehavInfoset = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/behav.pxi":123
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_index);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_v_MixedBehavInfoset, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":103
 *         elif isinstance(index, Action):
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):             # <<<<<<<<<<<<<<
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):
 */
  }

  /* "pygambit/lib/behav.pxi":124
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":125
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
    __pyx_t_4 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__85); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_4, __pyx_tuple__85, __pyx_n_s_MixedBehav, __pyx_n_s_getitem___locals_MixedBehav, (PyObject *) NULL, __pyx_n_s_pygambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "pygambit/lib/behav.pxi":126
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__, 0, __pyx_n_s_getitem___locals_MixedBehav_2, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(3, 126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":129
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__, 0, __pyx_n_s_getitem___locals_MixedBehav_3, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_eq, __pyx_t_5) < 0) __PYX_ERR(3, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":131
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__, 0, __pyx_n_s_getitem___locals_MixedBehav_4, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_len, __pyx_t_5) < 0) __PYX_ERR(3, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":133
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__, 0, __pyx_n_s_getitem___locals_MixedBehav_5, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_repr, __pyx_t_5) < 0) __PYX_ERR(3, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":135
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_, 0, __pyx_n_s_getitem___locals_MixedBehav__r_2, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_repr_latex, __pyx_t_5) < 0) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":140
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__, 0, __pyx_n_s_getitem___locals_MixedBehav_6, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_getitem, __pyx_t_5) < 0) __PYX_ERR(3, 140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":142
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__, 0, __pyx_n_s_getitem___locals_MixedBehav_7, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_setitem, __pyx_t_5) < 0) __PYX_ERR(3, 142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":125
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
    __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_4, __pyx_n_s_MixedBehav, __pyx_tuple__85, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_MixedBehav = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pygambit/lib/behav.pxi":144
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, str):
 *             return self[self._resolve_index(index, players=True)]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_index);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_MixedBehav, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":124
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):
 */
  }

  /* "pygambit/lib/behav.pxi":145
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 */
  __pyx_t_1 = PyString_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/behav.pxi":146
 *             return MixedBehav(self, index)
 *         elif isinstance(index, str):
 *             return self[self._resolve_index(index, players=True)]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_index);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_True) < 0) __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":145
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 */
  }

  /* "pygambit/lib/behav.pxi":148
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "pygambit/lib/behav.pxi":149
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %
 *                             index.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, index, value):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/behav.pxi":148
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
    __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_indexes_must_be_int_str_2, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 148, __pyx_L1_error)
  }

  /* "pygambit/lib/behav.pxi":98
 *                              (len(index.actions), len(value)))
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_MixedBehavInfoset);
  __Pyx_XDECREF(__pyx_v_MixedBehav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":151
 *                             index.__class__.__name__)
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_15__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_15__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14__setitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_14__setitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "pygambit/lib/behav.pxi":152
 * 
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":153
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Action):
 *             self._setaction(index, value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setprob); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 153, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_5, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 153, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_5);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/behav.pxi":152
 * 
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":154
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):             # <<<<<<<<<<<<<<
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":155
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):
 *             self._setaction(index, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Infoset):
 *             self._setinfoset(index,value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setaction); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 155, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 155, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_index);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/behav.pxi":154
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):             # <<<<<<<<<<<<<<
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":156
 *         elif isinstance(index, Action):
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):             # <<<<<<<<<<<<<<
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":157
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):
 *             self._setinfoset(index,value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Player):
 *             self._setplayer(index, value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setinfoset); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 157, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 157, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_index);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/behav.pxi":156
 *         elif isinstance(index, Action):
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):             # <<<<<<<<<<<<<<
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":158
 *         elif isinstance(index, Infoset):
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":159
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):
 *             self._setplayer(index, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, str):
 *             self[self._resolve_index(index)] = value
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setplayer); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_index, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_index);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/behav.pxi":158
 *         elif isinstance(index, Infoset):
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":160
 *         elif isinstance(index, Player):
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             self[self._resolve_index(index)] = value
 *         else:
 */
  __pyx_t_1 = PyString_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/behav.pxi":161
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):
 *             self[self._resolve_index(index)] = value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_index) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self), __pyx_t_3, __pyx_v_value) < 0)) __PYX_ERR(3, 161, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/behav.pxi":160
 *         elif isinstance(index, Player):
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             self[self._resolve_index(index)] = value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":163
 *             self[self._resolve_index(index)] = value
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "pygambit/lib/behav.pxi":164
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %
 *                             index.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def is_defined_at(self, infoset):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pygambit/lib/behav.pxi":163
 *             self[self._resolve_index(index)] = value
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_indexes_must_be_int_str_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(3, 163, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pygambit/lib/behav.pxi":151
 *                             index.__class__.__name__)
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":166
 *                             index.__class__.__name__)
 * 
 *     def is_defined_at(self, infoset):             # <<<<<<<<<<<<<<
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_17is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_17is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_defined_at (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_16is_defined_at(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_infoset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_16is_defined_at(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_defined_at", 0);
  __Pyx_INCREF(__pyx_v_infoset);

  /* "pygambit/lib/behav.pxi":167
 * 
 *     def is_defined_at(self, infoset):
 *         if isinstance(infoset, str):             # <<<<<<<<<<<<<<
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":168
 *     def is_defined_at(self, infoset):
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)             # <<<<<<<<<<<<<<
 *             if not isinstance(infoset, Infoset):
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_infoset);
    __Pyx_GIVEREF(__pyx_v_infoset);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_infoset);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 168, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_infoset, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pygambit/lib/behav.pxi":169
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_infoset, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/behav.pxi":170
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)             # <<<<<<<<<<<<<<
 *         elif not isinstance(infoset, Infoset):
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_infoset, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_no_infoset_matching_label_s, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(3, 170, __pyx_L1_error)

      /* "pygambit/lib/behav.pxi":169
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):
 */
    }

    /* "pygambit/lib/behav.pxi":167
 * 
 *     def is_defined_at(self, infoset):
 *         if isinstance(infoset, str):             # <<<<<<<<<<<<<<
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":171
 *             if not isinstance(infoset, Infoset):
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 *                             infoset.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/behav.pxi":173
 *         elif not isinstance(infoset, Infoset):
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 *                             infoset.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return self._is_defined_at(infoset)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_infoset, __pyx_n_s_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pygambit/lib/behav.pxi":172
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %             # <<<<<<<<<<<<<<
 *                             infoset.__class__.__name__)
 *         return self._is_defined_at(infoset)
 */
    __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_infoset_index_must_be_st, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 172, __pyx_L1_error)

    /* "pygambit/lib/behav.pxi":171
 *             if not isinstance(infoset, Infoset):
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 *                             infoset.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "pygambit/lib/behav.pxi":174
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 *                             infoset.__class__.__name__)
 *         return self._is_defined_at(infoset)             # <<<<<<<<<<<<<<
 * 
 *     def belief(self, node):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_defined_at); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_v_infoset) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_infoset);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":166
 *                             index.__class__.__name__)
 * 
 *     def is_defined_at(self, infoset):             # <<<<<<<<<<<<<<
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.is_defined_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infoset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":176
 *         return self._is_defined_at(infoset)
 * 
 *     def belief(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self._belief(node)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_19belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_19belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("belief (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_18belief(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_18belief(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_9genexpr21__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("belief", 0);

  /* "pygambit/lib/behav.pxi":177
 * 
 *     def belief(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_8pygambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":178
 *     def belief(self, node):
 *         if isinstance(node, Node):
 *             return self._belief(node)             # <<<<<<<<<<<<<<
 *         elif isinstance(node, Infoset):
 *             return [self._belief(n) for n in node.members]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_belief); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_node) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_node);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":177
 * 
 *     def belief(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):
 */
  }

  /* "pygambit/lib/behav.pxi":179
 *         if isinstance(node, Node):
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):             # <<<<<<<<<<<<<<
 *             return [self._belief(n) for n in node.members]
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":180
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):
 *             return [self._belief(n) for n in node.members]             # <<<<<<<<<<<<<<
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %
 *                         node.__class__.__name__)
 */
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 180, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_members); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 180, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 180, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 180, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(3, 180, __pyx_L6_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 180, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(3, 180, __pyx_L6_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 180, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_7(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(3, 180, __pyx_L6_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr21__pyx_v_n, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_belief); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 180, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_9genexpr21__pyx_v_n) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_9genexpr21__pyx_v_n);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 180, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(3, 180, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_n); __pyx_9genexpr21__pyx_v_n = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_n); __pyx_9genexpr21__pyx_v_n = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":179
 *         if isinstance(node, Node):
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):             # <<<<<<<<<<<<<<
 *             return [self._belief(n) for n in node.members]
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %
 */
  }

  /* "pygambit/lib/behav.pxi":182
 *             return [self._belief(n) for n in node.members]
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %
 *                         node.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def action_prob(self, action):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygambit/lib/behav.pxi":181
 *         elif isinstance(node, Infoset):
 *             return [self._belief(n) for n in node.members]
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %             # <<<<<<<<<<<<<<
 *                         node.__class__.__name__)
 * 
 */
  __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_belief_index_must_be_Nod, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_5, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __PYX_ERR(3, 181, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":176
 *         return self._is_defined_at(infoset)
 * 
 *     def belief(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self._belief(node)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.belief", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":184
 *                         node.__class__.__name__)
 * 
 *     def action_prob(self, action):             # <<<<<<<<<<<<<<
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_21action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_21action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("action_prob (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_20action_prob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_20action_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("action_prob", 0);
  __Pyx_INCREF(__pyx_v_action);

  /* "pygambit/lib/behav.pxi":185
 * 
 *     def action_prob(self, action):
 *         if isinstance(action, str):             # <<<<<<<<<<<<<<
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":186
 *     def action_prob(self, action):
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)             # <<<<<<<<<<<<<<
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_action);
    __Pyx_GIVEREF(__pyx_v_action);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_action);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 186, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_action, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pygambit/lib/behav.pxi":187
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/behav.pxi":188
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)             # <<<<<<<<<<<<<<
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_no_action_matching_label_s, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(3, 188, __pyx_L1_error)

      /* "pygambit/lib/behav.pxi":187
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 */
    }

    /* "pygambit/lib/behav.pxi":185
 * 
 *     def action_prob(self, action):
 *         if isinstance(action, str):             # <<<<<<<<<<<<<<
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":189
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/behav.pxi":191
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 *                             action.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return self._action_prob(action)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pygambit/lib/behav.pxi":190
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile action probability index must be str or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             action.__class__.__name__)
 *         return self._action_prob(action)
 */
    __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_action_probability_index, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 190, __pyx_L1_error)

    /* "pygambit/lib/behav.pxi":189
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "pygambit/lib/behav.pxi":192
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 *         return self._action_prob(action)             # <<<<<<<<<<<<<<
 * 
 *     def payoff(self, player_infoset_or_action):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_prob); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_v_action) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_action);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":184
 *                         node.__class__.__name__)
 * 
 *     def action_prob(self, action):             # <<<<<<<<<<<<<<
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.action_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_action);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":194
 *         return self._action_prob(action)
 * 
 *     def payoff(self, player_infoset_or_action):             # <<<<<<<<<<<<<<
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_23payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player_infoset_or_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_23payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player_infoset_or_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("payoff (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_22payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_player_infoset_or_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_22payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_player_infoset_or_action) {
  PyObject *__pyx_v_infoset_or_action = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("payoff", 0);

  /* "pygambit/lib/behav.pxi":195
 * 
 *     def payoff(self, player_infoset_or_action):
 *         if isinstance(player_infoset_or_action, Player):             # <<<<<<<<<<<<<<
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player_infoset_or_action, __pyx_ptype_8pygambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":196
 *     def payoff(self, player_infoset_or_action):
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(player_infoset_or_action, Infoset):
 *             return self._infoset_payoff(player_infoset_or_action)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_player_infoset_or_action) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_player_infoset_or_action);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":195
 * 
 *     def payoff(self, player_infoset_or_action):
 *         if isinstance(player_infoset_or_action, Player):             # <<<<<<<<<<<<<<
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):
 */
  }

  /* "pygambit/lib/behav.pxi":197
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_player_infoset_or_action, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":198
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):
 *             return self._infoset_payoff(player_infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(player_infoset_or_action, Action):
 *             return self._action_payoff(player_infoset_or_action)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset_payoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_player_infoset_or_action) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_player_infoset_or_action);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":197
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):
 */
  }

  /* "pygambit/lib/behav.pxi":199
 *         elif isinstance(player_infoset_or_action, Infoset):
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player_infoset_or_action, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":200
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):
 *             return self._action_payoff(player_infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(player_infoset_or_action, str):
 *             try:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_payoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_player_infoset_or_action) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_player_infoset_or_action);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":199
 *         elif isinstance(player_infoset_or_action, Infoset):
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 */
  }

  /* "pygambit/lib/behav.pxi":201
 *         elif isinstance(player_infoset_or_action, Action):
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 */
  __pyx_t_2 = PyString_Check(__pyx_v_player_infoset_or_action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":202
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "pygambit/lib/behav.pxi":203
 *         elif isinstance(player_infoset_or_action, str):
 *             try:
 *                 return self.payoff(self.game.players[player_infoset_or_action])             # <<<<<<<<<<<<<<
 *             except IndexError:
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 203, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 203, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 203, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_player_infoset_or_action); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 203, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_3 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_9, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 203, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L8_try_return;

        /* "pygambit/lib/behav.pxi":202
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:
 */
      }
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "pygambit/lib/behav.pxi":204
 *             try:
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:             # <<<<<<<<<<<<<<
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 *                 if isinstance(infoset_or_action, Infoset):
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IndexError);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(3, 204, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_5);

        /* "pygambit/lib/behav.pxi":205
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)             # <<<<<<<<<<<<<<
 *                 if isinstance(infoset_or_action, Infoset):
 *                     return self._infoset_payoff(infoset_or_action)
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 205, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 205, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_v_player_infoset_or_action);
        __Pyx_GIVEREF(__pyx_v_player_infoset_or_action);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_player_infoset_or_action);
        __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 205, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 205, __pyx_L6_except_error)
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 205, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_infoset_or_action = __pyx_t_13;
        __pyx_t_13 = 0;

        /* "pygambit/lib/behav.pxi":206
 *             except IndexError:
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 *                 if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):
 */
        __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "pygambit/lib/behav.pxi":207
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 *                 if isinstance(infoset_or_action, Infoset):
 *                     return self._infoset_payoff(infoset_or_action)             # <<<<<<<<<<<<<<
 *                 elif isinstance(infoset_or_action, Action):
 *                     return self._action_payoff(infoset_or_action)
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset_payoff); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 207, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          __pyx_t_13 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_11, __pyx_v_infoset_or_action) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_infoset_or_action);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 207, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_r = __pyx_t_13;
          __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L7_except_return;

          /* "pygambit/lib/behav.pxi":206
 *             except IndexError:
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 *                 if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):
 */
        }

        /* "pygambit/lib/behav.pxi":208
 *                 if isinstance(infoset_or_action, Infoset):
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *                     return self._action_payoff(infoset_or_action)
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 */
        __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
        __pyx_t_1 = (__pyx_t_2 != 0);
        if (__pyx_t_1) {

          /* "pygambit/lib/behav.pxi":209
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):
 *                     return self._action_payoff(infoset_or_action)             # <<<<<<<<<<<<<<
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 *         raise TypeError("profile payoffs index must be int, str, Player, Infoset or Action, not %s" %
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_payoff); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 209, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          __pyx_t_13 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_11, __pyx_v_infoset_or_action) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_infoset_or_action);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 209, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_r = __pyx_t_13;
          __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L7_except_return;

          /* "pygambit/lib/behav.pxi":208
 *                 if isinstance(infoset_or_action, Infoset):
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *                     return self._action_payoff(infoset_or_action)
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 */
        }

        /* "pygambit/lib/behav.pxi":210
 *                 elif isinstance(infoset_or_action, Action):
 *                     return self._action_payoff(infoset_or_action)
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)             # <<<<<<<<<<<<<<
 *         raise TypeError("profile payoffs index must be int, str, Player, Infoset or Action, not %s" %
 *                         player_infoset_or_action.__class__.__name__)
 */
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_infoset_or_action, __pyx_n_s_label); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 210, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_12 = __Pyx_PyString_FormatSafe(__pyx_kp_s_no_matching_label_s, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 210, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 210, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_Raise(__pyx_t_13, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __PYX_ERR(3, 210, __pyx_L6_except_error)
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "pygambit/lib/behav.pxi":202
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:
 */
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
    }

    /* "pygambit/lib/behav.pxi":201
 *         elif isinstance(player_infoset_or_action, Action):
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 */
  }

  /* "pygambit/lib/behav.pxi":212
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 *         raise TypeError("profile payoffs index must be int, str, Player, Infoset or Action, not %s" %
 *                         player_infoset_or_action.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def realiz_prob(self, infoset_or_action):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player_infoset_or_action, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pygambit/lib/behav.pxi":211
 *                     return self._action_payoff(infoset_or_action)
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 *         raise TypeError("profile payoffs index must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                         player_infoset_or_action.__class__.__name__)
 * 
 */
  __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_payoffs_index_must_be_in, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(3, 211, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":194
 *         return self._action_prob(action)
 * 
 *     def payoff(self, player_infoset_or_action):             # <<<<<<<<<<<<<<
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infoset_or_action);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":214
 *                         player_infoset_or_action.__class__.__name__)
 * 
 *     def realiz_prob(self, infoset_or_action):             # <<<<<<<<<<<<<<
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_25realiz_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset_or_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_25realiz_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset_or_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("realiz_prob (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_24realiz_prob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_infoset_or_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_24realiz_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_infoset_or_action) {
  CYTHON_UNUSED PyObject *__pyx_v_infoset = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("realiz_prob", 0);
  __Pyx_INCREF(__pyx_v_infoset_or_action);

  /* "pygambit/lib/behav.pxi":215
 * 
 *     def realiz_prob(self, infoset_or_action):
 *         if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":216
 *     def realiz_prob(self, infoset_or_action):
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(infoset_or_action, Action):
 *             return self._action_prob(infoset_or_action)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset_prob); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_infoset_or_action) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_infoset_or_action);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":215
 * 
 *     def realiz_prob(self, infoset_or_action):
 *         if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):
 */
  }

  /* "pygambit/lib/behav.pxi":217
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/behav.pxi":218
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):
 *             return self._action_prob(infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(infoset_or_action, str):
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_prob); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_infoset_or_action) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_infoset_or_action);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/behav.pxi":217
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):
 */
  }

  /* "pygambit/lib/behav.pxi":219
 *         elif isinstance(infoset_or_action, Action):
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):             # <<<<<<<<<<<<<<
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_infoset_or_action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":220
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)             # <<<<<<<<<<<<<<
 *             if isinstance(infoset_or_action, Infoset):
 *                 return self._infoset_prob(infoset_or_action)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_infoset_or_action);
    __Pyx_GIVEREF(__pyx_v_infoset_or_action);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_infoset_or_action);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 220, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_infoset_or_action, __pyx_t_6);
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_infoset = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pygambit/lib/behav.pxi":221
 *         elif isinstance(infoset_or_action, str):
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_8pygambit_3lib_9libgambit_Infoset); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pygambit/lib/behav.pxi":222
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):
 *                 return self._infoset_prob(infoset_or_action)             # <<<<<<<<<<<<<<
 *             elif isinstance(infoset_or_action, Action):
 *                 return self._action_prob(infoset_or_action)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset_prob); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_v_infoset_or_action) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_infoset_or_action);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/behav.pxi":221
 *         elif isinstance(infoset_or_action, str):
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):
 */
    }

    /* "pygambit/lib/behav.pxi":223
 *             if isinstance(infoset_or_action, Infoset):
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *                 return self._action_prob(infoset_or_action)
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "pygambit/lib/behav.pxi":224
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):
 *                 return self._action_prob(infoset_or_action)             # <<<<<<<<<<<<<<
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %
 *                         infoset_or_action.__class__.__name__)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_prob); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_6 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_v_infoset_or_action) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_infoset_or_action);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 224, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/behav.pxi":223
 *             if isinstance(infoset_or_action, Infoset):
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *                 return self._action_prob(infoset_or_action)
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %
 */
    }

    /* "pygambit/lib/behav.pxi":219
 *         elif isinstance(infoset_or_action, Action):
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):             # <<<<<<<<<<<<<<
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):
 */
  }

  /* "pygambit/lib/behav.pxi":226
 *                 return self._action_prob(infoset_or_action)
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %
 *                         infoset_or_action.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def regret(self, action):
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_infoset_or_action, __pyx_n_s_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygambit/lib/behav.pxi":225
 *             elif isinstance(infoset_or_action, Action):
 *                 return self._action_prob(infoset_or_action)
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                         infoset_or_action.__class__.__name__)
 * 
 */
  __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_probability_index_must_b, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_Raise(__pyx_t_5, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __PYX_ERR(3, 225, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":214
 *                         player_infoset_or_action.__class__.__name__)
 * 
 *     def realiz_prob(self, infoset_or_action):             # <<<<<<<<<<<<<<
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.realiz_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infoset);
  __Pyx_XDECREF(__pyx_v_infoset_or_action);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":228
 *                         infoset_or_action.__class__.__name__)
 * 
 *     def regret(self, action):             # <<<<<<<<<<<<<<
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_27regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_27regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("regret (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_26regret(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_26regret(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("regret", 0);
  __Pyx_INCREF(__pyx_v_action);

  /* "pygambit/lib/behav.pxi":229
 * 
 *     def regret(self, action):
 *         if isinstance(action, str):             # <<<<<<<<<<<<<<
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":230
 *     def regret(self, action):
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)             # <<<<<<<<<<<<<<
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_action);
    __Pyx_GIVEREF(__pyx_v_action);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_action);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 230, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_action, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pygambit/lib/behav.pxi":231
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pygambit/lib/behav.pxi":232
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)             # <<<<<<<<<<<<<<
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyString_FormatSafe(__pyx_kp_s_no_action_matching_label_s, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(3, 232, __pyx_L1_error)

      /* "pygambit/lib/behav.pxi":231
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 */
    }

    /* "pygambit/lib/behav.pxi":229
 * 
 *     def regret(self, action):
 *         if isinstance(action, str):             # <<<<<<<<<<<<<<
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":233
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_8pygambit_3lib_9libgambit_Action); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/behav.pxi":235
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 *                             action.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return self._regret(action)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pygambit/lib/behav.pxi":234
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile regret index must be str or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             action.__class__.__name__)
 *         return self._regret(action)
 */
    __pyx_t_6 = __Pyx_PyString_FormatSafe(__pyx_kp_s_profile_regret_index_must_be_str, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 234, __pyx_L1_error)

    /* "pygambit/lib/behav.pxi":233
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "pygambit/lib/behav.pxi":236
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 *         return self._regret(action)             # <<<<<<<<<<<<<<
 * 
 * cdef class MixedBehaviorProfileDouble(MixedBehaviorProfile):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_regret); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_v_action) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_action);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":228
 *                         infoset_or_action.__class__.__name__)
 * 
 *     def regret(self, action):             # <<<<<<<<<<<<<<
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.regret", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_action);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_28__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_28__reduce_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_MixedBehaviorProf); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MixedBehaviorProfile__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_MixedBehaviorProf); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MixedBehaviorProfile__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_30__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_30__setstate_cython__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_MixedBehaviorProfile__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_MixedBehaviorProfile__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_MixedBehaviorProfile, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_MixedBehaviorProfile__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfile.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":241
 *     cdef c_MixedBehaviorProfileDouble *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble___dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble___dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/behav.pxi":242
 * 
 *     def __dealloc__(self):
 *         del self.profile             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.profile.Length()
 */
  delete __pyx_v_self->profile;

  /* "pygambit/lib/behav.pxi":241
 *     cdef c_MixedBehaviorProfileDouble *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/behav.pxi":243
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.Length()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_2__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/behav.pxi":244
 *         del self.profile
 *     def __len__(self):
 *         return self.profile.Length()             # <<<<<<<<<<<<<<
 * 
 *     def _is_defined_at(self, Infoset infoset):
 */
  __pyx_r = __pyx_v_self->profile->Length();
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":243
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.Length()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":246
 *         return self.profile.Length()
 * 
 *     def _is_defined_at(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_5_is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_5_is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_defined_at (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_8pygambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 246, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4_is_defined_at(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4_is_defined_at(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_defined_at", 0);

  /* "pygambit/lib/behav.pxi":247
 * 
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)             # <<<<<<<<<<<<<<
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->profile->IsDefinedAt(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":246
 *         return self.profile.Length()
 * 
 *     def _is_defined_at(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._is_defined_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":248
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 248, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_6_getprob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_6_getprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getprob", 0);

  /* "pygambit/lib/behav.pxi":249
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)             # <<<<<<<<<<<<<<
 *     def _getaction(self, Action index):
 *         return self.profile.getaction(index.action)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator[](__pyx_v_index);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(3, 249, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":248
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":250
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):             # <<<<<<<<<<<<<<
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_9_getaction(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_9_getaction(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getaction (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "index", 0))) __PYX_ERR(3, 250, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_8_getaction(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_index));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_8_getaction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getaction", 0);

  /* "pygambit/lib/behav.pxi":251
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):
 *         return self.profile.getaction(index.action)             # <<<<<<<<<<<<<<
 *     def _setprob(self, int index, value):
 *         setitem_mbpd_int(self.profile, index, value)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator()(__pyx_v_index->action);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(3, 251, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":250
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):             # <<<<<<<<<<<<<<
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._getaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":252
 *     def _getaction(self, Action index):
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, 1); __PYX_ERR(3, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob") < 0)) __PYX_ERR(3, 252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 252, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_10_setprob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_10_setprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setprob", 0);

  /* "pygambit/lib/behav.pxi":253
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):
 *         setitem_mbpd_int(self.profile, index, value)             # <<<<<<<<<<<<<<
 *     def _setaction(self, Action index, value):
 *         setitem_mbpd_action(self.profile, index.action, value)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 253, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_index, __pyx_t_1);

  /* "pygambit/lib/behav.pxi":252
 *     def _getaction(self, Action index):
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":254
 *     def _setprob(self, int index, value):
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):             # <<<<<<<<<<<<<<
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_13_setaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_13_setaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setaction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setaction", 1, 2, 2, 1); __PYX_ERR(3, 254, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setaction") < 0)) __PYX_ERR(3, 254, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setaction", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 254, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._setaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "index", 0))) __PYX_ERR(3, 254, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_12_setaction(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_12_setaction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setaction", 0);

  /* "pygambit/lib/behav.pxi":255
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):
 *         setitem_mbpd_action(self.profile, index.action, value)             # <<<<<<<<<<<<<<
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 255, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_index->action, __pyx_t_1);

  /* "pygambit/lib/behav.pxi":254
 *     def _setprob(self, int index, value):
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):             # <<<<<<<<<<<<<<
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._setaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":256
 *     def _setaction(self, Action index, value):
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_8pygambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(3, 256, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_14_payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_player));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_14_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_payoff", 0);

  /* "pygambit/lib/behav.pxi":257
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())             # <<<<<<<<<<<<<<
 *     def _belief(self, Node node):
 *         return self.profile.GetBeliefProb(node.node)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_player->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(3, 257, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_t_1->GetNumber())); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":256
 *     def _setaction(self, Action index, value):
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":258
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):             # <<<<<<<<<<<<<<
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_17_belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_17_belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_belief (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pygambit_3lib_9libgambit_Node, 1, "node", 0))) __PYX_ERR(3, 258, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_16_belief(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_16_belief(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_belief", 0);

  /* "pygambit/lib/behav.pxi":259
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):
 *         return self.profile.GetBeliefProb(node.node)             # <<<<<<<<<<<<<<
 *     def _infoset_prob(self, Infoset infoset):
 *         return self.profile.GetRealizProb(infoset.infoset)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetBeliefProb(__pyx_v_node->node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":258
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):             # <<<<<<<<<<<<<<
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._belief", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":260
 *     def _belief(self, Node node):
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_19_infoset_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_19_infoset_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_infoset_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_8pygambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 260, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_18_infoset_prob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_18_infoset_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_infoset_prob", 0);

  /* "pygambit/lib/behav.pxi":261
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):
 *         return self.profile.GetRealizProb(infoset.infoset)             # <<<<<<<<<<<<<<
 *     def _infoset_payoff(self, Infoset infoset):
 *         return self.profile.GetPayoff(infoset.infoset)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetRealizProb(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":260
 *     def _belief(self, Node node):
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._infoset_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":262
 *     def _infoset_prob(self, Infoset infoset):
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_21_infoset_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_21_infoset_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_infoset_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_8pygambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 262, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_20_infoset_payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_20_infoset_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_infoset_payoff", 0);

  /* "pygambit/lib/behav.pxi":263
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):
 *         return self.profile.GetPayoff(infoset.infoset)             # <<<<<<<<<<<<<<
 *     def _action_prob(self, Action action):
 *         return self.profile.GetActionProb(action.action)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":262
 *     def _infoset_prob(self, Infoset infoset):
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._infoset_payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":264
 *     def _infoset_payoff(self, Infoset infoset):
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_23_action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_23_action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_action_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 264, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_22_action_prob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_22_action_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_action_prob", 0);

  /* "pygambit/lib/behav.pxi":265
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):
 *         return self.profile.GetActionProb(action.action)             # <<<<<<<<<<<<<<
 *     def _action_payoff(self, Action action):
 *         return self.profile.GetPayoff(action.action)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetActionProb(__pyx_v_action->action)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":264
 *     def _infoset_payoff(self, Infoset infoset):
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._action_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":266
 *     def _action_prob(self, Action action):
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_25_action_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_25_action_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_action_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 266, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_24_action_payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_24_action_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_action_payoff", 0);

  /* "pygambit/lib/behav.pxi":267
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):
 *         return self.profile.GetPayoff(action.action)             # <<<<<<<<<<<<<<
 *     def _regret(self, Action action):
 *         return self.profile.GetRegret(action.action)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_v_action->action)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":266
 *     def _action_prob(self, Action action):
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._action_payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":268
 *     def _action_payoff(self, Action action):
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetRegret(action.action)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_27_regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_27_regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_regret (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 268, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_26_regret(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_26_regret(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_regret", 0);

  /* "pygambit/lib/behav.pxi":269
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):
 *         return self.profile.GetRegret(action.action)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetRegret(__pyx_v_action->action)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":268
 *     def _action_payoff(self, Action action):
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetRegret(action.action)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble._regret", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":271
 *         return self.profile.GetRegret(action.action)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble behav
 *         behav = MixedBehaviorProfileDouble()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_28copy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_28copy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_behav = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pygambit/lib/behav.pxi":273
 *     def copy(self):
 *         cdef MixedBehaviorProfileDouble behav
 *         behav = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_behav = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/behav.pxi":274
 *         cdef MixedBehaviorProfileDouble behav
 *         behav = MixedBehaviorProfileDouble()
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return behav
 *     def as_strategy(self):
 */
  __pyx_v_behav->profile = new MixedBehaviorProfile<double> ((*__pyx_v_self->profile));

  /* "pygambit/lib/behav.pxi":275
 *         behav = MixedBehaviorProfileDouble()
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav             # <<<<<<<<<<<<<<
 *     def as_strategy(self):
 *         cdef MixedStrategyProfileDouble mixed
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_behav));
  __pyx_r = ((PyObject *)__pyx_v_behav);
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":271
 *         return self.profile.GetRegret(action.action)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble behav
 *         behav = MixedBehaviorProfileDouble()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_behav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":276
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 *     def as_strategy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_31as_strategy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_31as_strategy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_strategy (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_30as_strategy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_30as_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_mixed = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_strategy", 0);

  /* "pygambit/lib/behav.pxi":278
 *     def as_strategy(self):
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())
 *         return mixed
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mixed = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/behav.pxi":279
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())             # <<<<<<<<<<<<<<
 *         return mixed
 *     def liap_value(self):
 */
  __pyx_v_mixed->profile = new MixedStrategyProfile<double> ((*__pyx_v_self->profile).ToMixedProfile());

  /* "pygambit/lib/behav.pxi":280
 *         mixed = MixedStrategyProfileDouble()
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())
 *         return mixed             # <<<<<<<<<<<<<<
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mixed));
  __pyx_r = ((PyObject *)__pyx_v_mixed);
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":276
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 *     def as_strategy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble.as_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mixed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":281
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())
 *         return mixed
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return self.profile.GetLiapValue()
 *     def set_centroid(self):   self.profile.SetCentroid()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_33liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_33liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("liap_value (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_32liap_value(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_32liap_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("liap_value", 0);

  /* "pygambit/lib/behav.pxi":282
 *         return mixed
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()             # <<<<<<<<<<<<<<
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetLiapValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":281
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())
 *         return mixed
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return self.profile.GetLiapValue()
 *     def set_centroid(self):   self.profile.SetCentroid()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble.liap_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":283
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()
 *     def set_centroid(self):   self.profile.SetCentroid()             # <<<<<<<<<<<<<<
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_35set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_35set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_34set_centroid(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_34set_centroid(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid", 0);
  __pyx_v_self->profile->SetCentroid();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":284
 *         return self.profile.GetLiapValue()
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()             # <<<<<<<<<<<<<<
 *     def randomize(self, denom=None):
 *         if denom is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_37normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_37normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_36normalize(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_36normalize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);
  __pyx_v_self->profile->Normalize();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":285
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):             # <<<<<<<<<<<<<<
 *         if denom is None:
 *             self.profile.Randomize()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_39randomize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_39randomize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_denom = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("randomize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_denom,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_denom);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "randomize") < 0)) __PYX_ERR(3, 285, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_denom = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("randomize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 285, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble.randomize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_38randomize(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), __pyx_v_denom);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_38randomize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, PyObject *__pyx_v_denom) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("randomize", 0);

  /* "pygambit/lib/behav.pxi":286
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):
 *         if denom is None:             # <<<<<<<<<<<<<<
 *             self.profile.Randomize()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_denom == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/behav.pxi":287
 *     def randomize(self, denom=None):
 *         if denom is None:
 *             self.profile.Randomize()             # <<<<<<<<<<<<<<
 *         else:
 *             self.profile.Randomize(denom)
 */
    try {
      __pyx_v_self->profile->Randomize();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_TypeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_TypeError); }
      __PYX_ERR(3, 287, __pyx_L1_error)
    }

    /* "pygambit/lib/behav.pxi":286
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):
 *         if denom is None:             # <<<<<<<<<<<<<<
 *             self.profile.Randomize()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pygambit/lib/behav.pxi":289
 *             self.profile.Randomize()
 *         else:
 *             self.profile.Randomize(denom)             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_denom); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 289, __pyx_L1_error)
    __pyx_v_self->profile->Randomize(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pygambit/lib/behav.pxi":285
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom=None):             # <<<<<<<<<<<<<<
 *         if denom is None:
 *             self.profile.Randomize()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble.randomize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":292
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/behav.pxi":294
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.profile.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/behav.pxi":295
 *             cdef Game g
 *             g = Game()
 *             g.game = self.profile.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->profile->GetGame();

  /* "pygambit/lib/behav.pxi":296
 *             g = Game()
 *             g.game = self.profile.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":292
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_40__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_40__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_42__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_42__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileDouble.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":302
 *     cdef c_MixedBehaviorProfileRational *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational___dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational___dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/behav.pxi":303
 * 
 *     def __dealloc__(self):
 *         del self.profile             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.profile.Length()
 */
  delete __pyx_v_self->profile;

  /* "pygambit/lib/behav.pxi":302
 *     cdef c_MixedBehaviorProfileRational *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/behav.pxi":304
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.Length()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_2__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_2__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/behav.pxi":305
 *         del self.profile
 *     def __len__(self):
 *         return self.profile.Length()             # <<<<<<<<<<<<<<
 * 
 *     def _is_defined_at(self, Infoset infoset):
 */
  __pyx_r = __pyx_v_self->profile->Length();
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":304
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.Length()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":307
 *         return self.profile.Length()
 * 
 *     def _is_defined_at(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_5_is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_5_is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_defined_at (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_8pygambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 307, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_4_is_defined_at(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_4_is_defined_at(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_is_defined_at", 0);

  /* "pygambit/lib/behav.pxi":308
 * 
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)             # <<<<<<<<<<<<<<
 *     def _getprob(self, int index):
 *         return rat_to_py(self.profile.getitem(index))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->profile->IsDefinedAt(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":307
 *         return self.profile.Length()
 * 
 *     def _is_defined_at(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._is_defined_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":309
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getaction(self, Action index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 309, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_6_getprob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_6_getprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Rational __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getprob", 0);

  /* "pygambit/lib/behav.pxi":310
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 *         return rat_to_py(self.profile.getitem(index))             # <<<<<<<<<<<<<<
 *     def _getaction(self, Action index):
 *         return rat_to_py(self.profile.getaction(index.action))
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator[](__pyx_v_index);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(3, 310, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":309
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getaction(self, Action index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":311
 *     def _getprob(self, int index):
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getaction(self, Action index):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.getaction(index.action))
 *     def _setprob(self, int index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_9_getaction(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_9_getaction(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getaction (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "index", 0))) __PYX_ERR(3, 311, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_8_getaction(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_index));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_8_getaction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Rational __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getaction", 0);

  /* "pygambit/lib/behav.pxi":312
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getaction(self, Action index):
 *         return rat_to_py(self.profile.getaction(index.action))             # <<<<<<<<<<<<<<
 *     def _setprob(self, int index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator()(__pyx_v_index->action);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(3, 312, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":311
 *     def _getprob(self, int index):
 *         return rat_to_py(self.profile.getitem(index))
 *     def _getaction(self, Action index):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.getaction(index.action))
 *     def _setprob(self, int index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._getaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":313
 *     def _getaction(self, Action index):
 *         return rat_to_py(self.profile.getaction(index.action))
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, 1); __PYX_ERR(3, 313, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob") < 0)) __PYX_ERR(3, 313, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 313, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 313, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_10_setprob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_10_setprob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setprob", 0);

  /* "pygambit/lib/behav.pxi":314
 *         return rat_to_py(self.profile.getaction(index.action))
 *     def _setprob(self, int index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_value); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pygambit/lib/behav.pxi":316
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)             # <<<<<<<<<<<<<<
 *         setitem_mbpr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setaction(self, Action index, value):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pygambit/lib/behav.pxi":315
 *     def _setprob(self, int index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %             # <<<<<<<<<<<<<<
 *                             value.__class__.__name__)
 *         setitem_mbpr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 */
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_rational_precision_profile_requi, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(3, 315, __pyx_L1_error)

    /* "pygambit/lib/behav.pxi":314
 *         return rat_to_py(self.profile.getaction(index.action))
 *     def _setprob(self, int index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  }

  /* "pygambit/lib/behav.pxi":317
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 *         setitem_mbpr_int(self.profile, index, to_rational(str(value).encode('ascii')))             # <<<<<<<<<<<<<<
 *     def _setaction(self, Action index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(3, 317, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_index, to_rational(__pyx_t_7));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/behav.pxi":313
 *     def _getaction(self, Action index):
 *         return rat_to_py(self.profile.getaction(index.action))
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":318
 *                             value.__class__.__name__)
 *         setitem_mbpr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setaction(self, Action index, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_13_setaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_13_setaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setaction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setaction", 1, 2, 2, 1); __PYX_ERR(3, 318, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setaction") < 0)) __PYX_ERR(3, 318, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setaction", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 318, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._setaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "index", 0))) __PYX_ERR(3, 318, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_12_setaction(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_12_setaction(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setaction", 0);

  /* "pygambit/lib/behav.pxi":319
 *         setitem_mbpr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setaction(self, Action index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_value); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pygambit/lib/behav.pxi":321
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)             # <<<<<<<<<<<<<<
 *         setitem_mbpr_action(self.profile, index.action,
 *                             to_rational(str(value).encode('ascii')))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pygambit/lib/behav.pxi":320
 *     def _setaction(self, Action index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %             # <<<<<<<<<<<<<<
 *                             value.__class__.__name__)
 *         setitem_mbpr_action(self.profile, index.action,
 */
    __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_rational_precision_profile_requi, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(3, 320, __pyx_L1_error)

    /* "pygambit/lib/behav.pxi":319
 *         setitem_mbpr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setaction(self, Action index, value):
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  }

  /* "pygambit/lib/behav.pxi":323
 *                             value.__class__.__name__)
 *         setitem_mbpr_action(self.profile, index.action,
 *                             to_rational(str(value).encode('ascii')))             # <<<<<<<<<<<<<<
 *     def _payoff(self, Player player):
 *         return rat_to_py(self.profile.GetPayoff(player.player.deref().GetNumber()))
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(3, 323, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":322
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 *         setitem_mbpr_action(self.profile, index.action,             # <<<<<<<<<<<<<<
 *                             to_rational(str(value).encode('ascii')))
 *     def _payoff(self, Player player):
 */
  setitem(__pyx_v_self->profile, __pyx_v_index->action, to_rational(__pyx_t_7));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/behav.pxi":318
 *                             value.__class__.__name__)
 *         setitem_mbpr_int(self.profile, index, to_rational(str(value).encode('ascii')))
 *     def _setaction(self, Action index, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._setaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":324
 *         setitem_mbpr_action(self.profile, index.action,
 *                             to_rational(str(value).encode('ascii')))
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(player.player.deref().GetNumber()))
 *     def _belief(self, Node node):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_8pygambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(3, 324, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_14_payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_v_player));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_14_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_payoff", 0);

  /* "pygambit/lib/behav.pxi":325
 *                             to_rational(str(value).encode('ascii')))
 *     def _payoff(self, Player player):
 *         return rat_to_py(self.profile.GetPayoff(player.player.deref().GetNumber()))             # <<<<<<<<<<<<<<
 *     def _belief(self, Node node):
 *         return rat_to_py(self.profile.GetBeliefProb(node.node))
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_player->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(3, 325, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetPayoff(__pyx_t_1->GetNumber())); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":324
 *         setitem_mbpr_action(self.profile, index.action,
 *                             to_rational(str(value).encode('ascii')))
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(player.player.deref().GetNumber()))
 *     def _belief(self, Node node):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":326
 *     def _payoff(self, Player player):
 *         return rat_to_py(self.profile.GetPayoff(player.player.deref().GetNumber()))
 *     def _belief(self, Node node):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetBeliefProb(node.node))
 *     def _infoset_prob(self, Infoset infoset):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_17_belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_17_belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_belief (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pygambit_3lib_9libgambit_Node, 1, "node", 0))) __PYX_ERR(3, 326, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_16_belief(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_16_belief(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_belief", 0);

  /* "pygambit/lib/behav.pxi":327
 *         return rat_to_py(self.profile.GetPayoff(player.player.deref().GetNumber()))
 *     def _belief(self, Node node):
 *         return rat_to_py(self.profile.GetBeliefProb(node.node))             # <<<<<<<<<<<<<<
 *     def _infoset_prob(self, Infoset infoset):
 *         return rat_to_py(self.profile.GetRealizProb(infoset.infoset))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetBeliefProb(__pyx_v_node->node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":326
 *     def _payoff(self, Player player):
 *         return rat_to_py(self.profile.GetPayoff(player.player.deref().GetNumber()))
 *     def _belief(self, Node node):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetBeliefProb(node.node))
 *     def _infoset_prob(self, Infoset infoset):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._belief", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":328
 *     def _belief(self, Node node):
 *         return rat_to_py(self.profile.GetBeliefProb(node.node))
 *     def _infoset_prob(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetRealizProb(infoset.infoset))
 *     def _infoset_payoff(self, Infoset infoset):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_19_infoset_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_19_infoset_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_infoset_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_8pygambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 328, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_18_infoset_prob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_18_infoset_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_infoset_prob", 0);

  /* "pygambit/lib/behav.pxi":329
 *         return rat_to_py(self.profile.GetBeliefProb(node.node))
 *     def _infoset_prob(self, Infoset infoset):
 *         return rat_to_py(self.profile.GetRealizProb(infoset.infoset))             # <<<<<<<<<<<<<<
 *     def _infoset_payoff(self, Infoset infoset):
 *         return rat_to_py(self.profile.GetPayoff(infoset.infoset))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetRealizProb(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":328
 *     def _belief(self, Node node):
 *         return rat_to_py(self.profile.GetBeliefProb(node.node))
 *     def _infoset_prob(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetRealizProb(infoset.infoset))
 *     def _infoset_payoff(self, Infoset infoset):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._infoset_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":330
 *     def _infoset_prob(self, Infoset infoset):
 *         return rat_to_py(self.profile.GetRealizProb(infoset.infoset))
 *     def _infoset_payoff(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(infoset.infoset))
 *     def _action_prob(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_21_infoset_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_21_infoset_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_infoset_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_8pygambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 330, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_20_infoset_payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_20_infoset_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_infoset_payoff", 0);

  /* "pygambit/lib/behav.pxi":331
 *         return rat_to_py(self.profile.GetRealizProb(infoset.infoset))
 *     def _infoset_payoff(self, Infoset infoset):
 *         return rat_to_py(self.profile.GetPayoff(infoset.infoset))             # <<<<<<<<<<<<<<
 *     def _action_prob(self, Action action):
 *         return rat_to_py(self.profile.GetActionProb(action.action))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetPayoff(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":330
 *     def _infoset_prob(self, Infoset infoset):
 *         return rat_to_py(self.profile.GetRealizProb(infoset.infoset))
 *     def _infoset_payoff(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(infoset.infoset))
 *     def _action_prob(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._infoset_payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":332
 *     def _infoset_payoff(self, Infoset infoset):
 *         return rat_to_py(self.profile.GetPayoff(infoset.infoset))
 *     def _action_prob(self, Action action):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetActionProb(action.action))
 *     def _action_payoff(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_23_action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_23_action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_action_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 332, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_22_action_prob(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_22_action_prob(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_action_prob", 0);

  /* "pygambit/lib/behav.pxi":333
 *         return rat_to_py(self.profile.GetPayoff(infoset.infoset))
 *     def _action_prob(self, Action action):
 *         return rat_to_py(self.profile.GetActionProb(action.action))             # <<<<<<<<<<<<<<
 *     def _action_payoff(self, Action action):
 *         return rat_to_py(self.profile.GetPayoff(action.action))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetActionProb(__pyx_v_action->action)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":332
 *     def _infoset_payoff(self, Infoset infoset):
 *         return rat_to_py(self.profile.GetPayoff(infoset.infoset))
 *     def _action_prob(self, Action action):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetActionProb(action.action))
 *     def _action_payoff(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._action_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":334
 *     def _action_prob(self, Action action):
 *         return rat_to_py(self.profile.GetActionProb(action.action))
 *     def _action_payoff(self, Action action):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(action.action))
 *     def _regret(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_25_action_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_25_action_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_action_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 334, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_24_action_payoff(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_24_action_payoff(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_action_payoff", 0);

  /* "pygambit/lib/behav.pxi":335
 *         return rat_to_py(self.profile.GetActionProb(action.action))
 *     def _action_payoff(self, Action action):
 *         return rat_to_py(self.profile.GetPayoff(action.action))             # <<<<<<<<<<<<<<
 *     def _regret(self, Action action):
 *         return rat_to_py(self.profile.GetRegret(action.action))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetPayoff(__pyx_v_action->action)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":334
 *     def _action_prob(self, Action action):
 *         return rat_to_py(self.profile.GetActionProb(action.action))
 *     def _action_payoff(self, Action action):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetPayoff(action.action))
 *     def _regret(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._action_payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":336
 *     def _action_payoff(self, Action action):
 *         return rat_to_py(self.profile.GetPayoff(action.action))
 *     def _regret(self, Action action):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetRegret(action.action))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_27_regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_27_regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_regret (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_8pygambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 336, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_26_regret(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_26_regret(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_regret", 0);

  /* "pygambit/lib/behav.pxi":337
 *         return rat_to_py(self.profile.GetPayoff(action.action))
 *     def _regret(self, Action action):
 *         return rat_to_py(self.profile.GetRegret(action.action))             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetRegret(__pyx_v_action->action)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":336
 *     def _action_payoff(self, Action action):
 *         return rat_to_py(self.profile.GetPayoff(action.action))
 *     def _regret(self, Action action):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetRegret(action.action))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational._regret", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":339
 *         return rat_to_py(self.profile.GetRegret(action.action))
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileRational behav
 *         behav = MixedBehaviorProfileRational()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_28copy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_28copy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_behav = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "pygambit/lib/behav.pxi":341
 *     def copy(self):
 *         cdef MixedBehaviorProfileRational behav
 *         behav = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_behav = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/behav.pxi":342
 *         cdef MixedBehaviorProfileRational behav
 *         behav = MixedBehaviorProfileRational()
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return behav
 *     def as_strategy(self):
 */
  __pyx_v_behav->profile = new MixedBehaviorProfile<Rational> ((*__pyx_v_self->profile));

  /* "pygambit/lib/behav.pxi":343
 *         behav = MixedBehaviorProfileRational()
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav             # <<<<<<<<<<<<<<
 *     def as_strategy(self):
 *         cdef MixedStrategyProfileRational mixed
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_behav));
  __pyx_r = ((PyObject *)__pyx_v_behav);
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":339
 *         return rat_to_py(self.profile.GetRegret(action.action))
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileRational behav
 *         behav = MixedBehaviorProfileRational()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_behav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":344
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 *     def as_strategy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_31as_strategy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_31as_strategy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_strategy (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_30as_strategy(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_30as_strategy(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_mixed = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_strategy", 0);

  /* "pygambit/lib/behav.pxi":346
 *     def as_strategy(self):
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())
 *         return mixed
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mixed = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/behav.pxi":347
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())             # <<<<<<<<<<<<<<
 *         return mixed
 *     def liap_value(self):
 */
  __pyx_v_mixed->profile = new MixedStrategyProfile<Rational> ((*__pyx_v_self->profile).ToMixedProfile());

  /* "pygambit/lib/behav.pxi":348
 *         mixed = MixedStrategyProfileRational()
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())
 *         return mixed             # <<<<<<<<<<<<<<
 *     def liap_value(self):
 *         return rat_to_py(self.profile.GetLiapValue())
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mixed));
  __pyx_r = ((PyObject *)__pyx_v_mixed);
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":344
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 *     def as_strategy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational.as_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mixed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":349
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())
 *         return mixed
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetLiapValue())
 *     def set_centroid(self):   self.profile.SetCentroid()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_33liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_33liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("liap_value (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_32liap_value(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_32liap_value(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("liap_value", 0);

  /* "pygambit/lib/behav.pxi":350
 *         return mixed
 *     def liap_value(self):
 *         return rat_to_py(self.profile.GetLiapValue())             # <<<<<<<<<<<<<<
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_v_self->profile->GetLiapValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":349
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())
 *         return mixed
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return rat_to_py(self.profile.GetLiapValue())
 *     def set_centroid(self):   self.profile.SetCentroid()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational.liap_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":351
 *     def liap_value(self):
 *         return rat_to_py(self.profile.GetLiapValue())
 *     def set_centroid(self):   self.profile.SetCentroid()             # <<<<<<<<<<<<<<
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_35set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_35set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_34set_centroid(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_34set_centroid(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid", 0);
  __pyx_v_self->profile->SetCentroid();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":352
 *         return rat_to_py(self.profile.GetLiapValue())
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()             # <<<<<<<<<<<<<<
 *     def randomize(self, denom):
 *         self.profile.Randomize(denom)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_37normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_37normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_36normalize(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_36normalize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);
  __pyx_v_self->profile->Normalize();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":353
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom):             # <<<<<<<<<<<<<<
 *         self.profile.Randomize(denom)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_39randomize(PyObject *__pyx_v_self, PyObject *__pyx_v_denom); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_39randomize(PyObject *__pyx_v_self, PyObject *__pyx_v_denom) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("randomize (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_38randomize(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((PyObject *)__pyx_v_denom));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_38randomize(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, PyObject *__pyx_v_denom) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("randomize", 0);

  /* "pygambit/lib/behav.pxi":354
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom):
 *         self.profile.Randomize(denom)             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_denom); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 354, __pyx_L1_error)
  __pyx_v_self->profile->Randomize(__pyx_t_1);

  /* "pygambit/lib/behav.pxi":353
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 *     def randomize(self, denom):             # <<<<<<<<<<<<<<
 *         self.profile.Randomize(denom)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational.randomize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/behav.pxi":357
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/behav.pxi":359
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.profile.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/behav.pxi":360
 *             cdef Game g
 *             g = Game()
 *             g.game = self.profile.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 */
  __pyx_v_g->game = __pyx_v_self->profile->GetGame();

  /* "pygambit/lib/behav.pxi":361
 *             g = Game()
 *             g.game = self.profile.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/behav.pxi":357
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_40__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_40__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__102, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_42__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_42__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__103, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.MixedBehaviorProfileRational.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":31
 *     "Represents a collection of outcomes in a game."
 *     cdef c_Game game
 *     def __len__(self):    return self.game.deref().NumOutcomes()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, outc):
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Outcomes___len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_8Outcomes___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 31, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumOutcomes();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcomes.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":32
 *     cdef c_Game game
 *     def __len__(self):    return self.game.deref().NumOutcomes()
 *     def __getitem__(self, outc):             # <<<<<<<<<<<<<<
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_outc); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_outc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_2__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *)__pyx_v_self), ((PyObject *)__pyx_v_outc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self, PyObject *__pyx_v_outc) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  GameObjectPtr<GameOutcomeRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/game.pxi":33
 *     def __len__(self):    return self.game.deref().NumOutcomes()
 *     def __getitem__(self, outc):
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)             # <<<<<<<<<<<<<<
 *         cdef Outcome c
 *         c = Outcome()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_outc); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_outc};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 33, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_outc};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 33, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(12, 33, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_outc);
      __Pyx_GIVEREF(__pyx_v_outc);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_outc);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 33, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/game.pxi":35
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 *         c = Outcome()             # <<<<<<<<<<<<<<
 *         c.outcome = self.game.deref().GetOutcome(outc+1)
 *         return c
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Outcome)); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_c = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":36
 *         cdef Outcome c
 *         c = Outcome()
 *         c.outcome = self.game.deref().GetOutcome(outc+1)             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 36, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_outc, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetOutcome(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(12, 36, __pyx_L1_error)
  }
  __pyx_v_c->outcome = __pyx_t_9;

  /* "pygambit/lib/game.pxi":37
 *         c = Outcome()
 *         c.outcome = self.game.deref().GetOutcome(outc+1)
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def add(self, label=""):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":32
 *     cdef c_Game game
 *     def __len__(self):    return self.game.deref().NumOutcomes()
 *     def __getitem__(self, outc):             # <<<<<<<<<<<<<<
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcomes.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":39
 *         return c
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Outcome c
 *         c = Outcome()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__19);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(12, 39, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(12, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcomes.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_4add(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_4add(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self, PyObject *__pyx_v_label) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameRep *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "pygambit/lib/game.pxi":41
 *     def add(self, label=""):
 *         cdef Outcome c
 *         c = Outcome()             # <<<<<<<<<<<<<<
 *         c.outcome = self.game.deref().NewOutcome()
 *         if label != "": c.label = str(label)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Outcome)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":42
 *         cdef Outcome c
 *         c = Outcome()
 *         c.outcome = self.game.deref().NewOutcome()             # <<<<<<<<<<<<<<
 *         if label != "": c.label = str(label)
 *         return c
 */
  try {
    __pyx_t_2 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 42, __pyx_L1_error)
  }
  __pyx_v_c->outcome = __pyx_t_2->NewOutcome();

  /* "pygambit/lib/game.pxi":43
 *         c = Outcome()
 *         c.outcome = self.game.deref().NewOutcome()
 *         if label != "": c.label = str(label)             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_label, __pyx_kp_s__19, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(12, 43, __pyx_L1_error)
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_label, __pyx_t_1) < 0) __PYX_ERR(12, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pygambit/lib/game.pxi":44
 *         c.outcome = self.game.deref().NewOutcome()
 *         if label != "": c.label = str(label)
 *         return c             # <<<<<<<<<<<<<<
 * 
 * cdef class Players(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":39
 *         return c
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Outcome c
 *         c = Outcome()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcomes.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcomes.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8Outcomes_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Outcomes.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":50
 *     cdef c_Game game
 *     cdef StrategicRestriction restriction
 *     def __len__(self):       return self.game.deref().NumPlayers()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, pl):
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_7Players_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_7Players_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Players___len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_7Players___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 50, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumPlayers();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Players.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":51
 *     cdef StrategicRestriction restriction
 *     def __len__(self):       return self.game.deref().NumPlayers()
 *     def __getitem__(self, pl):             # <<<<<<<<<<<<<<
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)
 *         cdef Player p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Players_2__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)__pyx_v_self), ((PyObject *)__pyx_v_pl));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self, PyObject *__pyx_v_pl) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  GameObjectPtr<GamePlayerRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/game.pxi":52
 *     def __len__(self):       return self.game.deref().NumPlayers()
 *     def __getitem__(self, pl):
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)             # <<<<<<<<<<<<<<
 *         cdef Player p
 *         p = Player()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_pl); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_pl};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 52, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_pl};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 52, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(12, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_pl);
      __Pyx_GIVEREF(__pyx_v_pl);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_pl);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/game.pxi":54
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)
 *         cdef Player p
 *         p = Player()             # <<<<<<<<<<<<<<
 *         p.player = self.game.deref().GetPlayer(pl+1)
 *         if self.restriction is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Player)); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":55
 *         cdef Player p
 *         p = Player()
 *         p.player = self.game.deref().GetPlayer(pl+1)             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             p.restriction = self.restriction
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 55, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetPlayer(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(12, 55, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_9;

  /* "pygambit/lib/game.pxi":56
 *         p = Player()
 *         p.player = self.game.deref().GetPlayer(pl+1)
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             p.restriction = self.restriction
 *         return p
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pygambit/lib/game.pxi":57
 *         p.player = self.game.deref().GetPlayer(pl+1)
 *         if self.restriction is not None:
 *             p.restriction = self.restriction             # <<<<<<<<<<<<<<
 *         return p
 * 
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_self->restriction);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_p->restriction);
    __Pyx_DECREF(((PyObject *)__pyx_v_p->restriction));
    __pyx_v_p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/game.pxi":56
 *         p = Player()
 *         p.player = self.game.deref().GetPlayer(pl+1)
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             p.restriction = self.restriction
 *         return p
 */
  }

  /* "pygambit/lib/game.pxi":58
 *         if self.restriction is not None:
 *             p.restriction = self.restriction
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     def add(self, label=""):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":51
 *     cdef StrategicRestriction restriction
 *     def __len__(self):       return self.game.deref().NumPlayers()
 *     def __getitem__(self, pl):             # <<<<<<<<<<<<<<
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)
 *         cdef Player p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Players.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":60
 *         return p
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Player p
 *         if self.restriction is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__19);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(12, 60, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(12, 60, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Players.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Players_4add(((struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_4add(struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self, PyObject *__pyx_v_label) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameRep *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "pygambit/lib/game.pxi":62
 *     def add(self, label=""):
 *         cdef Player p
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         p = Player()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pygambit/lib/game.pxi":63
 *         cdef Player p
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *         p = Player()
 *         p.player = self.game.deref().NewPlayer()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Changing_objects_in_a_restrictio) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Changing_objects_in_a_restrictio);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(12, 63, __pyx_L1_error)

    /* "pygambit/lib/game.pxi":62
 *     def add(self, label=""):
 *         cdef Player p
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         p = Player()
 */
  }

  /* "pygambit/lib/game.pxi":64
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         p = Player()             # <<<<<<<<<<<<<<
 *         p.player = self.game.deref().NewPlayer()
 *         if label != "": p.label = str(label)
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Player)); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":65
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         p = Player()
 *         p.player = self.game.deref().NewPlayer()             # <<<<<<<<<<<<<<
 *         if label != "": p.label = str(label)
 *         return p
 */
  try {
    __pyx_t_6 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 65, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_6->NewPlayer();

  /* "pygambit/lib/game.pxi":66
 *         p = Player()
 *         p.player = self.game.deref().NewPlayer()
 *         if label != "": p.label = str(label)             # <<<<<<<<<<<<<<
 *         return p
 * 
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_label, __pyx_kp_s__19, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 66, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_p), __pyx_n_s_label, __pyx_t_3) < 0) __PYX_ERR(12, 66, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "pygambit/lib/game.pxi":67
 *         p.player = self.game.deref().NewPlayer()
 *         if label != "": p.label = str(label)
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     property chance:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":60
 *         return p
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Player p
 *         if self.restriction is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Players.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":70
 * 
 *     property chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Player p
 *             p = Player()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_6chance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_6chance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Players_6chance___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_6chance___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameRep *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":72
 *         def __get__(self):
 *             cdef Player p
 *             p = Player()             # <<<<<<<<<<<<<<
 *             p.player = self.game.deref().GetChance()
 *             p.restriction = self.restriction
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Player)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":73
 *             cdef Player p
 *             p = Player()
 *             p.player = self.game.deref().GetChance()             # <<<<<<<<<<<<<<
 *             p.restriction = self.restriction
 *             return p
 */
  try {
    __pyx_t_2 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 73, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_2->GetChance();

  /* "pygambit/lib/game.pxi":74
 *             p = Player()
 *             p.player = self.game.deref().GetChance()
 *             p.restriction = self.restriction             # <<<<<<<<<<<<<<
 *             return p
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->restriction);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_p->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_p->restriction));
  __pyx_v_p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":75
 *             p.player = self.game.deref().GetChance()
 *             p.restriction = self.restriction
 *             return p             # <<<<<<<<<<<<<<
 * 
 * cdef class GameActions(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":70
 * 
 *     property chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Player p
 *             p = Player()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Players.chance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Players_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__106, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Players.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7Players_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_7Players_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_7Players_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__107, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Players.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":80
 *     "Represents a collection of actions in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_11GameActions_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_11GameActions_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_11GameActions___len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_11GameActions___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/game.pxi":81
 *     cdef c_Game game
 *     def __len__(self):
 *         return self.game.deref().BehavProfileLength()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, action):
 *         if not isinstance(action, int):
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 81, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->BehavProfileLength();
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":80
 *     "Represents a collection of actions in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameActions.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":82
 *     def __len__(self):
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):             # <<<<<<<<<<<<<<
 *         if not isinstance(action, int):
 *             return Collection.__getitem__(self, action)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_11GameActions_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_11GameActions_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_11GameActions_2__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *)__pyx_v_self), ((PyObject *)__pyx_v_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_11GameActions_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *__pyx_v_self, PyObject *__pyx_v_action) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Action *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  GameObjectPtr<GameActionRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/game.pxi":83
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):
 *         if not isinstance(action, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, action)
 *         cdef Action a
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_action); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/game.pxi":84
 *     def __getitem__(self, action):
 *         if not isinstance(action, int):
 *             return Collection.__getitem__(self, action)             # <<<<<<<<<<<<<<
 *         cdef Action a
 *         a = Action()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_action};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 84, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_action};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 84, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(12, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_action);
      __Pyx_GIVEREF(__pyx_v_action);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_action);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":83
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):
 *         if not isinstance(action, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, action)
 *         cdef Action a
 */
  }

  /* "pygambit/lib/game.pxi":86
 *             return Collection.__getitem__(self, action)
 *         cdef Action a
 *         a = Action()             # <<<<<<<<<<<<<<
 *         a.action = self.game.deref().GetAction(action+1)
 *         return a
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Action)); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_a = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":87
 *         cdef Action a
 *         a = Action()
 *         a.action = self.game.deref().GetAction(action+1)             # <<<<<<<<<<<<<<
 *         return a
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 87, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_action, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetAction(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(12, 87, __pyx_L1_error)
  }
  __pyx_v_a->action = __pyx_t_9;

  /* "pygambit/lib/game.pxi":88
 *         a = Action()
 *         a.action = self.game.deref().GetAction(action+1)
 *         return a             # <<<<<<<<<<<<<<
 * 
 * cdef class GameInfosets(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  __pyx_r = ((PyObject *)__pyx_v_a);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":82
 *     def __len__(self):
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):             # <<<<<<<<<<<<<<
 *         if not isinstance(action, int):
 *             return Collection.__getitem__(self, action)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameActions.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_11GameActions_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_11GameActions_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_11GameActions_4__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_11GameActions_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameActions.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_11GameActions_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_11GameActions_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_11GameActions_6__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_11GameActions_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__109, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameActions.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":93
 *     "Represents a collection of infosets in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         cdef Array[int] num_infosets
 *         num_infosets = self.game.deref().NumInfosets()
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets___len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *__pyx_v_self) {
  Array<int>  __pyx_v_num_infosets;
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_i = NULL;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/game.pxi":95
 *     def __len__(self):
 *         cdef Array[int] num_infosets
 *         num_infosets = self.game.deref().NumInfosets()             # <<<<<<<<<<<<<<
 *         size = num_infosets.Length()
 *         n = 0
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 95, __pyx_L1_error)
  }
  __pyx_v_num_infosets = __pyx_t_1->NumInfosets();

  /* "pygambit/lib/game.pxi":96
 *         cdef Array[int] num_infosets
 *         num_infosets = self.game.deref().NumInfosets()
 *         size = num_infosets.Length()             # <<<<<<<<<<<<<<
 *         n = 0
 *         for i in range(1,size+1):
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_num_infosets.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_size = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pygambit/lib/game.pxi":97
 *         num_infosets = self.game.deref().NumInfosets()
 *         size = num_infosets.Length()
 *         n = 0             # <<<<<<<<<<<<<<
 *         for i in range(1,size+1):
 *             n += num_infosets.getitem(i)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_n = __pyx_int_0;

  /* "pygambit/lib/game.pxi":98
 *         size = num_infosets.Length()
 *         n = 0
 *         for i in range(1,size+1):             # <<<<<<<<<<<<<<
 *             n += num_infosets.getitem(i)
 *         return n
 */
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_size, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 98, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(12, 98, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(12, 98, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(12, 98, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pygambit/lib/game.pxi":99
 *         n = 0
 *         for i in range(1,size+1):
 *             n += num_infosets.getitem(i)             # <<<<<<<<<<<<<<
 *         return n
 *     def __getitem__(self, infoset):
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 99, __pyx_L1_error)
    try {
      __pyx_t_7 = __pyx_v_num_infosets.operator[](__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(12, 99, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_n, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(12, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_n, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "pygambit/lib/game.pxi":98
 *         size = num_infosets.Length()
 *         n = 0
 *         for i in range(1,size+1):             # <<<<<<<<<<<<<<
 *             n += num_infosets.getitem(i)
 *         return n
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":100
 *         for i in range(1,size+1):
 *             n += num_infosets.getitem(i)
 *         return n             # <<<<<<<<<<<<<<
 *     def __getitem__(self, infoset):
 *         if not isinstance(infoset, int):
 */
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_n); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(12, 100, __pyx_L1_error)
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":93
 *     "Represents a collection of infosets in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         cdef Array[int] num_infosets
 *         num_infosets = self.game.deref().NumInfosets()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameInfosets.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":101
 *             n += num_infosets.getitem(i)
 *         return n
 *     def __getitem__(self, infoset):             # <<<<<<<<<<<<<<
 *         if not isinstance(infoset, int):
 *             return Collection.__getitem__(self, infoset)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets_2__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *)__pyx_v_self), ((PyObject *)__pyx_v_infoset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *__pyx_v_self, PyObject *__pyx_v_infoset) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  GameObjectPtr<GameInfosetRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/game.pxi":102
 *         return n
 *     def __getitem__(self, infoset):
 *         if not isinstance(infoset, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, infoset)
 *         cdef Infoset i
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_infoset); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/game.pxi":103
 *     def __getitem__(self, infoset):
 *         if not isinstance(infoset, int):
 *             return Collection.__getitem__(self, infoset)             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         i = Infoset()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_infoset};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 103, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_infoset};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 103, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(12, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_infoset);
      __Pyx_GIVEREF(__pyx_v_infoset);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_infoset);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":102
 *         return n
 *     def __getitem__(self, infoset):
 *         if not isinstance(infoset, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, infoset)
 *         cdef Infoset i
 */
  }

  /* "pygambit/lib/game.pxi":105
 *             return Collection.__getitem__(self, infoset)
 *         cdef Infoset i
 *         i = Infoset()             # <<<<<<<<<<<<<<
 *         i.infoset = self.game.deref().GetInfoset(infoset+1)
 *         return i
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Infoset)); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_i = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":106
 *         cdef Infoset i
 *         i = Infoset()
 *         i.infoset = self.game.deref().GetInfoset(infoset+1)             # <<<<<<<<<<<<<<
 *         return i
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 106, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_infoset, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetInfoset(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(12, 106, __pyx_L1_error)
  }
  __pyx_v_i->infoset = __pyx_t_9;

  /* "pygambit/lib/game.pxi":107
 *         i = Infoset()
 *         i.infoset = self.game.deref().GetInfoset(infoset+1)
 *         return i             # <<<<<<<<<<<<<<
 * 
 * cdef class GameStrategies(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_i));
  __pyx_r = ((PyObject *)__pyx_v_i);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":101
 *             n += num_infosets.getitem(i)
 *         return n
 *     def __getitem__(self, infoset):             # <<<<<<<<<<<<<<
 *         if not isinstance(infoset, int):
 *             return Collection.__getitem__(self, infoset)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameInfosets.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets_4__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__110, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameInfosets.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets_6__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_12GameInfosets_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__111, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameInfosets.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":112
 *     "Represents a collection of strategies in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies___len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies___len__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/game.pxi":113
 *     cdef c_Game game
 *     def __len__(self):
 *         return self.game.deref().MixedProfileLength()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 113, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->MixedProfileLength();
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":112
 *     "Represents a collection of strategies in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameStrategies.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":114
 *     def __len__(self):
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):             # <<<<<<<<<<<<<<
 *         if not isinstance(st, int):
 *             return Collection.__getitem__(self, st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies_2__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *)__pyx_v_self), ((PyObject *)__pyx_v_st));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies_2__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *__pyx_v_self, PyObject *__pyx_v_st) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  GameObjectPtr<GameStrategyRep> __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/game.pxi":115
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, st)
 *         cdef Strategy s
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_st); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/game.pxi":116
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):
 *             return Collection.__getitem__(self, st)             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_st};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 116, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_st};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 116, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(12, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
      __Pyx_INCREF(__pyx_v_st);
      __Pyx_GIVEREF(__pyx_v_st);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_st);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 116, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":115
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, st)
 *         cdef Strategy s
 */
  }

  /* "pygambit/lib/game.pxi":118
 *             return Collection.__getitem__(self, st)
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.game.deref().GetStrategy(st+1)
 *         return s
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Strategy)); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":119
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.game.deref().GetStrategy(st+1)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 119, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_st, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_9 = __pyx_t_8->GetStrategy(__pyx_t_6);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(12, 119, __pyx_L1_error)
  }
  __pyx_v_s->strategy = __pyx_t_9;

  /* "pygambit/lib/game.pxi":120
 *         s = Strategy()
 *         s.strategy = self.game.deref().GetStrategy(st+1)
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class Game(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":114
 *     def __len__(self):
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):             # <<<<<<<<<<<<<<
 *         if not isinstance(st, int):
 *             return Collection.__getitem__(self, st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameStrategies.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies_4__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__112, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameStrategies.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies_6__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_14GameStrategies_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__113, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GameStrategies.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":126
 * 
 *     @classmethod
 *     def new_tree(cls):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_1new_tree(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_1new_tree(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_new_tree(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_new_tree(PyTypeObject *__pyx_v_cls) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_tree", 0);

  /* "pygambit/lib/game.pxi":128
 *     def new_tree(cls):
 *         cdef Game g
 *         g = cls()             # <<<<<<<<<<<<<<
 *         g.game = NewTree()
 *         return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_v_cls)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_Game))))) __PYX_ERR(12, 128, __pyx_L1_error)
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":129
 *         cdef Game g
 *         g = cls()
 *         g.game = NewTree()             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
  __pyx_v_g->game = NewTree();

  /* "pygambit/lib/game.pxi":130
 *         g = cls()
 *         g.game = NewTree()
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":126
 * 
 *     @classmethod
 *     def new_tree(cls):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.new_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":133
 * 
 *     @classmethod
 *     def new_table(cls, dim):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         cdef Array[int] *d
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_3new_table(PyObject *__pyx_v_cls, PyObject *__pyx_v_dim); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_3new_table(PyObject *__pyx_v_cls, PyObject *__pyx_v_dim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_table (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_2new_table(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_dim));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_2new_table(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_dim) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  Array<int>  *__pyx_v_d;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_table", 0);

  /* "pygambit/lib/game.pxi":136
 *         cdef Game g
 *         cdef Array[int] *d
 *         d = new Array[int](len(dim))             # <<<<<<<<<<<<<<
 *         for i in range(1, len(dim)+1):
 *             setitem_array_int(d, i, dim[i-1])
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_dim); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(12, 136, __pyx_L1_error)
  __pyx_v_d = new Array<int> (__pyx_t_1);

  /* "pygambit/lib/game.pxi":137
 *         cdef Array[int] *d
 *         d = new Array[int](len(dim))
 *         for i in range(1, len(dim)+1):             # <<<<<<<<<<<<<<
 *             setitem_array_int(d, i, dim[i-1])
 *         g = cls()
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_dim); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(12, 137, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_1 + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 137, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(12, 137, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(12, 137, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(12, 137, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pygambit/lib/game.pxi":138
 *         d = new Array[int](len(dim))
 *         for i in range(1, len(dim)+1):
 *             setitem_array_int(d, i, dim[i-1])             # <<<<<<<<<<<<<<
 *         g = cls()
 *         g.game = NewTable(d)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 138, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_dim, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(12, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    setitem(__pyx_v_d, __pyx_t_5, __pyx_t_7);

    /* "pygambit/lib/game.pxi":137
 *         cdef Array[int] *d
 *         d = new Array[int](len(dim))
 *         for i in range(1, len(dim)+1):             # <<<<<<<<<<<<<<
 *             setitem_array_int(d, i, dim[i-1])
 *         g = cls()
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":139
 *         for i in range(1, len(dim)+1):
 *             setitem_array_int(d, i, dim[i-1])
 *         g = cls()             # <<<<<<<<<<<<<<
 *         g.game = NewTable(d)
 *         del d
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_v_cls)); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8pygambit_3lib_9libgambit_Game))))) __PYX_ERR(12, 139, __pyx_L1_error)
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":140
 *             setitem_array_int(d, i, dim[i-1])
 *         g = cls()
 *         g.game = NewTable(d)             # <<<<<<<<<<<<<<
 *         del d
 *         return g
 */
  __pyx_v_g->game = NewTable(__pyx_v_d);

  /* "pygambit/lib/game.pxi":141
 *         g = cls()
 *         g.game = NewTable(d)
 *         del d             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
  delete __pyx_v_d;

  /* "pygambit/lib/game.pxi":142
 *         g.game = NewTable(d)
 *         del d
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":133
 * 
 *     @classmethod
 *     def new_table(cls, dim):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         cdef Array[int] *d
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.new_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_5from_arrays(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_5from_arrays(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arrays = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_arrays (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "from_arrays", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arrays = __pyx_args;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_4from_arrays(((PyTypeObject*)__pyx_v_cls), __pyx_v_arrays);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arrays);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pygambit/lib/game.pxi":147
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_11from_arrays_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(12, 147, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_2generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_from_arrays_locals_genexpr, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!gen)) __PYX_ERR(12, 147, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.from_arrays.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(12, 147, __pyx_L1_error)
  __pyx_r = PySet_New(NULL); if (unlikely(!__pyx_r)) __PYX_ERR(12, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays)) { __Pyx_RaiseClosureNameError("arrays"); __PYX_ERR(12, 147, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(12, 147, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(12, 147, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_a);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_a, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_a, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PySet_Add(__pyx_r, (PyObject*)__pyx_t_3))) __PYX_ERR(12, 147, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_5generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pygambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(range(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in range(len(g.players)))):
 *             for pl in range(len(g.players)):
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_11from_arrays_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(12, 150, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_5generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_from_arrays_locals_genexpr, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!gen)) __PYX_ERR(12, 150, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.from_arrays.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_5generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(12, 150, __pyx_L1_error)

  /* "pygambit/lib/game.pxi":151
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(range(arrays[0].shape[i])
 *                                          for i in range(len(g.players)))):             # <<<<<<<<<<<<<<
 *             for pl in range(len(g.players)):
 *                 g[profile][pl] = arrays[pl][profile]
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_g)) { __Pyx_RaiseClosureNameError("g"); __PYX_ERR(12, 151, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_g), __pyx_n_s_players); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(12, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_4;

    /* "pygambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(range(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in range(len(g.players)))):
 *             for pl in range(len(g.players)):
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays)) { __Pyx_RaiseClosureNameError("arrays"); __PYX_ERR(12, 150, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(12, 150, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, __pyx_cur_scope->__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(12, 150, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_4from_arrays(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_arrays) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *__pyx_cur_scope;
  PyObject *__pyx_v_profile = NULL;
  Py_ssize_t __pyx_v_pl;
  PyObject *__pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_2generator3 = 0;
  PyObject *__pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_5generator4 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_arrays", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(__pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(12, 145, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_arrays = __pyx_v_arrays;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arrays);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arrays);

  /* "pygambit/lib/game.pxi":147
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 */
  __pyx_t_1 = __pyx_pf_8pygambit_3lib_9libgambit_4Game_11from_arrays_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(12, 147, __pyx_L1_error)
  }
  __pyx_t_3 = PySet_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(12, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pygambit/lib/game.pxi":148
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 *             raise ValueError("All specified arrays must have the same shape")             # <<<<<<<<<<<<<<
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(range(arrays[0].shape[i])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__114, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(12, 148, __pyx_L1_error)

    /* "pygambit/lib/game.pxi":147
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 */
  }

  /* "pygambit/lib/game.pxi":149
 *         if len(set(a.shape for a in arrays)) > 1:
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)             # <<<<<<<<<<<<<<
 *         for profile in itertools.product(*(range(arrays[0].shape[i])
 *                                          for i in range(len(g.players)))):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game), __pyx_n_s_new_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_arrays, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(12, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_8pygambit_3lib_9libgambit_Game))))) __PYX_ERR(12, 149, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(range(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in range(len(g.players)))):
 *             for pl in range(len(g.players)):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_itertools); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_product); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_pf_8pygambit_3lib_9libgambit_4Game_11from_arrays_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(12, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_6 = __pyx_t_2; __Pyx_INCREF(__pyx_t_6); __pyx_t_3 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(12, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(12, 150, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(12, 150, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(12, 150, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_6);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(12, 150, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_profile, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pygambit/lib/game.pxi":152
 *         for profile in itertools.product(*(range(arrays[0].shape[i])
 *                                          for i in range(len(g.players)))):
 *             for pl in range(len(g.players)):             # <<<<<<<<<<<<<<
 *                 g[profile][pl] = arrays[pl][profile]
 *         return g
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_g), __pyx_n_s_players); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(12, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_t_8;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_pl = __pyx_t_10;

      /* "pygambit/lib/game.pxi":153
 *                                          for i in range(len(g.players)))):
 *             for pl in range(len(g.players)):
 *                 g[profile][pl] = arrays[pl][profile]             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
      __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_arrays, __pyx_v_pl, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_cur_scope->__pyx_v_g), __pyx_v_profile); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_2, __pyx_v_pl, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(12, 153, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "pygambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(range(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in range(len(g.players)))):
 *             for pl in range(len(g.players)):
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pygambit/lib/game.pxi":154
 *             for pl in range(len(g.players)):
 *                 g[profile][pl] = arrays[pl][profile]
 *         return g             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.from_arrays", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_profile);
  __Pyx_XDECREF(__pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_2generator3);
  __Pyx_XDECREF(__pyx_gb_8pygambit_3lib_9libgambit_4Game_11from_arrays_5generator4);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":158
 * 
 *     @classmethod
 *     def read_game(cls, fn):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7read_game(PyObject *__pyx_v_cls, PyObject *__pyx_v_fn); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7read_game(PyObject *__pyx_v_cls, PyObject *__pyx_v_fn) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_game (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_6read_game(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_fn));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_6read_game(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_fn) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  GameObjectPtr<GameRep> __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_game", 0);

  /* "pygambit/lib/game.pxi":160
 *     def read_game(cls, fn):
 *         cdef Game g
 *         g = cls()             # <<<<<<<<<<<<<<
 *         try:
 *             g.game = ReadGame(fn.encode('ascii'))
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_v_cls)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_Game))))) __PYX_ERR(12, 160, __pyx_L1_error)
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":161
 *         cdef Game g
 *         g = cls()
 *         try:             # <<<<<<<<<<<<<<
 *             g.game = ReadGame(fn.encode('ascii'))
 *         except IOError as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "pygambit/lib/game.pxi":162
 *         g = cls()
 *         try:
 *             g.game = ReadGame(fn.encode('ascii'))             # <<<<<<<<<<<<<<
 *         except IOError as e:
 *             raise IOError("Unable to read game from file '%s': %s" %
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_fn, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 162, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ascii);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 162, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(12, 162, __pyx_L3_error)
      try {
        __pyx_t_8 = ReadGame(__pyx_t_7);
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IOError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IOError); }
        __PYX_ERR(12, 162, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_g->game = __pyx_t_8;

      /* "pygambit/lib/game.pxi":161
 *         cdef Game g
 *         g = cls()
 *         try:             # <<<<<<<<<<<<<<
 *             g.game = ReadGame(fn.encode('ascii'))
 *         except IOError as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pygambit/lib/game.pxi":163
 *         try:
 *             g.game = ReadGame(fn.encode('ascii'))
 *         except IOError as e:             # <<<<<<<<<<<<<<
 *             raise IOError("Unable to read game from file '%s': %s" %
 *                         (fn, e))
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("pygambit.lib.libgambit.Game.read_game", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(12, 163, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_v_e = __pyx_t_5;
      /*try:*/ {

        /* "pygambit/lib/game.pxi":165
 *         except IOError as e:
 *             raise IOError("Unable to read game from file '%s': %s" %
 *                         (fn, e))             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
        __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(12, 165, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_v_fn);
        __Pyx_GIVEREF(__pyx_v_fn);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_fn);
        __Pyx_INCREF(__pyx_v_e);
        __Pyx_GIVEREF(__pyx_v_e);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_e);

        /* "pygambit/lib/game.pxi":164
 *             g.game = ReadGame(fn.encode('ascii'))
 *         except IOError as e:
 *             raise IOError("Unable to read game from file '%s': %s" %             # <<<<<<<<<<<<<<
 *                         (fn, e))
 *         return g
 */
        __pyx_t_11 = __Pyx_PyString_Format(__pyx_kp_s_Unable_to_read_game_from_file_s, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(12, 164, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IOError, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(12, 164, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_10, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __PYX_ERR(12, 164, __pyx_L14_error)
      }

      /* "pygambit/lib/game.pxi":163
 *         try:
 *             g.game = ReadGame(fn.encode('ascii'))
 *         except IOError as e:             # <<<<<<<<<<<<<<
 *             raise IOError("Unable to read game from file '%s': %s" %
 *                         (fn, e))
 */
      /*finally:*/ {
        __pyx_L14_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __pyx_t_9 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e);
            __pyx_v_e = NULL;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
          __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
          __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;
          goto __pyx_L5_except_error;
        }
      }
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "pygambit/lib/game.pxi":161
 *         cdef Game g
 *         g = cls()
 *         try:             # <<<<<<<<<<<<<<
 *             g.game = ReadGame(fn.encode('ascii'))
 *         except IOError as e:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "pygambit/lib/game.pxi":166
 *             raise IOError("Unable to read game from file '%s': %s" %
 *                         (fn, e))
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":158
 * 
 *     @classmethod
 *     def read_game(cls, fn):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.read_game", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":169
 * 
 *     @classmethod
 *     def parse_game(cls, s):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_9parse_game(PyObject *__pyx_v_cls, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_9parse_game(PyObject *__pyx_v_cls, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_game (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_8parse_game(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_8parse_game(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_s) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  GameObjectPtr<GameRep> __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse_game", 0);

  /* "pygambit/lib/game.pxi":171
 *     def parse_game(cls, s):
 *         cdef Game g
 *         g = cls()             # <<<<<<<<<<<<<<
 *         g.game = ParseGame(s.encode('ascii'))
 *         return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_v_cls)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_Game))))) __PYX_ERR(12, 171, __pyx_L1_error)
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":172
 *         cdef Game g
 *         g = cls()
 *         g.game = ParseGame(s.encode('ascii'))             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_n_s_ascii);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_t_1); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(12, 172, __pyx_L1_error)
  try {
    __pyx_t_5 = ParseGame(__pyx_t_4);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IOError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IOError); }
    __PYX_ERR(12, 172, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_g->game = __pyx_t_5;

  /* "pygambit/lib/game.pxi":173
 *         g = cls()
 *         g.game = ParseGame(s.encode('ascii'))
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":169
 * 
 *     @classmethod
 *     def parse_game(cls, s):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.parse_game", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":175
 *         return g
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<Game '%s'>" % self.title
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_11__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_11__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_10__str__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_10__str__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pygambit/lib/game.pxi":176
 * 
 *     def __str__(self):
 *         return "<Game '%s'>" % self.title             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_title); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Game_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":175
 *         return g
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<Game '%s'>" % self.title
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":178
 *         return "<Game '%s'>" % self.title
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.write()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_13__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_13__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_12__repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_12__repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/game.pxi":179
 * 
 *     def __repr__(self):
 *         return self.write()             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Game self, other, whichop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":178
 *         return "<Game '%s'>" % self.title
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.write()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":181
 *         return self.write()
 * 
 *     def __richcmp__(Game self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Game):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_15__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_15__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(12, 181, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_14__richcmp__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_14__richcmp__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameRep *__pyx_t_4;
  GameRep *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pygambit/lib/game.pxi":182
 * 
 *     def __richcmp__(Game self, other, whichop):
 *         if isinstance(other, Game):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8pygambit_3lib_9libgambit_Game); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/game.pxi":183
 *     def __richcmp__(Game self, other, whichop):
 *         if isinstance(other, Game):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/game.pxi":184
 *         if isinstance(other, Game):
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.game.deref() != ((<Game>other).game).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->game.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(12, 184, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_other)->game.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(12, 184, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/game.pxi":183
 *     def __richcmp__(Game self, other, whichop):
 *         if isinstance(other, Game):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/game.pxi":185
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.game.deref() != ((<Game>other).game).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/game.pxi":186
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:
 *                 return self.game.deref() != ((<Game>other).game).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->game.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(12, 186, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_other)->game.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(12, 186, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "pygambit/lib/game.pxi":185
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.game.deref() != ((<Game>other).game).deref()
 *             else:
 */
    }

    /* "pygambit/lib/game.pxi":188
 *                 return self.game.deref() != ((<Game>other).game).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(12, 188, __pyx_L1_error)
    }

    /* "pygambit/lib/game.pxi":182
 * 
 *     def __richcmp__(Game self, other, whichop):
 *         if isinstance(other, Game):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()
 */
  }

  /* "pygambit/lib/game.pxi":190
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 190, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pygambit/lib/game.pxi":191
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "pygambit/lib/game.pxi":190
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "pygambit/lib/game.pxi":192
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(__pyx_t_2)) {

      /* "pygambit/lib/game.pxi":193
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "pygambit/lib/game.pxi":192
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "pygambit/lib/game.pxi":195
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(12, 195, __pyx_L1_error)
    }
  }

  /* "pygambit/lib/game.pxi":181
 *         return self.write()
 * 
 *     def __richcmp__(Game self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Game):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":197
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.game.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_4Game_17__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pygambit_3lib_9libgambit_4Game_17__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_16__hash__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pygambit_3lib_9libgambit_4Game_16__hash__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pygambit/lib/game.pxi":198
 * 
 *     def __hash__(self):
 *         return long(<long>self.game.deref())             # <<<<<<<<<<<<<<
 * 
 *     property is_tree:
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 198, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyLong_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(12, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":197
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.game.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":201
 * 
 *     property is_tree:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return True if self.game.deref().IsTree() != 0 else False
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7is_tree_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7is_tree_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_7is_tree___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_7is_tree___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameRep *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":202
 *     property is_tree:
 *         def __get__(self):
 *             return True if self.game.deref().IsTree() != 0 else False             # <<<<<<<<<<<<<<
 * 
 *     property title:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_2 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 202, __pyx_L1_error)
  }
  if (((__pyx_t_2->IsTree() != 0) != 0)) {
    __Pyx_INCREF(Py_True);
    __pyx_t_1 = Py_True;
  } else {
    __Pyx_INCREF(Py_False);
    __pyx_t_1 = Py_False;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":201
 * 
 *     property is_tree:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return True if self.game.deref().IsTree() != 0 else False
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.is_tree.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":205
 * 
 *     property title:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().GetTitle().decode('ascii')
 *         def __set__(self, str value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_5title_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_5title_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_5title___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_5title___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":206
 *     property title:
 *         def __get__(self):
 *             return self.game.deref().GetTitle().decode('ascii')             # <<<<<<<<<<<<<<
 *         def __set__(self, str value):
 *             self.game.deref().SetTitle(value.encode('ascii'))
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 206, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1->GetTitle(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":205
 * 
 *     property title:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().GetTitle().decode('ascii')
 *         def __set__(self, str value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.title.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":207
 *         def __get__(self):
 *             return self.game.deref().GetTitle().decode('ascii')
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             self.game.deref().SetTitle(value.encode('ascii'))
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_4Game_5title_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_4Game_5title_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(12, 207, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_5title_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_4Game_5title_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/game.pxi":208
 *             return self.game.deref().GetTitle().decode('ascii')
 *         def __set__(self, str value):
 *             self.game.deref().SetTitle(value.encode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     property comment:
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 208, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_value, __pyx_n_s_ascii); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(12, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1->SetTitle(__pyx_t_3);

  /* "pygambit/lib/game.pxi":207
 *         def __get__(self):
 *             return self.game.deref().GetTitle().decode('ascii')
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             self.game.deref().SetTitle(value.encode('ascii'))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.title.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":211
 * 
 *     property comment:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().GetComment().decode('ascii')
 *         def __set__(self, str value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7comment_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7comment_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_7comment___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_7comment___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":212
 *     property comment:
 *         def __get__(self):
 *             return self.game.deref().GetComment().decode('ascii')             # <<<<<<<<<<<<<<
 *         def __set__(self, str value):
 *             self.game.deref().SetComment(value.encode('ascii'))
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 212, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1->GetComment(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":211
 * 
 *     property comment:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().GetComment().decode('ascii')
 *         def __set__(self, str value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.comment.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":213
 *         def __get__(self):
 *             return self.game.deref().GetComment().decode('ascii')
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             self.game.deref().SetComment(value.encode('ascii'))
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_4Game_7comment_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_4Game_7comment_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(12, 213, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_7comment_2__set__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_4Game_7comment_2__set__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pygambit/lib/game.pxi":214
 *             return self.game.deref().GetComment().decode('ascii')
 *         def __set__(self, str value):
 *             self.game.deref().SetComment(value.encode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     property actions:
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 214, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyString_Type_encode, __pyx_v_value, __pyx_n_s_ascii); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(12, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1->SetComment(__pyx_t_3);

  /* "pygambit/lib/game.pxi":213
 *         def __get__(self):
 *             return self.game.deref().GetComment().decode('ascii')
 *         def __set__(self, str value):             # <<<<<<<<<<<<<<
 *             self.game.deref().SetComment(value.encode('ascii'))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.comment.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":217
 * 
 *     property actions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameActions a
 *             if self.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7actions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7actions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_7actions___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_7actions___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  GameObjectPtr<GameRep> __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":219
 *         def __get__(self):
 *             cdef GameActions a
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 a = GameActions()
 *                 a.game = self.game
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/game.pxi":220
 *             cdef GameActions a
 *             if self.is_tree:
 *                 a = GameActions()             # <<<<<<<<<<<<<<
 *                 a.game = self.game
 *                 return a
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_GameActions)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_a = ((struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pygambit/lib/game.pxi":221
 *             if self.is_tree:
 *                 a = GameActions()
 *                 a.game = self.game             # <<<<<<<<<<<<<<
 *                 return a
 *             raise UndefinedOperationError("Operation only defined for "\
 */
    __pyx_t_3 = __pyx_v_self->game;
    __pyx_v_a->game = __pyx_t_3;

    /* "pygambit/lib/game.pxi":222
 *                 a = GameActions()
 *                 a.game = self.game
 *                 return a             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Operation only defined for "\
 *                                            "games with a tree representation")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_a));
    __pyx_r = ((PyObject *)__pyx_v_a);
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":219
 *         def __get__(self):
 *             cdef GameActions a
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 a = GameActions()
 *                 a.game = self.game
 */
  }

  /* "pygambit/lib/game.pxi":223
 *                 a.game = self.game
 *                 return a
 *             raise UndefinedOperationError("Operation only defined for "\             # <<<<<<<<<<<<<<
 *                                            "games with a tree representation")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Operation_only_defined_for_games) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Operation_only_defined_for_games);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(12, 223, __pyx_L1_error)

  /* "pygambit/lib/game.pxi":217
 * 
 *     property actions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameActions a
 *             if self.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.actions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":227
 * 
 *     property infosets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameInfosets i
 *             if self.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_8infosets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_8infosets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_8infosets___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_8infosets___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  GameObjectPtr<GameRep> __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":229
 *         def __get__(self):
 *             cdef GameInfosets i
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 i = GameInfosets()
 *                 i.game = self.game
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/game.pxi":230
 *             cdef GameInfosets i
 *             if self.is_tree:
 *                 i = GameInfosets()             # <<<<<<<<<<<<<<
 *                 i.game = self.game
 *                 return i
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_GameInfosets)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_i = ((struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pygambit/lib/game.pxi":231
 *             if self.is_tree:
 *                 i = GameInfosets()
 *                 i.game = self.game             # <<<<<<<<<<<<<<
 *                 return i
 *             raise UndefinedOperationError("Operation only defined for "\
 */
    __pyx_t_3 = __pyx_v_self->game;
    __pyx_v_i->game = __pyx_t_3;

    /* "pygambit/lib/game.pxi":232
 *                 i = GameInfosets()
 *                 i.game = self.game
 *                 return i             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Operation only defined for "\
 *                                            "games with a tree representation")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":229
 *         def __get__(self):
 *             cdef GameInfosets i
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 i = GameInfosets()
 *                 i.game = self.game
 */
  }

  /* "pygambit/lib/game.pxi":233
 *                 i.game = self.game
 *                 return i
 *             raise UndefinedOperationError("Operation only defined for "\             # <<<<<<<<<<<<<<
 *                                            "games with a tree representation")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Operation_only_defined_for_games) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Operation_only_defined_for_games);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(12, 233, __pyx_L1_error)

  /* "pygambit/lib/game.pxi":227
 * 
 *     property infosets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameInfosets i
 *             if self.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.infosets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":237
 * 
 *     property players:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Players p
 *             p = Players()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7players_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_7players_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_7players___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_7players___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Players *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":239
 *         def __get__(self):
 *             cdef Players p
 *             p = Players()             # <<<<<<<<<<<<<<
 *             p.game = self.game
 *             return p
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Players)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":240
 *             cdef Players p
 *             p = Players()
 *             p.game = self.game             # <<<<<<<<<<<<<<
 *             return p
 * 
 */
  __pyx_t_2 = __pyx_v_self->game;
  __pyx_v_p->game = __pyx_t_2;

  /* "pygambit/lib/game.pxi":241
 *             p = Players()
 *             p.game = self.game
 *             return p             # <<<<<<<<<<<<<<
 * 
 *     property strategies:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":237
 * 
 *     property players:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Players p
 *             p = Players()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.players.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":244
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameStrategies s
 *             s = GameStrategies()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_10strategies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_10strategies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_10strategies___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_10strategies___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":246
 *         def __get__(self):
 *             cdef GameStrategies s
 *             s = GameStrategies()             # <<<<<<<<<<<<<<
 *             s.game = self.game
 *             return s
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_GameStrategies)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":247
 *             cdef GameStrategies s
 *             s = GameStrategies()
 *             s.game = self.game             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
  __pyx_t_2 = __pyx_v_self->game;
  __pyx_v_s->game = __pyx_t_2;

  /* "pygambit/lib/game.pxi":248
 *             s = GameStrategies()
 *             s.game = self.game
 *             return s             # <<<<<<<<<<<<<<
 * 
 *     property outcomes:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":244
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameStrategies s
 *             s = GameStrategies()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.strategies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":251
 * 
 *     property outcomes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Outcomes c
 *             c = Outcomes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_8outcomes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_8outcomes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_8outcomes___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_8outcomes___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameRep> __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":253
 *         def __get__(self):
 *             cdef Outcomes c
 *             c = Outcomes()             # <<<<<<<<<<<<<<
 *             c.game = self.game
 *             return c
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Outcomes)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":254
 *             cdef Outcomes c
 *             c = Outcomes()
 *             c.game = self.game             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
  __pyx_t_2 = __pyx_v_self->game;
  __pyx_v_c->game = __pyx_t_2;

  /* "pygambit/lib/game.pxi":255
 *             c = Outcomes()
 *             c.game = self.game
 *             return c             # <<<<<<<<<<<<<<
 * 
 *     property contingencies:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":251
 * 
 *     property outcomes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Outcomes c
 *             c = Outcomes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.outcomes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":258
 * 
 *     property contingencies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pygambit.gameiter.Contingencies(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_13contingencies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_13contingencies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_13contingencies___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_13contingencies___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":259
 *     property contingencies:
 *         def __get__(self):
 *             return pygambit.gameiter.Contingencies(self)             # <<<<<<<<<<<<<<
 * 
 *     property root:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pygambit); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_gameiter); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Contingencies); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_self));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":258
 * 
 *     property contingencies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pygambit.gameiter.Contingencies(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.contingencies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":262
 * 
 *     property root:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_4root_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_4root_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_4root___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_4root___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  GameRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":264
 *         def __get__(self):
 *             cdef Node n
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.game.deref().GetRoot()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/game.pxi":265
 *             cdef Node n
 *             if self.is_tree:
 *                 n = Node()             # <<<<<<<<<<<<<<
 *                 n.node = self.game.deref().GetRoot()
 *                 return n
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_n = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pygambit/lib/game.pxi":266
 *             if self.is_tree:
 *                 n = Node()
 *                 n.node = self.game.deref().GetRoot()             # <<<<<<<<<<<<<<
 *                 return n
 *             raise UndefinedOperationError("Operation only defined for "\
 */
    try {
      __pyx_t_3 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(12, 266, __pyx_L1_error)
    }
    __pyx_v_n->node = __pyx_t_3->GetRoot();

    /* "pygambit/lib/game.pxi":267
 *                 n = Node()
 *                 n.node = self.game.deref().GetRoot()
 *                 return n             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Operation only defined for "\
 *                                            "games with a tree representation")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":264
 *         def __get__(self):
 *             cdef Node n
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.game.deref().GetRoot()
 */
  }

  /* "pygambit/lib/game.pxi":268
 *                 n.node = self.game.deref().GetRoot()
 *                 return n
 *             raise UndefinedOperationError("Operation only defined for "\             # <<<<<<<<<<<<<<
 *                                            "games with a tree representation")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Operation_only_defined_for_games) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Operation_only_defined_for_games);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(12, 268, __pyx_L1_error)

  /* "pygambit/lib/game.pxi":262
 * 
 *     property root:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.root.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":272
 * 
 *     property is_const_sum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().IsConstSum()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_12is_const_sum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_12is_const_sum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_12is_const_sum___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_12is_const_sum___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":273
 *     property is_const_sum:
 *         def __get__(self):
 *             return self.game.deref().IsConstSum()             # <<<<<<<<<<<<<<
 * 
 *     property is_perfect_recall:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 273, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsConstSum()); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":272
 * 
 *     property is_const_sum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().IsConstSum()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.is_const_sum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":276
 * 
 *     property is_perfect_recall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().IsPerfectRecall()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_17is_perfect_recall_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_17is_perfect_recall_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_17is_perfect_recall___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_17is_perfect_recall___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":277
 *     property is_perfect_recall:
 *         def __get__(self):
 *             return self.game.deref().IsPerfectRecall()             # <<<<<<<<<<<<<<
 * 
 *     property min_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 277, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsPerfectRecall()); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":276
 * 
 *     property is_perfect_recall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().IsPerfectRecall()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.is_perfect_recall.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":280
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return rat_to_py(self.game.deref().GetMinPayoff(0))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_10min_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_10min_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_10min_payoff___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_10min_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":281
 *     property min_payoff:
 *         def __get__(self):
 *             return rat_to_py(self.game.deref().GetMinPayoff(0))             # <<<<<<<<<<<<<<
 * 
 *     property max_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 281, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_t_1->GetMinPayoff(0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":280
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return rat_to_py(self.game.deref().GetMinPayoff(0))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.min_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":284
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return rat_to_py(self.game.deref().GetMaxPayoff(0))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_10max_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_10max_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_10max_payoff___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_10max_payoff___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/game.pxi":285
 *     property max_payoff:
 *         def __get__(self):
 *             return rat_to_py(self.game.deref().GetMaxPayoff(0))             # <<<<<<<<<<<<<<
 * 
 *     def _get_contingency(self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 285, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_8pygambit_3lib_9libgambit_rat_to_py(__pyx_t_1->GetMaxPayoff(0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":284
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return rat_to_py(self.game.deref().GetMaxPayoff(0))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.max_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":287
 *             return rat_to_py(self.game.deref().GetMaxPayoff(0))
 * 
 *     def _get_contingency(self, *args):             # <<<<<<<<<<<<<<
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_19_get_contingency(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_19_get_contingency(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_contingency (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_get_contingency", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_18_get_contingency(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_18_get_contingency(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_args) {
  PureStrategyProfile *__pyx_v_psp;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *__pyx_v_outcome = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_tree_outcome = 0;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  GameObjectPtr<GamePlayerRep> __pyx_t_7;
  GamePlayerRep *__pyx_t_8;
  GameObjectPtr<GameStrategyRep> __pyx_t_9;
  int __pyx_t_10;
  GameObjectPtr<GameRep> __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_contingency", 0);

  /* "pygambit/lib/game.pxi":291
 *         cdef Outcome outcome
 *         cdef TreeGameOutcome tree_outcome
 *         psp = new c_PureStrategyProfile(self.game.deref().NewPureStrategyProfile())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(12, 291, __pyx_L1_error)
  }
  __pyx_v_psp = new PureStrategyProfile(__pyx_t_1->NewPureStrategyProfile());

  /* "pygambit/lib/game.pxi":294
 * 
 * 
 *         for (pl, st) in enumerate(args):             # <<<<<<<<<<<<<<
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __pyx_v_args; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(12, 294, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_st, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_pl, __pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pygambit/lib/game.pxi":295
 * 
 *         for (pl, st) in enumerate(args):
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))             # <<<<<<<<<<<<<<
 * 
 *         if self.is_tree:
 */
    try {
      __pyx_t_1 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(12, 295, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_7 = __pyx_t_1->GetPlayer(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(12, 295, __pyx_L1_error)
    }
    try {
      __pyx_t_8 = __pyx_t_7.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(12, 295, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_st, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(12, 295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_9 = __pyx_t_8->GetStrategy(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(12, 295, __pyx_L1_error)
    }
    __pyx_v_psp->operator->()->SetStrategy(__pyx_t_9);

    /* "pygambit/lib/game.pxi":294
 * 
 * 
 *         for (pl, st) in enumerate(args):             # <<<<<<<<<<<<<<
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/game.pxi":297
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))
 * 
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             tree_outcome = TreeGameOutcome()
 *             tree_outcome.psp = psp
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(12, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "pygambit/lib/game.pxi":298
 * 
 *         if self.is_tree:
 *             tree_outcome = TreeGameOutcome()             # <<<<<<<<<<<<<<
 *             tree_outcome.psp = psp
 *             tree_outcome.c_game = self.game
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_TreeGameOutcome)); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_tree_outcome = ((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pygambit/lib/game.pxi":299
 *         if self.is_tree:
 *             tree_outcome = TreeGameOutcome()
 *             tree_outcome.psp = psp             # <<<<<<<<<<<<<<
 *             tree_outcome.c_game = self.game
 *             return tree_outcome
 */
    __pyx_v_tree_outcome->psp = __pyx_v_psp;

    /* "pygambit/lib/game.pxi":300
 *             tree_outcome = TreeGameOutcome()
 *             tree_outcome.psp = psp
 *             tree_outcome.c_game = self.game             # <<<<<<<<<<<<<<
 *             return tree_outcome
 *         else:
 */
    __pyx_t_11 = __pyx_v_self->game;
    __pyx_v_tree_outcome->c_game = __pyx_t_11;

    /* "pygambit/lib/game.pxi":301
 *             tree_outcome.psp = psp
 *             tree_outcome.c_game = self.game
 *             return tree_outcome             # <<<<<<<<<<<<<<
 *         else:
 *             outcome = Outcome()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_tree_outcome));
    __pyx_r = ((PyObject *)__pyx_v_tree_outcome);
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":297
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))
 * 
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             tree_outcome = TreeGameOutcome()
 *             tree_outcome.psp = psp
 */
  }

  /* "pygambit/lib/game.pxi":303
 *             return tree_outcome
 *         else:
 *             outcome = Outcome()             # <<<<<<<<<<<<<<
 *             outcome.outcome = psp.deref().GetOutcome()
 *             del psp
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Outcome)); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_outcome = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pygambit/lib/game.pxi":304
 *         else:
 *             outcome = Outcome()
 *             outcome.outcome = psp.deref().GetOutcome()             # <<<<<<<<<<<<<<
 *             del psp
 *             return outcome
 */
    __pyx_v_outcome->outcome = __pyx_v_psp->operator->()->GetOutcome();

    /* "pygambit/lib/game.pxi":305
 *             outcome = Outcome()
 *             outcome.outcome = psp.deref().GetOutcome()
 *             del psp             # <<<<<<<<<<<<<<
 *             return outcome
 * 
 */
    delete __pyx_v_psp;

    /* "pygambit/lib/game.pxi":306
 *             outcome.outcome = psp.deref().GetOutcome()
 *             del psp
 *             return outcome             # <<<<<<<<<<<<<<
 * 
 *     # As of Cython 0.11.2, cython does not support the * notation for the argument
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_outcome));
    __pyx_r = ((PyObject *)__pyx_v_outcome);
    goto __pyx_L0;
  }

  /* "pygambit/lib/game.pxi":287
 *             return rat_to_py(self.game.deref().GetMaxPayoff(0))
 * 
 *     def _get_contingency(self, *args):             # <<<<<<<<<<<<<<
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game._get_contingency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_outcome);
  __Pyx_XDECREF((PyObject *)__pyx_v_tree_outcome);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":311
 *     # to __getitem__, which is required for multidimensional slicing to work.
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(i) != len(self.players):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_20__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_20__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_v_cont = NULL;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_9genexpr24__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/game.pxi":312
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "pygambit/lib/game.pxi":313
 *     def __getitem__(self, i):
 *         try:
 *             if len(i) != len(self.players):             # <<<<<<<<<<<<<<
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 */
      __pyx_t_4 = PyObject_Length(__pyx_v_i); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(12, 313, __pyx_L3_error)
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 313, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(12, 313, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = ((__pyx_t_4 != __pyx_t_6) != 0);
      if (unlikely(__pyx_t_7)) {

        /* "pygambit/lib/game.pxi":314
 *         try:
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"
 */
        __Pyx_Raise(__pyx_builtin_KeyError, __pyx_kp_s_Number_of_strategies_is_not_equa, 0, 0);
        __PYX_ERR(12, 314, __pyx_L3_error)

        /* "pygambit/lib/game.pxi":313
 *     def __getitem__(self, i):
 *         try:
 *             if len(i) != len(self.players):             # <<<<<<<<<<<<<<
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 */
      }

      /* "pygambit/lib/game.pxi":312
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pygambit/lib/game.pxi":315
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(12, 315, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_10);

      /* "pygambit/lib/game.pxi":316
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"             # <<<<<<<<<<<<<<
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 */
      __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_contingency_must_be_a_tuple_like, 0, 0);
      __PYX_ERR(12, 316, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "pygambit/lib/game.pxi":312
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "pygambit/lib/game.pxi":317
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)             # <<<<<<<<<<<<<<
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_10)) __PYX_ERR(12, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(12, 317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyList_New(1 * ((__pyx_t_6<0) ? 0:__pyx_t_6)); if (unlikely(!__pyx_t_10)) __PYX_ERR(12, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_6; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyList_SET_ITEM(__pyx_t_10, __pyx_temp, __pyx_int_0);
    }
  }
  __pyx_v_cont = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "pygambit/lib/game.pxi":318
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):             # <<<<<<<<<<<<<<
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_10 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_i)) || PyTuple_CheckExact(__pyx_v_i)) {
    __pyx_t_9 = __pyx_v_i; __Pyx_INCREF(__pyx_t_9); __pyx_t_6 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(12, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(12, 318, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(12, 318, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 318, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(12, 318, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 318, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_11(__pyx_t_9);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(12, 318, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_st, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_pl, __pyx_t_10);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_10, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10);
    __pyx_t_10 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pygambit/lib/game.pxi":319
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):             # <<<<<<<<<<<<<<
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 */
    __pyx_t_7 = PyInt_Check(__pyx_v_st); 
    __pyx_t_12 = (__pyx_t_7 != 0);
    if (__pyx_t_12) {

      /* "pygambit/lib/game.pxi":320
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_st, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 320, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(12, 320, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!__pyx_t_7) {
      } else {
        __pyx_t_12 = __pyx_t_7;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_pl); if (unlikely(!__pyx_t_13)) __PYX_ERR(12, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_strategies); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_4 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(12, 320, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 320, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyObject_RichCompare(__pyx_v_st, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(12, 320, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(12, 320, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_12 = __pyx_t_7;
      __pyx_L16_bool_binop_done:;
      if (unlikely(__pyx_t_12)) {

        /* "pygambit/lib/game.pxi":321
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)             # <<<<<<<<<<<<<<
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 */
        __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(12, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_v_st);
        __Pyx_GIVEREF(__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_st);
        __Pyx_INCREF(__pyx_v_pl);
        __Pyx_GIVEREF(__pyx_v_pl);
        PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_pl);
        __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Provided_strategy_index_d_out_of, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(12, 321, __pyx_L1_error)

        /* "pygambit/lib/game.pxi":320
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 */
      }

      /* "pygambit/lib/game.pxi":322
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st             # <<<<<<<<<<<<<<
 *             elif isinstance(st, str):
 *                 try:
 */
      if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_v_st) < 0)) __PYX_ERR(12, 322, __pyx_L1_error)

      /* "pygambit/lib/game.pxi":319
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):             # <<<<<<<<<<<<<<
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 */
      goto __pyx_L14;
    }

    /* "pygambit/lib/game.pxi":323
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 *             elif isinstance(st, str):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 */
    __pyx_t_12 = PyString_Check(__pyx_v_st); 
    __pyx_t_7 = (__pyx_t_12 != 0);
    if (__pyx_t_7) {

      /* "pygambit/lib/game.pxi":324
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_1);
        /*try:*/ {

          /* "pygambit/lib/game.pxi":325
 *             elif isinstance(st, str):
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)             # <<<<<<<<<<<<<<
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 */
          { /* enter inner scope */
            __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(12, 325, __pyx_L28_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_14)) __PYX_ERR(12, 325, __pyx_L28_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_t_14, __pyx_v_pl); if (unlikely(!__pyx_t_15)) __PYX_ERR(12, 325, __pyx_L28_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_strategies); if (unlikely(!__pyx_t_14)) __PYX_ERR(12, 325, __pyx_L28_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
              __pyx_t_15 = __pyx_t_14; __Pyx_INCREF(__pyx_t_15); __pyx_t_4 = 0;
              __pyx_t_16 = NULL;
            } else {
              __pyx_t_4 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(12, 325, __pyx_L28_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(12, 325, __pyx_L28_error)
            }
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            for (;;) {
              if (likely(!__pyx_t_16)) {
                if (likely(PyList_CheckExact(__pyx_t_15))) {
                  if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_15)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_14 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(12, 325, __pyx_L28_error)
                  #else
                  __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(12, 325, __pyx_L28_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  #endif
                } else {
                  if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(12, 325, __pyx_L28_error)
                  #else
                  __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(12, 325, __pyx_L28_error)
                  __Pyx_GOTREF(__pyx_t_14);
                  #endif
                }
              } else {
                __pyx_t_14 = __pyx_t_16(__pyx_t_15);
                if (unlikely(!__pyx_t_14)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(12, 325, __pyx_L28_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_14);
              }
              __Pyx_XDECREF_SET(__pyx_9genexpr24__pyx_v_s, __pyx_t_14);
              __pyx_t_14 = 0;
              __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr24__pyx_v_s, __pyx_n_s_label); if (unlikely(!__pyx_t_14)) __PYX_ERR(12, 325, __pyx_L28_error)
              __Pyx_GOTREF(__pyx_t_14);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_14))) __PYX_ERR(12, 325, __pyx_L28_error)
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            }
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_9genexpr24__pyx_v_s); __pyx_9genexpr24__pyx_v_s = 0;
            goto __pyx_L31_exit_scope;
            __pyx_L28_error:;
            __Pyx_XDECREF(__pyx_9genexpr24__pyx_v_s); __pyx_9genexpr24__pyx_v_s = 0;
            goto __pyx_L18_error;
            __pyx_L31_exit_scope:;
          } /* exit inner scope */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(12, 325, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_5 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_13, __pyx_v_st) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_st);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 325, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_t_5) < 0)) __PYX_ERR(12, 325, __pyx_L18_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "pygambit/lib/game.pxi":324
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
        }
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L25_try_end;
        __pyx_L18_error:;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "pygambit/lib/game.pxi":326
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 */
        __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_8) {
          __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_15, &__pyx_t_13) < 0) __PYX_ERR(12, 326, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_13);

          /* "pygambit/lib/game.pxi":327
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st             # <<<<<<<<<<<<<<
 *             elif isinstance(st, Strategy):
 *                 try:
 */
          __pyx_t_14 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Provided_strategy_label_s_not_de, __pyx_v_st); if (unlikely(!__pyx_t_14)) __PYX_ERR(12, 327, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_14, 0, 0);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __PYX_ERR(12, 327, __pyx_L20_except_error)
        }
        goto __pyx_L20_except_error;
        __pyx_L20_except_error:;

        /* "pygambit/lib/game.pxi":324
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
        goto __pyx_L1_error;
        __pyx_L25_try_end:;
      }

      /* "pygambit/lib/game.pxi":323
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 *             elif isinstance(st, str):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 */
      goto __pyx_L14;
    }

    /* "pygambit/lib/game.pxi":328
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 */
    __pyx_t_7 = __Pyx_TypeCheck(__pyx_v_st, __pyx_ptype_8pygambit_3lib_9libgambit_Strategy); 
    __pyx_t_12 = (__pyx_t_7 != 0);
    if (likely(__pyx_t_12)) {

      /* "pygambit/lib/game.pxi":329
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_3);
        /*try:*/ {

          /* "pygambit/lib/game.pxi":330
 *             elif isinstance(st, Strategy):
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)             # <<<<<<<<<<<<<<
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_15)) __PYX_ERR(12, 330, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_15, __pyx_v_pl); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 330, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_strategies); if (unlikely(!__pyx_t_15)) __PYX_ERR(12, 330, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PySequence_List(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 330, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(12, 330, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          __pyx_t_13 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_5, __pyx_v_st) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_st);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(12, 330, __pyx_L34_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_t_13) < 0)) __PYX_ERR(12, 330, __pyx_L34_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "pygambit/lib/game.pxi":329
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
        }
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L41_try_end;
        __pyx_L34_error:;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "pygambit/lib/game.pxi":331
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 */
        __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_8) {
          __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_15, &__pyx_t_5) < 0) __PYX_ERR(12, 331, __pyx_L36_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_5);

          /* "pygambit/lib/game.pxi":332
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")
 */
          __pyx_t_14 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Provided_strategy_s_not_availabl, __pyx_v_st); if (unlikely(!__pyx_t_14)) __PYX_ERR(12, 332, __pyx_L36_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_14, 0, 0);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __PYX_ERR(12, 332, __pyx_L36_except_error)
        }
        goto __pyx_L36_except_error;
        __pyx_L36_except_error:;

        /* "pygambit/lib/game.pxi":329
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
        goto __pyx_L1_error;
        __pyx_L41_try_end:;
      }

      /* "pygambit/lib/game.pxi":328
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 */
      goto __pyx_L14;
    }

    /* "pygambit/lib/game.pxi":334
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")             # <<<<<<<<<<<<<<
 *         return self._get_contingency(*tuple(cont))
 * 
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(12, 334, __pyx_L1_error)
    }
    __pyx_L14:;

    /* "pygambit/lib/game.pxi":318
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):             # <<<<<<<<<<<<<<
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "pygambit/lib/game.pxi":335
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")
 *         return self._get_contingency(*tuple(cont))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_contingency); if (unlikely(!__pyx_t_10)) __PYX_ERR(12, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = PyList_AsTuple(__pyx_v_cont); if (unlikely(!__pyx_t_9)) __PYX_ERR(12, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(12, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":311
 *     # to __getitem__, which is required for multidimensional slicing to work.
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(i) != len(self.players):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cont);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XDECREF(__pyx_9genexpr24__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":338
 * 
 * 
 *     def mixed_strategy_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mspd
 *         cdef MixedStrategyProfileRational mspr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_23mixed_strategy_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_23mixed_strategy_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rational = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mixed_strategy_profile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rational,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rational);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mixed_strategy_profile") < 0)) __PYX_ERR(12, 338, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rational = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mixed_strategy_profile", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(12, 338, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.mixed_strategy_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_22mixed_strategy_profile(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self), __pyx_v_rational);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_22mixed_strategy_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_rational) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_mspd = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_mspr = 0;
  Rational __pyx_v_dummy_rat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameRep *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mixed_strategy_profile", 0);

  /* "pygambit/lib/game.pxi":342
 *         cdef MixedStrategyProfileRational mspr
 *         cdef c_Rational dummy_rat
 *         if not self.is_perfect_recall:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_perfect_recall); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "pygambit/lib/game.pxi":343
 *         cdef c_Rational dummy_rat
 *         if not self.is_perfect_recall:
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")             # <<<<<<<<<<<<<<
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Mixed_strategies_not_supported_f) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Mixed_strategies_not_supported_f);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(12, 343, __pyx_L1_error)

    /* "pygambit/lib/game.pxi":342
 *         cdef MixedStrategyProfileRational mspr
 *         cdef c_Rational dummy_rat
 *         if not self.is_perfect_recall:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:
 */
  }

  /* "pygambit/lib/game.pxi":344
 *         if not self.is_perfect_recall:
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:             # <<<<<<<<<<<<<<
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_rational); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(12, 344, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_3) != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/game.pxi":345
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))
 *             return mspd
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_mspd = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pygambit/lib/game.pxi":346
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))             # <<<<<<<<<<<<<<
 *             return mspd
 *         else:
 */
    try {
      __pyx_t_6 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(12, 346, __pyx_L1_error)
    }
    __pyx_v_mspd->profile = new MixedStrategyProfile<double> (__pyx_t_6->NewMixedStrategyProfile(0.0));

    /* "pygambit/lib/game.pxi":347
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))
 *             return mspd             # <<<<<<<<<<<<<<
 *         else:
 *             mspr = MixedStrategyProfileRational()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_mspd));
    __pyx_r = ((PyObject *)__pyx_v_mspd);
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":344
 *         if not self.is_perfect_recall:
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:             # <<<<<<<<<<<<<<
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))
 */
  }

  /* "pygambit/lib/game.pxi":349
 *             return mspd
 *         else:
 *             mspr = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             mspr.profile = new c_MixedStrategyProfileRational(self.game.deref().NewMixedStrategyProfile(dummy_rat))
 *             return mspr
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_mspr = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pygambit/lib/game.pxi":350
 *         else:
 *             mspr = MixedStrategyProfileRational()
 *             mspr.profile = new c_MixedStrategyProfileRational(self.game.deref().NewMixedStrategyProfile(dummy_rat))             # <<<<<<<<<<<<<<
 *             return mspr
 * 
 */
    try {
      __pyx_t_6 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(12, 350, __pyx_L1_error)
    }
    __pyx_v_mspr->profile = new MixedStrategyProfile<Rational> (__pyx_t_6->NewMixedStrategyProfile(__pyx_v_dummy_rat));

    /* "pygambit/lib/game.pxi":351
 *             mspr = MixedStrategyProfileRational()
 *             mspr.profile = new c_MixedStrategyProfileRational(self.game.deref().NewMixedStrategyProfile(dummy_rat))
 *             return mspr             # <<<<<<<<<<<<<<
 * 
 *     def mixed_behavior_profile(self, rational=False):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_mspr));
    __pyx_r = ((PyObject *)__pyx_v_mspr);
    goto __pyx_L0;
  }

  /* "pygambit/lib/game.pxi":338
 * 
 * 
 *     def mixed_strategy_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mspd
 *         cdef MixedStrategyProfileRational mspr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.mixed_strategy_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mspd);
  __Pyx_XDECREF((PyObject *)__pyx_v_mspr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":353
 *             return mspr
 * 
 *     def mixed_behavior_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble mbpd
 *         cdef MixedBehaviorProfileRational mbpr
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_25mixed_behavior_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_25mixed_behavior_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rational = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mixed_behavior_profile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rational,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rational);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mixed_behavior_profile") < 0)) __PYX_ERR(12, 353, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rational = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mixed_behavior_profile", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(12, 353, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.mixed_behavior_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_24mixed_behavior_profile(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self), __pyx_v_rational);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_24mixed_behavior_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_rational) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_mbpd = 0;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_mbpr = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mixed_behavior_profile", 0);

  /* "pygambit/lib/game.pxi":356
 *         cdef MixedBehaviorProfileDouble mbpd
 *         cdef MixedBehaviorProfileRational mbpr
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             if not rational:
 *                 mbpd = MixedBehaviorProfileDouble()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "pygambit/lib/game.pxi":357
 *         cdef MixedBehaviorProfileRational mbpr
 *         if self.is_tree:
 *             if not rational:             # <<<<<<<<<<<<<<
 *                 mbpd = MixedBehaviorProfileDouble()
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rational); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 357, __pyx_L1_error)
    __pyx_t_3 = ((!__pyx_t_2) != 0);
    if (__pyx_t_3) {

      /* "pygambit/lib/game.pxi":358
 *         if self.is_tree:
 *             if not rational:
 *                 mbpd = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)
 *                 return mbpd
 */
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_mbpd = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "pygambit/lib/game.pxi":359
 *             if not rational:
 *                 mbpd = MixedBehaviorProfileDouble()
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)             # <<<<<<<<<<<<<<
 *                 return mbpd
 *             else:
 */
      __pyx_v_mbpd->profile = new MixedBehaviorProfile<double> (__pyx_v_self->game);

      /* "pygambit/lib/game.pxi":360
 *                 mbpd = MixedBehaviorProfileDouble()
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)
 *                 return mbpd             # <<<<<<<<<<<<<<
 *             else:
 *                 mbpr = MixedBehaviorProfileRational()
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_mbpd));
      __pyx_r = ((PyObject *)__pyx_v_mbpd);
      goto __pyx_L0;

      /* "pygambit/lib/game.pxi":357
 *         cdef MixedBehaviorProfileRational mbpr
 *         if self.is_tree:
 *             if not rational:             # <<<<<<<<<<<<<<
 *                 mbpd = MixedBehaviorProfileDouble()
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)
 */
    }

    /* "pygambit/lib/game.pxi":362
 *                 return mbpd
 *             else:
 *                 mbpr = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *                 mbpr.profile = new c_MixedBehaviorProfileRational(self.game)
 *                 return mbpr
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational)); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_mbpr = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "pygambit/lib/game.pxi":363
 *             else:
 *                 mbpr = MixedBehaviorProfileRational()
 *                 mbpr.profile = new c_MixedBehaviorProfileRational(self.game)             # <<<<<<<<<<<<<<
 *                 return mbpr
 *         else:
 */
      __pyx_v_mbpr->profile = new MixedBehaviorProfile<Rational> (__pyx_v_self->game);

      /* "pygambit/lib/game.pxi":364
 *                 mbpr = MixedBehaviorProfileRational()
 *                 mbpr.profile = new c_MixedBehaviorProfileRational(self.game)
 *                 return mbpr             # <<<<<<<<<<<<<<
 *         else:
 *             raise UndefinedOperationError("Game must have a tree representation"\
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_mbpr));
      __pyx_r = ((PyObject *)__pyx_v_mbpr);
      goto __pyx_L0;
    }

    /* "pygambit/lib/game.pxi":356
 *         cdef MixedBehaviorProfileDouble mbpd
 *         cdef MixedBehaviorProfileRational mbpr
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             if not rational:
 *                 mbpd = MixedBehaviorProfileDouble()
 */
  }

  /* "pygambit/lib/game.pxi":366
 *                 return mbpr
 *         else:
 *             raise UndefinedOperationError("Game must have a tree representation"\             # <<<<<<<<<<<<<<
 *                                       " to create a mixed behavior profile")
 * 
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_Game_must_have_a_tree_representa) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_Game_must_have_a_tree_representa);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(12, 366, __pyx_L1_error)
  }

  /* "pygambit/lib/game.pxi":353
 *             return mspr
 * 
 *     def mixed_behavior_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble mbpd
 *         cdef MixedBehaviorProfileRational mbpr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.mixed_behavior_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mbpd);
  __Pyx_XDECREF((PyObject *)__pyx_v_mbpr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":369
 *                                       " to create a mixed behavior profile")
 * 
 *     def support_profile(self):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(self.strategies), self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_27support_profile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_27support_profile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("support_profile (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_26support_profile(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_26support_profile(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("support_profile", 0);

  /* "pygambit/lib/game.pxi":370
 * 
 *     def support_profile(self):
 *         return StrategySupportProfile(list(self.strategies), self)             # <<<<<<<<<<<<<<
 * 
 *     def num_nodes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategies); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":369
 *                                       " to create a mixed behavior profile")
 * 
 *     def support_profile(self):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(self.strategies), self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.support_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":372
 *         return StrategySupportProfile(list(self.strategies), self)
 * 
 *     def num_nodes(self):             # <<<<<<<<<<<<<<
 *         if self.is_tree:
 *             return self.game.deref().NumNodes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_29num_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_29num_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_nodes (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_28num_nodes(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_28num_nodes(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  GameRep *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("num_nodes", 0);

  /* "pygambit/lib/game.pxi":373
 * 
 *     def num_nodes(self):
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             return self.game.deref().NumNodes()
 *         return 0
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(12, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pygambit/lib/game.pxi":374
 *     def num_nodes(self):
 *         if self.is_tree:
 *             return self.game.deref().NumNodes()             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(12, 374, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_3->NumNodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":373
 * 
 *     def num_nodes(self):
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             return self.game.deref().NumNodes()
 *         return 0
 */
  }

  /* "pygambit/lib/game.pxi":375
 *         if self.is_tree:
 *             return self.game.deref().NumNodes()
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":372
 *         return StrategySupportProfile(list(self.strategies), self)
 * 
 *     def num_nodes(self):             # <<<<<<<<<<<<<<
 *         if self.is_tree:
 *             return self.game.deref().NumNodes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.num_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":377
 *         return 0
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_31unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_31unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_30unrestrict(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_30unrestrict(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "pygambit/lib/game.pxi":378
 * 
 *     def unrestrict(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def write(self, format='native'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pygambit/lib/game.pxi":377
 *         return 0
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/game.pxi":380
 *         return self
 * 
 *     def write(self, format='native'):             # <<<<<<<<<<<<<<
 *         cdef string s
 *         if format == 'gte':
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_33write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_33write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_format = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_format,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write") < 0)) __PYX_ERR(12, 380, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_format = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(12, 380, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_32write(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self), __pyx_v_format);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_32write(struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_format) {
  std::string __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 0);

  /* "pygambit/lib/game.pxi":382
 *     def write(self, format='native'):
 *         cdef string s
 *         if format == 'gte':             # <<<<<<<<<<<<<<
 *             return pygambit.gte.write_game(self)
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_format, __pyx_n_s_gte, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(12, 382, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pygambit/lib/game.pxi":383
 *         cdef string s
 *         if format == 'gte':
 *             return pygambit.gte.write_game(self)             # <<<<<<<<<<<<<<
 *         else:
 *             s = format.encode('ascii')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pygambit); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_gte); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_write_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pygambit/lib/game.pxi":382
 *     def write(self, format='native'):
 *         cdef string s
 *         if format == 'gte':             # <<<<<<<<<<<<<<
 *             return pygambit.gte.write_game(self)
 *         else:
 */
  }

  /* "pygambit/lib/game.pxi":385
 *             return pygambit.gte.write_game(self)
 *         else:
 *             s = format.encode('ascii')             # <<<<<<<<<<<<<<
 *             return str(WriteGame(self.game, s).c_str())
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_n_s_ascii) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_s_ascii);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(12, 385, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_s = __pyx_t_5;

    /* "pygambit/lib/game.pxi":386
 *         else:
 *             s = format.encode('ascii')
 *             return str(WriteGame(self.game, s).c_str())             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_5 = WriteGame(__pyx_v_self->game, __pyx_v_s);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IOError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IOError); }
      __PYX_ERR(12, 386, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_5.c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pygambit/lib/game.pxi":380
 *         return self
 * 
 *     def write(self, format='native'):             # <<<<<<<<<<<<<<
 *         cdef string s
 *         if format == 'gte':
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_35__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_34__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_34__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__115, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_4Game_37__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4Game_36__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4Game_36__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__116, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.Game.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":35
 *     cdef c_NashEnumPureStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":36
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumPureStrategySolver()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new EnumPureStrategySolver();

  /* "pygambit/lib/nash.pxi":35
 *     cdef c_NashEnumPureStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":37
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":38
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":37
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":39
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 39, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":42
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 42, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":43
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":44
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 44, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 44, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 44, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 44, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 44, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 44, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":45
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":46
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 46, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":47
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 47, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":44
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":48
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class EnumPureAgentSolver(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":39
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumPureStrategySolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__117, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumPureStrategySolver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__118, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumPureStrategySolver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":53
 *     cdef c_NashEnumPureAgentSolver *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_p_stopAfter = 0;
  CYTHON_UNUSED PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(4, 53, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 53, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumPureAgentSolver.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_p_stopAfter, CYTHON_UNUSED PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":54
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashEnumPureAgentSolver()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new EnumPureAgentSolver();

  /* "pygambit/lib/nash.pxi":53
 *     cdef c_NashEnumPureAgentSolver *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":55
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":56
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":55
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":57
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 57, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":60
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 60, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":61
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":62
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 62, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 62, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 62, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 62, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 62, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 62, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":63
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":64
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 64, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":65
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 65, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":62
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":66
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "solvers/enummixed/enummixed.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":57
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumPureAgentSolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__119, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumPureAgentSolver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumPureAgentSolver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":84
 *     cdef c_NashEnumMixedStrategySolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumMixedStrategySolverDouble()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":85
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumMixedStrategySolverDouble()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new EnumMixedStrategySolver<double>();

  /* "pygambit/lib/nash.pxi":84
 *     cdef c_NashEnumMixedStrategySolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumMixedStrategySolverDouble()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":86
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumMixedStrategySolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":87
 *         self.alg = new c_NashEnumMixedStrategySolverDouble()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":86
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumMixedStrategySolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":88
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 88, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":91
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 91, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":92
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":93
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 93, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 93, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 93, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 93, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":94
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":95
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":96
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 96, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":93
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":97
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class EnumMixedStrategySolverRational(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":88
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumMixedStrategySolverDouble.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__121, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumMixedStrategySolverDouble.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__122, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumMixedStrategySolverDouble.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":102
 *     cdef c_NashEnumMixedStrategySolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumMixedStrategySolverRational()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":103
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumMixedStrategySolverRational()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new EnumMixedStrategySolver<Rational>();

  /* "pygambit/lib/nash.pxi":102
 *     cdef c_NashEnumMixedStrategySolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumMixedStrategySolverRational()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":104
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumMixedStrategySolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":105
 *         self.alg = new c_NashEnumMixedStrategySolverRational()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":104
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumMixedStrategySolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":106
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 106, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":109
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 109, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":110
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":111
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 111, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 111, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 111, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 111, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 111, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 111, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":112
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":113
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":114
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 114, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":111
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":115
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class EnumMixedLrsStrategySolver(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":106
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumMixedStrategySolverRational.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__123, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumMixedStrategySolverRational.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__124, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumMixedStrategySolverRational.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":120
 *     cdef c_NashEnumMixedLrsStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumMixedLrsStrategySolver()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":121
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumMixedLrsStrategySolver()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new EnumMixedLrsStrategySolver();

  /* "pygambit/lib/nash.pxi":120
 *     cdef c_NashEnumMixedLrsStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumMixedLrsStrategySolver()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":122
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumMixedLrsStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":123
 *         self.alg = new c_NashEnumMixedLrsStrategySolver()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":122
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumMixedLrsStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":124
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 124, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":127
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 127, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":128
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":129
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 129, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 129, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 129, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 129, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":130
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":131
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":132
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 132, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":129
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":133
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "solvers/lcp/lcp.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":124
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumMixedLrsStrategySolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__125, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumMixedLrsStrategySolver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__126, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.EnumMixedLrsStrategySolver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":156
 *     cdef c_NashLcpBehaviorSolverDouble *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_stopAfter = 0;
  PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(4, 156, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverDouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":157
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_p_stopAfter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 157, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_p_maxDepth); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 157, __pyx_L1_error)
  __pyx_v_self->alg = new NashLcpBehaviorSolver<double>(__pyx_t_1, __pyx_t_2);

  /* "pygambit/lib/nash.pxi":156
 *     cdef c_NashLcpBehaviorSolverDouble *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverDouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":158
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":159
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":158
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":160
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 160, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":163
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 163, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":164
 *         cdef MixedBehaviorProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":165
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 165, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 165, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 165, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 165, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 165, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 165, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":166
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":167
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 167, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":168
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 168, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":165
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":169
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LCPBehaviorSolverRational(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":160
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverDouble.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__127, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverDouble.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__128, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverDouble.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":174
 *     cdef c_NashLcpBehaviorSolverRational *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_stopAfter = 0;
  PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(4, 174, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":175
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_p_stopAfter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 175, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_p_maxDepth); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 175, __pyx_L1_error)
  __pyx_v_self->alg = new NashLcpBehaviorSolver<Rational>(__pyx_t_1, __pyx_t_2);

  /* "pygambit/lib/nash.pxi":174
 *     cdef c_NashLcpBehaviorSolverRational *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":176
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":177
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":176
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":178
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 178, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":181
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 181, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":182
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":183
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 183, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 183, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 183, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 183, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 183, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":184
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":185
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":186
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 186, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":183
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":187
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LCPStrategySolverDouble(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":178
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverRational.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverRational.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__130, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPBehaviorSolverRational.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":192
 *     cdef c_NashLcpStrategySolverDouble *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_stopAfter = 0;
  PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(4, 192, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 192, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverDouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":193
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_p_stopAfter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 193, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_p_maxDepth); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 193, __pyx_L1_error)
  __pyx_v_self->alg = new NashLcpStrategySolver<double>(__pyx_t_1, __pyx_t_2);

  /* "pygambit/lib/nash.pxi":192
 *     cdef c_NashLcpStrategySolverDouble *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverDouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":194
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":195
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":194
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":196
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 196, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":199
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 199, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":200
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":201
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 201, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 201, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 201, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 201, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 201, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":202
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":203
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 203, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":204
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 204, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":201
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":205
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LCPStrategySolverRational(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":196
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverDouble.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__131, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverDouble.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__132, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverDouble.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":210
 *     cdef c_NashLcpStrategySolverRational *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_stopAfter = 0;
  PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(4, 210, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 210, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":211
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_p_stopAfter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 211, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_p_maxDepth); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 211, __pyx_L1_error)
  __pyx_v_self->alg = new NashLcpStrategySolver<Rational>(__pyx_t_1, __pyx_t_2);

  /* "pygambit/lib/nash.pxi":210
 *     cdef c_NashLcpStrategySolverRational *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":212
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":213
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":212
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":214
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 214, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":217
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 217, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":218
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":219
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 219, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 219, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 219, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 219, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 219, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 219, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":220
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":221
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 221, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":222
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 222, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":219
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":223
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":214
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverRational.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__133, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverRational.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__134, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LCPStrategySolverRational.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":248
 *     cdef c_NashLpBehavSolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":249
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverDouble()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashLpBehavSolver<double>();

  /* "pygambit/lib/nash.pxi":248
 *     cdef c_NashLpBehavSolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":250
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":251
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":250
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":252
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 252, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":255
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 255, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":256
 *         cdef MixedBehaviorProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":257
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 257, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 257, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 257, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 257, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":258
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":259
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":260
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 260, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":257
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":261
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LPBehaviorSolverRational(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":252
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPBehaviorSolverDouble.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__135, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPBehaviorSolverDouble.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__136, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPBehaviorSolverDouble.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":266
 *     cdef c_NashLpBehavSolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":267
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverRational()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashLpBehavSolver<Rational>();

  /* "pygambit/lib/nash.pxi":266
 *     cdef c_NashLpBehavSolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":268
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":269
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":268
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":270
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 270, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":273
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 273, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":274
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":275
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 275, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 275, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 275, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 275, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 275, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":276
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":277
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":278
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 278, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":275
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":279
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LPStrategySolverDouble(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":270
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPBehaviorSolverRational.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__137, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPBehaviorSolverRational.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__138, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPBehaviorSolverRational.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":284
 *     cdef c_NashLpStrategySolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":285
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverDouble()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashLpStrategySolver<double>();

  /* "pygambit/lib/nash.pxi":284
 *     cdef c_NashLpStrategySolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":286
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":287
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":286
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":288
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 288, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":291
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 291, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":292
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":293
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 293, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 293, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 293, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 293, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 293, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 293, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":294
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":295
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":296
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 296, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":293
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":297
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LPStrategySolverRational(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":288
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPStrategySolverDouble.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__139, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPStrategySolverDouble.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__140, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPStrategySolverDouble.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":302
 *     cdef c_NashLpStrategySolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":303
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverRational()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashLpStrategySolver<Rational>();

  /* "pygambit/lib/nash.pxi":302
 *     cdef c_NashLpStrategySolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":304
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":305
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":304
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":306
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 306, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":309
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 309, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":310
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":311
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 311, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 311, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 311, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 311, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 311, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 311, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":312
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":313
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":314
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 314, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":311
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":315
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":306
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPStrategySolverRational.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__141, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPStrategySolverRational.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_24LPStrategySolverRational_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__142, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LPStrategySolverRational.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":327
 *     cdef c_NashSimpdivStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashSimpdivStrategySolver()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":328
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashSimpdivStrategySolver()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashSimpdivStrategySolver();

  /* "pygambit/lib/nash.pxi":327
 *     cdef c_NashSimpdivStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashSimpdivStrategySolver()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":329
 *     def __cinit__(self):
 *         self.alg = new c_NashSimpdivStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":330
 *         self.alg = new c_NashSimpdivStrategySolver()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":329
 *     def __cinit__(self):
 *         self.alg = new c_NashSimpdivStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":331
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 331, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":334
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 334, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":335
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":336
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 336, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 336, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 336, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 336, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 336, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 336, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":337
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":338
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 338, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":339
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 339, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":336
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":340
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "solvers/ipa/ipa.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":331
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.SimpdivStrategySolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__143, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.SimpdivStrategySolver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__144, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.SimpdivStrategySolver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":350
 *     cdef c_NashIPAStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashIPAStrategySolver()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":351
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashIPAStrategySolver()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashIPAStrategySolver();

  /* "pygambit/lib/nash.pxi":350
 *     cdef c_NashIPAStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashIPAStrategySolver()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":352
 *     def __cinit__(self):
 *         self.alg = new c_NashIPAStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":353
 *         self.alg = new c_NashIPAStrategySolver()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":352
 *     def __cinit__(self):
 *         self.alg = new c_NashIPAStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":354
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 354, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":357
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 357, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":358
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":359
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 359, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 359, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 359, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 359, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":360
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":361
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":362
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 362, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":359
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":363
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "solvers/gnm/gnm.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":354
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.IPAStrategySolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__145, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.IPAStrategySolver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17IPAStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__146, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.IPAStrategySolver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":373
 *     cdef c_NashGNMStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashGNMStrategySolver()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver___cinit__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver___cinit__(struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pygambit/lib/nash.pxi":374
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashGNMStrategySolver()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashGNMStrategySolver();

  /* "pygambit/lib/nash.pxi":373
 *     cdef c_NashGNMStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashGNMStrategySolver()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":375
 *     def __cinit__(self):
 *         self.alg = new c_NashGNMStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":376
 *         self.alg = new c_NashGNMStrategySolver()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "pygambit/lib/nash.pxi":375
 *     def __cinit__(self):
 *         self.alg = new c_NashGNMStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":377
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(4, 377, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_4solve(((struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *)__pyx_v_self), ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_4solve(struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "pygambit/lib/nash.pxi":380
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_RuntimeError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 380, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "pygambit/lib/nash.pxi":381
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":382
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 382, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 382, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 382, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 382, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 382, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 382, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":383
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pygambit/lib/nash.pxi":384
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 384, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "pygambit/lib/nash.pxi":385
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(4, 385, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":382
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/nash.pxi":386
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "tools/logit/nfglogit.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":377
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GNMStrategySolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_6__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__147, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GNMStrategySolver.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_8__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_17GNMStrategySolver_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__148, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.GNMStrategySolver.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":414
 * cdef class LogitQREMixedStrategyProfile(object):
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):             # <<<<<<<<<<<<<<
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 */

/* Python wrapper */
static int __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_game = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_game);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(4, 414, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_game = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 414, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LogitQREMixedStrategyProfile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile___init__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self), __pyx_v_game);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile___init__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pygambit/lib/nash.pxi":415
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):
 *         if game is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):
 */
  __pyx_t_1 = (__pyx_v_game != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pygambit/lib/nash.pxi":416
 *     def __init__(self, game=None):
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
    __pyx_v_self->thisptr = new LogitQREMixedStrategyProfile(((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_v_game)->game);

    /* "pygambit/lib/nash.pxi":415
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):
 *         if game is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):
 */
  }

  /* "pygambit/lib/nash.pxi":414
 * cdef class LogitQREMixedStrategyProfile(object):
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):             # <<<<<<<<<<<<<<
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":417
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     def __repr__(self):
 */

/* Python wrapper */
static void __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_2__dealloc__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_2__dealloc__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pygambit/lib/nash.pxi":418
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 */
  delete __pyx_v_self->thisptr;

  /* "pygambit/lib/nash.pxi":417
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     def __repr__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pygambit/lib/nash.pxi":419
 *     def __dealloc__(self):
 *         del self.thisptr
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4__repr__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4__repr__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pygambit/lib/nash.pxi":420
 *         del self.thisptr
 *     def __repr__(self):
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lam); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_profile); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_LogitQREMixedStrategyProfile_lam, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":419
 *     def __dealloc__(self):
 *         del self.thisptr
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LogitQREMixedStrategyProfile.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":422
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_6__len__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_6__len__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pygambit/lib/nash.pxi":423
 * 
 *     def __len__(self):
 *         return self.thisptr.MixedProfileLength()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, int i):
 *         return self.thisptr.getitem(i+1)
 */
  __pyx_r = __pyx_v_self->thisptr->MixedProfileLength();
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":422
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":424
 *     def __len__(self):
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getitem(i+1)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 424, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.LogitQREMixedStrategyProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_8__getitem__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_8__getitem__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pygambit/lib/nash.pxi":425
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):
 *         return self.thisptr.getitem(i+1)             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->operator[]((__pyx_v_i + 1));
  } catch(...) {
    try { throw; } catch(const std::exception& exn) {PyErr_SetString(__pyx_builtin_IndexError, exn.what());} catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(4, 425, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":424
 *     def __len__(self):
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getitem(i+1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LogitQREMixedStrategyProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":428
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/nash.pxi":430
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.thisptr.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/nash.pxi":431
 *             cdef Game g
 *             g = Game()
 *             g.game = self.thisptr.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->thisptr->GetGame();

  /* "pygambit/lib/nash.pxi":432
 *             g = Game()
 *             g.game = self.thisptr.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property lam:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":428
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LogitQREMixedStrategyProfile.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":435
 * 
 *     property lam:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetLambda()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/nash.pxi":436
 *     property lam:
 *         def __get__(self):
 *             return self.thisptr.GetLambda()             # <<<<<<<<<<<<<<
 * 
 *     property profile:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetLambda()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":435
 * 
 *     property lam:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetLambda()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LogitQREMixedStrategyProfile.lam.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":439
 * 
 *     property profile:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef MixedStrategyProfileDouble profile
 *             profile = MixedStrategyProfileDouble()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile___get__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile___get__(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_profile = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pygambit/lib/nash.pxi":441
 *         def __get__(self):
 *             cdef MixedStrategyProfileDouble profile
 *             profile = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             profile.profile = new c_MixedStrategyProfileDouble(deref(self.thisptr).GetProfile())
 *             return profile
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_profile = ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/nash.pxi":442
 *             cdef MixedStrategyProfileDouble profile
 *             profile = MixedStrategyProfileDouble()
 *             profile.profile = new c_MixedStrategyProfileDouble(deref(self.thisptr).GetProfile())             # <<<<<<<<<<<<<<
 *             return profile
 * 
 */
  __pyx_v_profile->profile = new MixedStrategyProfile<double> ((*__pyx_v_self->thisptr).GetProfile());

  /* "pygambit/lib/nash.pxi":443
 *             profile = MixedStrategyProfileDouble()
 *             profile.profile = new c_MixedStrategyProfileDouble(deref(self.thisptr).GetProfile())
 *             return profile             # <<<<<<<<<<<<<<
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_profile));
  __pyx_r = ((PyObject *)__pyx_v_profile);
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":439
 * 
 *     property profile:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef MixedStrategyProfileDouble profile
 *             profile = MixedStrategyProfileDouble()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LogitQREMixedStrategyProfile.profile.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_profile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_10__reduce_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__149, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LogitQREMixedStrategyProfile.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_12__setstate_cython__(((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__150, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.LogitQREMixedStrategyProfile.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":445
 *             return profile
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):             # <<<<<<<<<<<<<<
 *     """Estimate QRE corresponding to mixed strategy profile using
 *     maximum likelihood along the principal branch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_1logit_estimate(PyObject *__pyx_self, PyObject *__pyx_v_p_profile); /*proto*/
static char __pyx_doc_8pygambit_3lib_9libgambit_logit_estimate[] = "Estimate QRE corresponding to mixed strategy profile using\n    maximum likelihood along the principal branch.\n    ";
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_1logit_estimate = {"logit_estimate", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_1logit_estimate, METH_O, __pyx_doc_8pygambit_3lib_9libgambit_logit_estimate};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_1logit_estimate(PyObject *__pyx_self, PyObject *__pyx_v_p_profile) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logit_estimate (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_profile), __pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble, 1, "p_profile", 0))) __PYX_ERR(4, 445, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_logit_estimate(__pyx_self, ((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_p_profile));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_logit_estimate(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p_profile) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logit_estimate", 0);

  /* "pygambit/lib/nash.pxi":450
 *     """
 *     cdef LogitQREMixedStrategyProfile ret
 *     ret = LogitQREMixedStrategyProfile()             # <<<<<<<<<<<<<<
 *     ret.thisptr = _logit_estimate(p_profile.profile)
 *     return ret
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/nash.pxi":451
 *     cdef LogitQREMixedStrategyProfile ret
 *     ret = LogitQREMixedStrategyProfile()
 *     ret.thisptr = _logit_estimate(p_profile.profile)             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_v_ret->thisptr = logit_estimate(__pyx_v_p_profile->profile);

  /* "pygambit/lib/nash.pxi":452
 *     ret = LogitQREMixedStrategyProfile()
 *     ret.thisptr = _logit_estimate(p_profile.profile)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * def logit_atlambda(Game p_game, double p_lambda):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":445
 *             return profile
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):             # <<<<<<<<<<<<<<
 *     """Estimate QRE corresponding to mixed strategy profile using
 *     maximum likelihood along the principal branch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.logit_estimate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":454
 *     return ret
 * 
 * def logit_atlambda(Game p_game, double p_lambda):             # <<<<<<<<<<<<<<
 *     """Compute the first QRE along the principal branch with the given
 *     lambda parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_3logit_atlambda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pygambit_3lib_9libgambit_2logit_atlambda[] = "Compute the first QRE along the principal branch with the given\n    lambda parameter.\n    ";
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_3logit_atlambda = {"logit_atlambda", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_3logit_atlambda, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8pygambit_3lib_9libgambit_2logit_atlambda};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_3logit_atlambda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_p_game = 0;
  double __pyx_v_p_lambda;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logit_atlambda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_game,&__pyx_n_s_p_lambda,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_game)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_lambda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("logit_atlambda", 1, 2, 2, 1); __PYX_ERR(4, 454, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "logit_atlambda") < 0)) __PYX_ERR(4, 454, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_p_game = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)values[0]);
    __pyx_v_p_lambda = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_p_lambda == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 454, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("logit_atlambda", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 454, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.logit_atlambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "p_game", 0))) __PYX_ERR(4, 454, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_2logit_atlambda(__pyx_self, __pyx_v_p_game, __pyx_v_p_lambda);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_2logit_atlambda(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_p_game, double __pyx_v_p_lambda) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logit_atlambda", 0);

  /* "pygambit/lib/nash.pxi":459
 *     """
 *     cdef LogitQREMixedStrategyProfile ret
 *     ret = LogitQREMixedStrategyProfile()             # <<<<<<<<<<<<<<
 *     ret.thisptr = _logit_atlambda(p_game.game, p_lambda)
 *     return ret
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/nash.pxi":460
 *     cdef LogitQREMixedStrategyProfile ret
 *     ret = LogitQREMixedStrategyProfile()
 *     ret.thisptr = _logit_atlambda(p_game.game, p_lambda)             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_v_ret->thisptr = logit_atlambda(__pyx_v_p_game->game, __pyx_v_p_lambda);

  /* "pygambit/lib/nash.pxi":461
 *     ret = LogitQREMixedStrategyProfile()
 *     ret.thisptr = _logit_atlambda(p_game.game, p_lambda)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":454
 *     return ret
 * 
 * def logit_atlambda(Game p_game, double p_lambda):             # <<<<<<<<<<<<<<
 *     """Compute the first QRE along the principal branch with the given
 *     lambda parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pygambit.lib.libgambit.logit_atlambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pygambit/lib/nash.pxi":463
 *     return ret
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):             # <<<<<<<<<<<<<<
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_5logit_principal_branch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_5logit_principal_branch = {"logit_principal_branch", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_5logit_principal_branch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_5logit_principal_branch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_p_game = 0;
  double __pyx_v_p_maxLambda;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logit_principal_branch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_game,&__pyx_n_s_p_maxLambda,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_game)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_maxLambda);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "logit_principal_branch") < 0)) __PYX_ERR(4, 463, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_game = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)values[0]);
    if (values[1]) {
      __pyx_v_p_maxLambda = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_p_maxLambda == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 463, __pyx_L3_error)
    } else {
      __pyx_v_p_maxLambda = ((double)100000.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("logit_principal_branch", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 463, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.logit_principal_branch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_game), __pyx_ptype_8pygambit_3lib_9libgambit_Game, 1, "p_game", 0))) __PYX_ERR(4, 463, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_4logit_principal_branch(__pyx_self, __pyx_v_p_game, __pyx_v_p_maxLambda);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_4logit_principal_branch(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pygambit_3lib_9libgambit_Game *__pyx_v_p_game, double __pyx_v_p_maxLambda) {
  List<LogitQREMixedStrategyProfile>  __pyx_v_solns;
  struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logit_principal_branch", 0);

  /* "pygambit/lib/nash.pxi":466
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 *     solns = _logit_principal_branch(p_game.game, p_maxLambda)             # <<<<<<<<<<<<<<
 *     ret = [ ]
 *     for i in xrange(solns.Length()):
 */
  __pyx_v_solns = logit_principal_branch(__pyx_v_p_game->game, __pyx_v_p_maxLambda);

  /* "pygambit/lib/nash.pxi":467
 *     cdef LogitQREMixedStrategyProfile p
 *     solns = _logit_principal_branch(p_game.game, p_maxLambda)
 *     ret = [ ]             # <<<<<<<<<<<<<<
 *     for i in xrange(solns.Length()):
 *         p = LogitQREMixedStrategyProfile()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pygambit/lib/nash.pxi":468
 *     solns = _logit_principal_branch(p_game.game, p_maxLambda)
 *     ret = [ ]
 *     for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *         p = LogitQREMixedStrategyProfile()
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 468, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(4, 468, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 468, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(4, 468, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 468, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 468, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pygambit/lib/nash.pxi":469
 *     ret = [ ]
 *     for i in xrange(solns.Length()):
 *         p = LogitQREMixedStrategyProfile()             # <<<<<<<<<<<<<<
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 *         ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "pygambit/lib/nash.pxi":470
 *     for i in xrange(solns.Length()):
 *         p = LogitQREMixedStrategyProfile()
 *         p.thisptr = copyitem_list_qrem(solns, i+1)             # <<<<<<<<<<<<<<
 *         ret.append(p)
 *     return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 470, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->thisptr = copyitem(__pyx_v_solns, __pyx_t_5);

    /* "pygambit/lib/nash.pxi":471
 *         p = LogitQREMixedStrategyProfile()
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 *         ret.append(p)             # <<<<<<<<<<<<<<
 *     return ret
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(4, 471, __pyx_L1_error)

    /* "pygambit/lib/nash.pxi":468
 *     solns = _logit_principal_branch(p_game.game, p_maxLambda)
 *     ret = [ ]
 *     for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *         p = LogitQREMixedStrategyProfile()
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/nash.pxi":472
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 *         ret.append(p)
 *     return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "pygambit/lib/nash.pxi":463
 *     return ret
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):             # <<<<<<<<<<<<<<
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pygambit.lib.libgambit.logit_principal_branch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Collection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7__pyx_unpickle_Collection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_7__pyx_unpickle_Collection = {"__pyx_unpickle_Collection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_7__pyx_unpickle_Collection, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_7__pyx_unpickle_Collection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Collection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Collection", 1, 3, 3, 1); __PYX_ERR(5, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Collection", 1, 3, 3, 2); __PYX_ERR(5, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Collection") < 0)) __PYX_ERR(5, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(5, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Collection", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_Collection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_6__pyx_unpickle_Collection(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_6__pyx_unpickle_Collection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Collection", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = Collection.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Collection.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = Collection.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Collection__set_state(<Collection> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Collection), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = Collection.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Collection__set_state(<Collection> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Collection.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Collection__set_state(<Collection> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Collection__set_state(Collection __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_Collection__set_state(((struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = Collection.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Collection__set_state(<Collection> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Collection__set_state(<Collection> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Collection__set_state(Collection __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Collection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_Collection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Collection__set_state(<Collection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Collection__set_state(Collection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_Collection__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Collection__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Collection__set_state(Collection __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Collection__set_state(Collection __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(5, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Collection__set_state(Collection __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Collection__set_state(<Collection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Collection__set_state(Collection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_Collection__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PlayerSupportStrategies(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_9__pyx_unpickle_PlayerSupportStrategies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_9__pyx_unpickle_PlayerSupportStrategies = {"__pyx_unpickle_PlayerSupportStrategies", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_9__pyx_unpickle_PlayerSupportStrategies, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_9__pyx_unpickle_PlayerSupportStrategies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PlayerSupportStrategies (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PlayerSupportStrategies", 1, 3, 3, 1); __PYX_ERR(5, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PlayerSupportStrategies", 1, 3, 3, 2); __PYX_ERR(5, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PlayerSupportStrategies") < 0)) __PYX_ERR(5, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(5, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PlayerSupportStrategies", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_PlayerSupportStrategies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_8__pyx_unpickle_PlayerSupportStrategies(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_8__pyx_unpickle_PlayerSupportStrategies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PlayerSupportStrategies", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x4bcef00:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4bcef00 = (player, restriction))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x4bcef00) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x4bcef00:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4bcef00 = (player, restriction))" % __pyx_checksum)
 *     __pyx_result = PlayerSupportStrategies.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x4bcef00:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4bcef00 = (player, restriction))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PlayerSupportStrategies.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x4b, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x4bcef00:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4bcef00 = (player, restriction))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4bcef00 = (player, restriction))" % __pyx_checksum)
 *     __pyx_result = PlayerSupportStrategies.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PlayerSupportStrategies__set_state(<PlayerSupportStrategies> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_PlayerSupportStrategies), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4bcef00 = (player, restriction))" % __pyx_checksum)
 *     __pyx_result = PlayerSupportStrategies.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PlayerSupportStrategies__set_state(<PlayerSupportStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PlayerSupportStrategies.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PlayerSupportStrategies__set_state(<PlayerSupportStrategies> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PlayerSupportStrategies__set_state(PlayerSupportStrategies __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_PlayerSupportStrategies__set_state(((struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x4bcef00 = (player, restriction))" % __pyx_checksum)
 *     __pyx_result = PlayerSupportStrategies.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PlayerSupportStrategies__set_state(<PlayerSupportStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PlayerSupportStrategies__set_state(<PlayerSupportStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PlayerSupportStrategies__set_state(PlayerSupportStrategies __pyx_result, tuple __pyx_state):
 *     __pyx_result.player = __pyx_state[0]; __pyx_result.restriction = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PlayerSupportStrategies(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_PlayerSupportStrategies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PlayerSupportStrategies__set_state(<PlayerSupportStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PlayerSupportStrategies__set_state(PlayerSupportStrategies __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.player = __pyx_state[0]; __pyx_result.restriction = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_PlayerSupportStrategies__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PlayerSupportStrategies__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PlayerSupportStrategies__set_state(PlayerSupportStrategies __pyx_result, tuple __pyx_state):
 *     __pyx_result.player = __pyx_state[0]; __pyx_result.restriction = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(5, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_Player))))) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->player);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->player));
  __pyx_v___pyx_result->player = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(5, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction))))) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->restriction));
  __pyx_v___pyx_result->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_PlayerSupportStrategies__set_state(PlayerSupportStrategies __pyx_result, tuple __pyx_state):
 *     __pyx_result.player = __pyx_state[0]; __pyx_result.restriction = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 2) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.player = __pyx_state[0]; __pyx_result.restriction = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(5, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PlayerSupportStrategies__set_state(PlayerSupportStrategies __pyx_result, tuple __pyx_state):
 *     __pyx_result.player = __pyx_state[0]; __pyx_result.restriction = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PlayerSupportStrategies__set_state(<PlayerSupportStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PlayerSupportStrategies__set_state(PlayerSupportStrategies __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.player = __pyx_state[0]; __pyx_result.restriction = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_PlayerSupportStrategies__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BaseGame(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_11__pyx_unpickle_BaseGame(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_11__pyx_unpickle_BaseGame = {"__pyx_unpickle_BaseGame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_11__pyx_unpickle_BaseGame, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_11__pyx_unpickle_BaseGame(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseGame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseGame", 1, 3, 3, 1); __PYX_ERR(5, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseGame", 1, 3, 3, 2); __PYX_ERR(5, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_BaseGame") < 0)) __PYX_ERR(5, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(5, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseGame", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_BaseGame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_10__pyx_unpickle_BaseGame(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_10__pyx_unpickle_BaseGame(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseGame", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = BaseGame.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = BaseGame.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = BaseGame.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseGame__set_state(<BaseGame> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_BaseGame), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = BaseGame.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseGame__set_state(<BaseGame> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = BaseGame.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseGame__set_state(<BaseGame> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseGame__set_state(BaseGame __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_BaseGame__set_state(((struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = BaseGame.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseGame__set_state(<BaseGame> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseGame__set_state(<BaseGame> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BaseGame__set_state(BaseGame __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseGame(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_BaseGame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BaseGame__set_state(<BaseGame> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseGame__set_state(BaseGame __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_BaseGame__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseGame__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseGame__set_state(BaseGame __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BaseGame__set_state(BaseGame __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(5, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseGame__set_state(BaseGame __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BaseGame__set_state(<BaseGame> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseGame__set_state(BaseGame __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_BaseGame__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_RestrictionOutcomes(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_13__pyx_unpickle_RestrictionOutcomes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_13__pyx_unpickle_RestrictionOutcomes = {"__pyx_unpickle_RestrictionOutcomes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_13__pyx_unpickle_RestrictionOutcomes, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_13__pyx_unpickle_RestrictionOutcomes(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_RestrictionOutcomes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RestrictionOutcomes", 1, 3, 3, 1); __PYX_ERR(5, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RestrictionOutcomes", 1, 3, 3, 2); __PYX_ERR(5, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_RestrictionOutcomes") < 0)) __PYX_ERR(5, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(5, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RestrictionOutcomes", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_RestrictionOutcomes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_12__pyx_unpickle_RestrictionOutcomes(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_12__pyx_unpickle_RestrictionOutcomes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RestrictionOutcomes", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x3dadfae:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x3dadfae) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x3dadfae:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 *     __pyx_result = RestrictionOutcomes.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x3dadfae:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = RestrictionOutcomes.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x3d, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x3dadfae:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 *     __pyx_result = RestrictionOutcomes.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RestrictionOutcomes__set_state(<RestrictionOutcomes> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_RestrictionOutcomes), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 *     __pyx_result = RestrictionOutcomes.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RestrictionOutcomes__set_state(<RestrictionOutcomes> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = RestrictionOutcomes.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RestrictionOutcomes__set_state(<RestrictionOutcomes> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_RestrictionOutcomes__set_state(RestrictionOutcomes __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_RestrictionOutcomes__set_state(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 *     __pyx_result = RestrictionOutcomes.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RestrictionOutcomes__set_state(<RestrictionOutcomes> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RestrictionOutcomes__set_state(<RestrictionOutcomes> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_RestrictionOutcomes__set_state(RestrictionOutcomes __pyx_result, tuple __pyx_state):
 *     __pyx_result.restriction = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RestrictionOutcomes(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_RestrictionOutcomes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_RestrictionOutcomes__set_state(<RestrictionOutcomes> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RestrictionOutcomes__set_state(RestrictionOutcomes __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_RestrictionOutcomes__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RestrictionOutcomes__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_RestrictionOutcomes__set_state(RestrictionOutcomes __pyx_result, tuple __pyx_state):
 *     __pyx_result.restriction = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(5, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction))))) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->restriction));
  __pyx_v___pyx_result->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_RestrictionOutcomes__set_state(RestrictionOutcomes __pyx_result, tuple __pyx_state):
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(5, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_RestrictionOutcomes__set_state(RestrictionOutcomes __pyx_result, tuple __pyx_state):
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_RestrictionOutcomes__set_state(<RestrictionOutcomes> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RestrictionOutcomes__set_state(RestrictionOutcomes __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_RestrictionOutcomes__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_RestrictionStrategies(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15__pyx_unpickle_RestrictionStrategies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_15__pyx_unpickle_RestrictionStrategies = {"__pyx_unpickle_RestrictionStrategies", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_15__pyx_unpickle_RestrictionStrategies, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_15__pyx_unpickle_RestrictionStrategies(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_RestrictionStrategies (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RestrictionStrategies", 1, 3, 3, 1); __PYX_ERR(5, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RestrictionStrategies", 1, 3, 3, 2); __PYX_ERR(5, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_RestrictionStrategies") < 0)) __PYX_ERR(5, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(5, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RestrictionStrategies", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_RestrictionStrategies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_14__pyx_unpickle_RestrictionStrategies(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_14__pyx_unpickle_RestrictionStrategies(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RestrictionStrategies", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x3dadfae:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x3dadfae) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x3dadfae:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 *     __pyx_result = RestrictionStrategies.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x3dadfae:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = RestrictionStrategies.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x3d, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x3dadfae:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 *     __pyx_result = RestrictionStrategies.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RestrictionStrategies__set_state(<RestrictionStrategies> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_RestrictionStrategies), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 *     __pyx_result = RestrictionStrategies.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RestrictionStrategies__set_state(<RestrictionStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = RestrictionStrategies.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RestrictionStrategies__set_state(<RestrictionStrategies> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_RestrictionStrategies__set_state(RestrictionStrategies __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_RestrictionStrategies__set_state(((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x3dadfae = (restriction))" % __pyx_checksum)
 *     __pyx_result = RestrictionStrategies.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RestrictionStrategies__set_state(<RestrictionStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RestrictionStrategies__set_state(<RestrictionStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_RestrictionStrategies__set_state(RestrictionStrategies __pyx_result, tuple __pyx_state):
 *     __pyx_result.restriction = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RestrictionStrategies(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_RestrictionStrategies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_RestrictionStrategies__set_state(<RestrictionStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RestrictionStrategies__set_state(RestrictionStrategies __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_RestrictionStrategies__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RestrictionStrategies__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_RestrictionStrategies__set_state(RestrictionStrategies __pyx_result, tuple __pyx_state):
 *     __pyx_result.restriction = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(5, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction))))) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->restriction));
  __pyx_v___pyx_result->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_RestrictionStrategies__set_state(RestrictionStrategies __pyx_result, tuple __pyx_state):
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(5, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_RestrictionStrategies__set_state(RestrictionStrategies __pyx_result, tuple __pyx_state):
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_RestrictionStrategies__set_state(<RestrictionStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RestrictionStrategies__set_state(RestrictionStrategies __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_RestrictionStrategies__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_MixedStrategyProfile(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17__pyx_unpickle_MixedStrategyProfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_17__pyx_unpickle_MixedStrategyProfile = {"__pyx_unpickle_MixedStrategyProfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_17__pyx_unpickle_MixedStrategyProfile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_17__pyx_unpickle_MixedStrategyProfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_MixedStrategyProfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MixedStrategyProfile", 1, 3, 3, 1); __PYX_ERR(5, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MixedStrategyProfile", 1, 3, 3, 2); __PYX_ERR(5, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_MixedStrategyProfile") < 0)) __PYX_ERR(5, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(5, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MixedStrategyProfile", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_MixedStrategyProfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_16__pyx_unpickle_MixedStrategyProfile(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_16__pyx_unpickle_MixedStrategyProfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MixedStrategyProfile", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = MixedStrategyProfile.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = MixedStrategyProfile.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = MixedStrategyProfile.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MixedStrategyProfile__set_state(<MixedStrategyProfile> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfile), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = MixedStrategyProfile.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MixedStrategyProfile__set_state(<MixedStrategyProfile> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = MixedStrategyProfile.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MixedStrategyProfile__set_state(<MixedStrategyProfile> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedStrategyProfile__set_state(MixedStrategyProfile __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_MixedStrategyProfile__set_state(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = MixedStrategyProfile.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MixedStrategyProfile__set_state(<MixedStrategyProfile> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MixedStrategyProfile__set_state(<MixedStrategyProfile> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_MixedStrategyProfile__set_state(MixedStrategyProfile __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MixedStrategyProfile(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_MixedStrategyProfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_MixedStrategyProfile__set_state(<MixedStrategyProfile> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedStrategyProfile__set_state(MixedStrategyProfile __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_MixedStrategyProfile__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MixedStrategyProfile__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedStrategyProfile__set_state(MixedStrategyProfile __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_MixedStrategyProfile__set_state(MixedStrategyProfile __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(5, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedStrategyProfile__set_state(MixedStrategyProfile __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_MixedStrategyProfile__set_state(<MixedStrategyProfile> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedStrategyProfile__set_state(MixedStrategyProfile __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_MixedStrategyProfile__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_MixedBehaviorProfile(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19__pyx_unpickle_MixedBehaviorProfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pygambit_3lib_9libgambit_19__pyx_unpickle_MixedBehaviorProfile = {"__pyx_unpickle_MixedBehaviorProfile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_19__pyx_unpickle_MixedBehaviorProfile, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pygambit_3lib_9libgambit_19__pyx_unpickle_MixedBehaviorProfile(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_MixedBehaviorProfile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MixedBehaviorProfile", 1, 3, 3, 1); __PYX_ERR(5, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MixedBehaviorProfile", 1, 3, 3, 2); __PYX_ERR(5, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_MixedBehaviorProfile") < 0)) __PYX_ERR(5, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(5, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_MixedBehaviorProfile", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_MixedBehaviorProfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pygambit_3lib_9libgambit_18__pyx_unpickle_MixedBehaviorProfile(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pygambit_3lib_9libgambit_18__pyx_unpickle_MixedBehaviorProfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MixedBehaviorProfile", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = MixedBehaviorProfile.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = MixedBehaviorProfile.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = MixedBehaviorProfile.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MixedBehaviorProfile__set_state(<MixedBehaviorProfile> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfile), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = MixedBehaviorProfile.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MixedBehaviorProfile__set_state(<MixedBehaviorProfile> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = MixedBehaviorProfile.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MixedBehaviorProfile__set_state(<MixedBehaviorProfile> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedBehaviorProfile__set_state(MixedBehaviorProfile __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_MixedBehaviorProfile__set_state(((struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = MixedBehaviorProfile.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_MixedBehaviorProfile__set_state(<MixedBehaviorProfile> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_MixedBehaviorProfile__set_state(<MixedBehaviorProfile> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_MixedBehaviorProfile__set_state(MixedBehaviorProfile __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MixedBehaviorProfile(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_MixedBehaviorProfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_MixedBehaviorProfile__set_state(<MixedBehaviorProfile> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedBehaviorProfile__set_state(MixedBehaviorProfile __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_8pygambit_3lib_9libgambit___pyx_unpickle_MixedBehaviorProfile__set_state(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_MixedBehaviorProfile__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedBehaviorProfile__set_state(MixedBehaviorProfile __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_MixedBehaviorProfile__set_state(MixedBehaviorProfile __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(5, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedBehaviorProfile__set_state(MixedBehaviorProfile __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_MixedBehaviorProfile__set_state(<MixedBehaviorProfile> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_MixedBehaviorProfile__set_state(MixedBehaviorProfile __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pygambit.lib.libgambit.__pyx_unpickle_MixedBehaviorProfile__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(5, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Collection(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Collection(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Collection[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_10Collection_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_10Collection_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Collection = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Collection, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Collection = {
  0, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Collection = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Collection", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Collection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Collection, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Collection, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of related objects in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Collection, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Collection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Action(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Action *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)o);
  new((void*)&(p->action)) GameObjectPtr<GameActionRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Action(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Action *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Action *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->action);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Action_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Action_5label_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_6Action_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_6Action_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Action_infoset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Action_7infoset_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Action_prob(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Action_4prob_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_6Action_prob(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_6Action_4prob_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Action[] = {
  {"delete", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_6Action_7delete, METH_NOARGS, 0},
  {"precedes", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_6Action_9precedes, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_6Action_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_6Action_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_Action[] = {
  {(char *)"label", __pyx_getprop_8pygambit_3lib_9libgambit_6Action_label, __pyx_setprop_8pygambit_3lib_9libgambit_6Action_label, (char *)0, 0},
  {(char *)"infoset", __pyx_getprop_8pygambit_3lib_9libgambit_6Action_infoset, 0, (char *)0, 0},
  {(char *)"prob", __pyx_getprop_8pygambit_3lib_9libgambit_6Action_prob, __pyx_setprop_8pygambit_3lib_9libgambit_6Action_prob, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Action = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Action", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Action), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Action, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_6Action_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pygambit_3lib_9libgambit_6Action_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_6Action_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Action, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_Action, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Action, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Members(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Members *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Members *)o);
  new((void*)&(p->infoset)) GameObjectPtr<GameInfosetRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Members(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Members *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Members *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->infoset);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Members(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Members[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Members_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Members_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Members = {
  __pyx_pw_8pygambit_3lib_9libgambit_7Members_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Members, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Members = {
  __pyx_pw_8pygambit_3lib_9libgambit_7Members_1__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_7Members_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Members = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Members", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Members), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Members, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Members, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Members, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of members of an infoset.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Members, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Members, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Actions(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *)o);
  new((void*)&(p->infoset)) GameObjectPtr<GameInfosetRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Actions(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Actions *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->infoset);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Actions(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Actions[] = {
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_7Actions_1add, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Actions_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Actions_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Actions = {
  __pyx_pw_8pygambit_3lib_9libgambit_7Actions_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Actions, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Actions = {
  __pyx_pw_8pygambit_3lib_9libgambit_7Actions_3__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_7Actions_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Actions = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Actions", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Actions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Actions, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Actions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Actions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of actions at an infoset.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Actions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Actions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Infoset(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)o);
  new((void*)&(p->infoset)) GameObjectPtr<GameInfosetRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Infoset(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->infoset);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_4game_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_5label_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_7Infoset_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_is_chance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_9is_chance_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_actions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_7actions_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_members(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_7members_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_player(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_6player_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_7Infoset_player(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_6player_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Infoset[] = {
  {"precedes", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_7precedes, METH_O, 0},
  {"reveal", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_9reveal, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Infoset_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_Infoset[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_game, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_label, __pyx_setprop_8pygambit_3lib_9libgambit_7Infoset_label, (char *)0, 0},
  {(char *)"is_chance", __pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_is_chance, 0, (char *)0, 0},
  {(char *)"actions", __pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_actions, 0, (char *)0, 0},
  {(char *)"members", __pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_members, 0, (char *)0, 0},
  {(char *)"player", __pyx_getprop_8pygambit_3lib_9libgambit_7Infoset_player, __pyx_setprop_8pygambit_3lib_9libgambit_7Infoset_player, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Infoset = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Infoset", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Infoset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Infoset, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_7Infoset_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Infoset, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_Infoset, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Infoset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Strategy(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)o);
  new((void*)&(p->strategy)) GameObjectPtr<GameStrategyRep>();
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Strategy(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->strategy);
  Py_CLEAR(p->restriction);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit_Strategy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)o;
  if (p->restriction) {
    e = (*v)(((PyObject *)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit_Strategy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy *)o;
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_8Strategy_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_5label_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_8Strategy_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_8Strategy_player(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_6player_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_8Strategy_number(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_6number_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Strategy[] = {
  {"unrestrict", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_7unrestrict, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Strategy_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_Strategy[] = {
  {(char *)"label", __pyx_getprop_8pygambit_3lib_9libgambit_8Strategy_label, __pyx_setprop_8pygambit_3lib_9libgambit_8Strategy_label, (char *)0, 0},
  {(char *)"player", __pyx_getprop_8pygambit_3lib_9libgambit_8Strategy_player, 0, (char *)0, 0},
  {(char *)"number", __pyx_getprop_8pygambit_3lib_9libgambit_8Strategy_number, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Strategy = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Strategy", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Strategy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit_Strategy, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit_Strategy, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_8Strategy_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Strategy, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_Strategy, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Strategy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Infosets(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *)o);
  new((void*)&(p->player)) GameObjectPtr<GamePlayerRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Infosets(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->player);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Infosets(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Infosets[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Infosets_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Infosets_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Infosets = {
  __pyx_pw_8pygambit_3lib_9libgambit_8Infosets_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Infosets, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Infosets = {
  __pyx_pw_8pygambit_3lib_9libgambit_8Infosets_1__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_8Infosets_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Infosets = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Infosets", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Infosets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Infosets, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Infosets, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Infosets, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of infosets for a player.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Infosets, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Infosets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Strategies(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *)o);
  new((void*)&(p->player)) GameObjectPtr<GamePlayerRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Strategies(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->player);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Strategies(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Strategies[] = {
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_1add, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_10Strategies_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Strategies = {
  __pyx_pw_8pygambit_3lib_9libgambit_10Strategies_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Strategies, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Strategies = {
  __pyx_pw_8pygambit_3lib_9libgambit_10Strategies_3__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_10Strategies_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Strategies = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Strategies", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Strategies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Strategies, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Strategies, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Strategies, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of strategies for a player.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Strategies, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Strategies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_PlayerSupportStrategies(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)o);
  p->player = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)Py_None); Py_INCREF(Py_None);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_PlayerSupportStrategies(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->player);
  Py_CLEAR(p->restriction);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit_PlayerSupportStrategies(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)o;
  e = ((likely(__pyx_ptype_8pygambit_3lib_9libgambit_Collection)) ? ((__pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_traverse) ? __pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pygambit_3lib_9libgambit_PlayerSupportStrategies)); if (e) return e;
  if (p->player) {
    e = (*v)(((PyObject *)p->player), a); if (e) return e;
  }
  if (p->restriction) {
    e = (*v)(((PyObject *)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit_PlayerSupportStrategies(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies *)o;
  if (likely(__pyx_ptype_8pygambit_3lib_9libgambit_Collection)) { if (__pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_clear) __pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pygambit_3lib_9libgambit_PlayerSupportStrategies);
  tmp = ((PyObject*)p->player);
  p->player = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_PlayerSupportStrategies(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_PlayerSupportStrategies[] = {
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_1add, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_PlayerSupportStrategies = {
  __pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_PlayerSupportStrategies, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PlayerSupportStrategies = {
  __pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_5__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.PlayerSupportStrategies", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_PlayerSupportStrategies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_PlayerSupportStrategies, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PlayerSupportStrategies, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Represents a collection of strategies for a player in a restriction", /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pygambit_3lib_9libgambit_23PlayerSupportStrategies_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Player(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)o);
  new((void*)&(p->player)) GameObjectPtr<GamePlayerRep>();
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Player(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->player);
  Py_CLEAR(p->restriction);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit_Player(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)o;
  if (p->restriction) {
    e = (*v)(((PyObject *)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit_Player(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Player *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Player *)o;
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Player_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Player_4game_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Player_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Player_5label_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_6Player_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_6Player_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Player_number(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Player_6number_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Player_is_chance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Player_9is_chance_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Player_strategies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Player_10strategies_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Player_infosets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Player_8infosets_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Player_min_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Player_10min_payoff_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_6Player_max_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_6Player_10max_payoff_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Player[] = {
  {"unrestrict", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_6Player_7unrestrict, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_6Player_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_6Player_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_Player[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_6Player_game, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_8pygambit_3lib_9libgambit_6Player_label, __pyx_setprop_8pygambit_3lib_9libgambit_6Player_label, (char *)0, 0},
  {(char *)"number", __pyx_getprop_8pygambit_3lib_9libgambit_6Player_number, 0, (char *)0, 0},
  {(char *)"is_chance", __pyx_getprop_8pygambit_3lib_9libgambit_6Player_is_chance, 0, (char *)0, 0},
  {(char *)"strategies", __pyx_getprop_8pygambit_3lib_9libgambit_6Player_strategies, 0, (char *)0, 0},
  {(char *)"infosets", __pyx_getprop_8pygambit_3lib_9libgambit_6Player_infosets, 0, (char *)0, 0},
  {(char *)"min_payoff", __pyx_getprop_8pygambit_3lib_9libgambit_6Player_min_payoff, 0, (char *)0, 0},
  {(char *)"max_payoff", __pyx_getprop_8pygambit_3lib_9libgambit_6Player_max_payoff, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Player = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Player", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Player), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Player, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_6Player_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pygambit_3lib_9libgambit_6Player_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit_Player, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit_Player, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_6Player_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Player, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_Player, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Player, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Outcome(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)o);
  new((void*)&(p->outcome)) GameObjectPtr<GameOutcomeRep>();
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Outcome(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->outcome);
  Py_CLEAR(p->restriction);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit_Outcome(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)o;
  if (p->restriction) {
    e = (*v)(((PyObject *)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit_Outcome(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome *)o;
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Outcome(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_8pygambit_3lib_9libgambit_Outcome(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_11__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_7Outcome_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_4game_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_7Outcome_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_5label_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_7Outcome_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Outcome[] = {
  {"delete", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_7delete, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_13unrestrict, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Outcome_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_Outcome[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_7Outcome_game, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_8pygambit_3lib_9libgambit_7Outcome_label, __pyx_setprop_8pygambit_3lib_9libgambit_7Outcome_label, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Outcome = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Outcome, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Outcome = {
  0, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_9__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_8pygambit_3lib_9libgambit_Outcome, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Outcome = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Outcome", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcome), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Outcome, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Outcome, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Outcome, /*tp_as_mapping*/
  __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit_Outcome, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit_Outcome, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_7Outcome_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Outcome, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_Outcome, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Outcome, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_TreeGameOutcome(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)o);
  new((void*)&(p->c_game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_TreeGameOutcome(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->c_game);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_TreeGameOutcome(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_8pygambit_3lib_9libgambit_TreeGameOutcome(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_9__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_15TreeGameOutcome_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_4game_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_15TreeGameOutcome_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_15TreeGameOutcome_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_TreeGameOutcome[] = {
  {"__del__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_1__del__, METH_NOARGS, 0},
  {"delete", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_11delete, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_TreeGameOutcome[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_15TreeGameOutcome_game, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_8pygambit_3lib_9libgambit_15TreeGameOutcome_label, __pyx_setprop_8pygambit_3lib_9libgambit_15TreeGameOutcome_label, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_TreeGameOutcome = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_TreeGameOutcome, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_TreeGameOutcome = {
  0, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_7__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_8pygambit_3lib_9libgambit_TreeGameOutcome, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_TreeGameOutcome = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.TreeGameOutcome", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_TreeGameOutcome), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_TreeGameOutcome, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_TreeGameOutcome, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_TreeGameOutcome, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents an outcome in a strategic game derived from an extensive game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_15TreeGameOutcome_5__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_TreeGameOutcome, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_TreeGameOutcome, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_TreeGameOutcome, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Children(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Children *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Children *)o);
  new((void*)&(p->parent)) GameObjectPtr<GameNodeRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Children(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Children *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Children *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->parent);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Children(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Children[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Children_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Children_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Children = {
  __pyx_pw_8pygambit_3lib_9libgambit_8Children_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Children, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Children = {
  __pyx_pw_8pygambit_3lib_9libgambit_8Children_1__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_8Children_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Children = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Children", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Children), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Children, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Children, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Children, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents the collection of direct children of a node.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Children, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Children, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Node(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Node *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)o);
  new((void*)&(p->node)) GameObjectPtr<GameNodeRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Node(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Node *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Node *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->node);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_5label_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_4Node_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_4Node_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_children(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_8children_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_4game_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_infoset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_7infoset_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_4Node_infoset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_4Node_7infoset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_player(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_6player_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_6parent_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_prior_action(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_12prior_action_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_prior_sibling(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_13prior_sibling_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_next_sibling(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_12next_sibling_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_is_terminal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_11is_terminal_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Node_outcome(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Node_7outcome_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_4Node_outcome(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_4Node_7outcome_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Node[] = {
  {"is_successor_of", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Node_7is_successor_of, METH_O, 0},
  {"is_subgame_root", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Node_9is_subgame_root, METH_NOARGS, 0},
  {"append_move", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_4Node_11append_move, METH_VARARGS|METH_KEYWORDS, 0},
  {"insert_move", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_4Node_13insert_move, METH_VARARGS|METH_KEYWORDS, 0},
  {"leave_infoset", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Node_15leave_infoset, METH_NOARGS, 0},
  {"delete_parent", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Node_17delete_parent, METH_NOARGS, 0},
  {"delete_tree", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Node_19delete_tree, METH_NOARGS, 0},
  {"copy_tree", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Node_21copy_tree, METH_O, 0},
  {"move_tree", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Node_23move_tree, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Node_25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Node_27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_Node[] = {
  {(char *)"label", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_label, __pyx_setprop_8pygambit_3lib_9libgambit_4Node_label, (char *)0, 0},
  {(char *)"children", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_children, 0, (char *)0, 0},
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_game, 0, (char *)0, 0},
  {(char *)"infoset", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_infoset, __pyx_setprop_8pygambit_3lib_9libgambit_4Node_infoset, (char *)0, 0},
  {(char *)"player", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_player, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_parent, 0, (char *)0, 0},
  {(char *)"prior_action", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_prior_action, 0, (char *)0, 0},
  {(char *)"prior_sibling", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_prior_sibling, 0, (char *)0, 0},
  {(char *)"next_sibling", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_next_sibling, 0, (char *)0, 0},
  {(char *)"is_terminal", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_is_terminal, 0, (char *)0, 0},
  {(char *)"outcome", __pyx_getprop_8pygambit_3lib_9libgambit_4Node_outcome, __pyx_setprop_8pygambit_3lib_9libgambit_4Node_outcome, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Node = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Node", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_4Node_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pygambit_3lib_9libgambit_4Node_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_4Node_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Node, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_Node, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_BaseGame(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_BaseGame(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_BaseGame[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8BaseGame_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8BaseGame_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_BaseGame = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.BaseGame", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_BaseGame), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_BaseGame, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_BaseGame, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_BaseGame, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_StrategySupportProfile(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_StrategySupportProfile(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_StrategySupportProfile(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_22StrategySupportProfile_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_StrategySupportProfile[] = {
  {"remove", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_17remove, METH_O, 0},
  {"difference", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_19difference, METH_O, 0},
  {"intersection", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_21intersection, METH_O, 0},
  {"is_valid", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_23is_valid, METH_VARARGS|METH_KEYWORDS, 0},
  {"issubset", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_25issubset, METH_O, 0},
  {"issuperset", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_27issuperset, METH_O, 0},
  {"restrict", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_29restrict, METH_NOARGS, 0},
  {"undominated", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_31undominated, METH_VARARGS|METH_KEYWORDS, 0},
  {"union", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_33union, METH_O, 0},
  {"unique", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_35unique, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_37__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_39__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_StrategySupportProfile[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_22StrategySupportProfile_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_StrategySupportProfile = {
  0, /*nb_add*/
  __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_15__sub__, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_11__and__, /*nb_and*/
  0, /*nb_xor*/
  __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_13__or__, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_StrategySupportProfile = {
  __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_StrategySupportProfile, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_StrategySupportProfile = {
  __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_5__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.StrategySupportProfile", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_StrategySupportProfile, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  &__pyx_tp_as_number_StrategySupportProfile, /*tp_as_number*/
  &__pyx_tp_as_sequence_StrategySupportProfile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_StrategySupportProfile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A set-like object representing a subset of the strategies in game, incorporating\n    the restriction that each player must have at least one strategy in the set.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_StrategySupportProfile, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_StrategySupportProfile, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pygambit_3lib_9libgambit_22StrategySupportProfile_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_StrategySupportProfile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_RestrictionOutcomes(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)o);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_RestrictionOutcomes(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->restriction);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit_RestrictionOutcomes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)o;
  e = ((likely(__pyx_ptype_8pygambit_3lib_9libgambit_Collection)) ? ((__pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_traverse) ? __pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pygambit_3lib_9libgambit_RestrictionOutcomes)); if (e) return e;
  if (p->restriction) {
    e = (*v)(((PyObject *)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit_RestrictionOutcomes(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes *)o;
  if (likely(__pyx_ptype_8pygambit_3lib_9libgambit_Collection)) { if (__pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_clear) __pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pygambit_3lib_9libgambit_RestrictionOutcomes);
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_RestrictionOutcomes(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_RestrictionOutcomes[] = {
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_7add, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_RestrictionOutcomes = {
  __pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_RestrictionOutcomes, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_RestrictionOutcomes = {
  __pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_3__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.RestrictionOutcomes", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionOutcomes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_RestrictionOutcomes, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_RestrictionOutcomes, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_RestrictionOutcomes, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Represents a collection of outcomes in a restriction.", /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit_RestrictionOutcomes, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit_RestrictionOutcomes, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_RestrictionOutcomes, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pygambit_3lib_9libgambit_19RestrictionOutcomes_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_RestrictionOutcomes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_RestrictionStrategies(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)o);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_RestrictionStrategies(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->restriction);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit_RestrictionStrategies(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)o;
  e = ((likely(__pyx_ptype_8pygambit_3lib_9libgambit_Collection)) ? ((__pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_traverse) ? __pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pygambit_3lib_9libgambit_RestrictionStrategies)); if (e) return e;
  if (p->restriction) {
    e = (*v)(((PyObject *)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit_RestrictionStrategies(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies *)o;
  if (likely(__pyx_ptype_8pygambit_3lib_9libgambit_Collection)) { if (__pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_clear) __pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pygambit_3lib_9libgambit_RestrictionStrategies);
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_RestrictionStrategies(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_RestrictionStrategies[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_RestrictionStrategies = {
  __pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_RestrictionStrategies, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_RestrictionStrategies = {
  __pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_3__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.RestrictionStrategies", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_RestrictionStrategies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_RestrictionStrategies, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_RestrictionStrategies, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_RestrictionStrategies, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Represents a collection of strategies in a restriction.", /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit_RestrictionStrategies, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit_RestrictionStrategies, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_RestrictionStrategies, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pygambit_3lib_9libgambit_21RestrictionStrategies_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_RestrictionStrategies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_StrategicRestriction(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_BaseGame(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_StrategicRestriction(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_BaseGame(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_StrategicRestriction(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_title(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_5title_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_players(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_7players_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_strategies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_10strategies_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_outcomes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_8outcomes_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_is_tree(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_7is_tree_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_is_const_sum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_is_perfect_recall(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_min_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_10min_payoff_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_max_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_10max_payoff_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_StrategicRestriction[] = {
  {"write", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_11write, METH_VARARGS|METH_KEYWORDS, 0},
  {"undominated", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_13undominated, METH_VARARGS|METH_KEYWORDS, 0},
  {"num_strategies_player", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_15num_strategies_player, METH_O, 0},
  {"support_profile", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_17support_profile, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_19unrestrict, METH_NOARGS, 0},
  {"_get_contingency", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_21_get_contingency, METH_VARARGS|METH_KEYWORDS, 0},
  {"mixed_strategy_profile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_25mixed_strategy_profile, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_27__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_29__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_StrategicRestriction[] = {
  {(char *)"title", __pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_title, 0, (char *)0, 0},
  {(char *)"players", __pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_players, 0, (char *)0, 0},
  {(char *)"strategies", __pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_strategies, 0, (char *)0, 0},
  {(char *)"outcomes", __pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_outcomes, 0, (char *)0, 0},
  {(char *)"is_tree", __pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_is_tree, 0, (char *)0, 0},
  {(char *)"is_const_sum", __pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_is_const_sum, 0, (char *)0, 0},
  {(char *)"is_perfect_recall", __pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_is_perfect_recall, 0, (char *)0, 0},
  {(char *)"min_payoff", __pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_min_payoff, 0, (char *)0, 0},
  {(char *)"max_payoff", __pyx_getprop_8pygambit_3lib_9libgambit_20StrategicRestriction_max_payoff, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_StrategicRestriction = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_StrategicRestriction, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_StrategicRestriction = {
  0, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_23__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.StrategicRestriction", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_StrategicRestriction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_StrategicRestriction, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_StrategicRestriction, /*tp_as_mapping*/
  __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_9__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A StrategicRestriction is a read-only view on a game, defined by a\n    subset of the strategies on the original game.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_StrategicRestriction, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_StrategicRestriction, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pygambit_3lib_9libgambit_20StrategicRestriction_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_StrategicRestriction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfile(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedStrategyProfile(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_MixedStrategyProfile(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_8pygambit_3lib_9libgambit_MixedStrategyProfile(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_11__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_MixedStrategyProfile[] = {
  {"_repr_latex_", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_3_repr_latex_, METH_NOARGS, 0},
  {"_resolve_index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_7_resolve_index, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setprob_player", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_13_setprob_player, METH_VARARGS|METH_KEYWORDS, 0},
  {"payoff", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_15payoff, METH_VARARGS|METH_KEYWORDS, 0},
  {"strategy_value", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_17strategy_value, METH_O, 0},
  {"strategy_values", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_19strategy_values, METH_VARARGS|METH_KEYWORDS, 0},
  {"strategy_value_deriv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_21strategy_value_deriv, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedStrategyProfile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_MixedStrategyProfile, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedStrategyProfile = {
  0, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_8pygambit_3lib_9libgambit_MixedStrategyProfile, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfile = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.MixedStrategyProfile", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedStrategyProfile, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedStrategyProfile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedStrategyProfile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_5__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_MixedStrategyProfile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfile(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedStrategyProfile(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble[] = {
  {"_strategy_index", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_5_strategy_index, METH_O, 0},
  {"_getprob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_7_getprob, METH_O, 0},
  {"_getprob_strategy", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_9_getprob_strategy, METH_O, 0},
  {"_setprob", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_11_setprob, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setprob_strategy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_13_setprob_strategy, METH_VARARGS|METH_KEYWORDS, 0},
  {"_payoff", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_15_payoff, METH_O, 0},
  {"_strategy_value", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_17_strategy_value, METH_O, 0},
  {"_strategy_value_deriv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_19_strategy_value_deriv, METH_VARARGS|METH_KEYWORDS, 0},
  {"liap_value", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_21liap_value, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_23copy, METH_NOARGS, 0},
  {"as_behavior", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_25as_behavior, METH_NOARGS, 0},
  {"restriction", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_27restriction, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_29unrestrict, METH_NOARGS, 0},
  {"set_centroid", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_31set_centroid, METH_NOARGS, 0},
  {"normalize", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_33normalize, METH_NOARGS, 0},
  {"randomize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_35randomize, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_37__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_39__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedStrategyProfileDouble = {
  __pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedStrategyProfileDouble = {
  __pyx_pw_8pygambit_3lib_9libgambit_26MixedStrategyProfileDouble_3__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.MixedStrategyProfileDouble", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedStrategyProfileDouble, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedStrategyProfileDouble, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfileRational(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfile(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedStrategyProfileRational(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedStrategyProfile(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_MixedStrategyProfileRational[] = {
  {"_strategy_index", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_5_strategy_index, METH_O, 0},
  {"_getprob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_7_getprob, METH_O, 0},
  {"_getprob_strategy", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_9_getprob_strategy, METH_O, 0},
  {"_setprob", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_11_setprob, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setprob_strategy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_13_setprob_strategy, METH_VARARGS|METH_KEYWORDS, 0},
  {"_payoff", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_15_payoff, METH_O, 0},
  {"_strategy_value", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_17_strategy_value, METH_O, 0},
  {"_strategy_value_deriv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_19_strategy_value_deriv, METH_VARARGS|METH_KEYWORDS, 0},
  {"liap_value", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_21liap_value, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_23copy, METH_NOARGS, 0},
  {"as_behavior", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_25as_behavior, METH_NOARGS, 0},
  {"restriction", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_27restriction, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_29unrestrict, METH_NOARGS, 0},
  {"set_centroid", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_31set_centroid, METH_NOARGS, 0},
  {"normalize", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_33normalize, METH_NOARGS, 0},
  {"randomize", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_35randomize, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_37__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_39__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_MixedStrategyProfileRational[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedStrategyProfileRational = {
  __pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedStrategyProfileRational = {
  __pyx_pw_8pygambit_3lib_9libgambit_28MixedStrategyProfileRational_3__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.MixedStrategyProfileRational", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedStrategyProfileRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedStrategyProfileRational, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedStrategyProfileRational, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedStrategyProfileRational, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_MixedStrategyProfileRational, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_MixedStrategyProfileRational, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_MixedStrategyProfileRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfile(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedBehaviorProfile(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_MixedBehaviorProfile(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_8pygambit_3lib_9libgambit_MixedBehaviorProfile(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_15__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_MixedBehaviorProfile[] = {
  {"_repr_latex_", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_3_repr_latex_, METH_NOARGS, 0},
  {"_resolve_index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_7_resolve_index, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setinfoset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_9_setinfoset, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setplayer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_11_setplayer, METH_VARARGS|METH_KEYWORDS, 0},
  {"is_defined_at", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_17is_defined_at, METH_O, 0},
  {"belief", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_19belief, METH_O, 0},
  {"action_prob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_21action_prob, METH_O, 0},
  {"payoff", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_23payoff, METH_O, 0},
  {"realiz_prob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_25realiz_prob, METH_O, 0},
  {"regret", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_27regret, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedBehaviorProfile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_MixedBehaviorProfile, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedBehaviorProfile = {
  0, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_8pygambit_3lib_9libgambit_MixedBehaviorProfile, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfile = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.MixedBehaviorProfile", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedBehaviorProfile, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedBehaviorProfile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedBehaviorProfile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_5__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_MixedBehaviorProfile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfile(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedBehaviorProfile(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble[] = {
  {"_is_defined_at", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_5_is_defined_at, METH_O, 0},
  {"_getprob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_7_getprob, METH_O, 0},
  {"_getaction", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_9_getaction, METH_O, 0},
  {"_setprob", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_11_setprob, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setaction", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_13_setaction, METH_VARARGS|METH_KEYWORDS, 0},
  {"_payoff", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_15_payoff, METH_O, 0},
  {"_belief", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_17_belief, METH_O, 0},
  {"_infoset_prob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_19_infoset_prob, METH_O, 0},
  {"_infoset_payoff", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_21_infoset_payoff, METH_O, 0},
  {"_action_prob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_23_action_prob, METH_O, 0},
  {"_action_payoff", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_25_action_payoff, METH_O, 0},
  {"_regret", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_27_regret, METH_O, 0},
  {"copy", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_29copy, METH_NOARGS, 0},
  {"as_strategy", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_31as_strategy, METH_NOARGS, 0},
  {"liap_value", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_33liap_value, METH_NOARGS, 0},
  {"set_centroid", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_35set_centroid, METH_NOARGS, 0},
  {"normalize", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_37normalize, METH_NOARGS, 0},
  {"randomize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_39randomize, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_41__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_43__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedBehaviorProfileDouble = {
  __pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedBehaviorProfileDouble = {
  __pyx_pw_8pygambit_3lib_9libgambit_26MixedBehaviorProfileDouble_3__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.MixedBehaviorProfileDouble", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedBehaviorProfileDouble, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedBehaviorProfileDouble, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfile(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedBehaviorProfile(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational[] = {
  {"_is_defined_at", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_5_is_defined_at, METH_O, 0},
  {"_getprob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_7_getprob, METH_O, 0},
  {"_getaction", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_9_getaction, METH_O, 0},
  {"_setprob", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_11_setprob, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setaction", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_13_setaction, METH_VARARGS|METH_KEYWORDS, 0},
  {"_payoff", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_15_payoff, METH_O, 0},
  {"_belief", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_17_belief, METH_O, 0},
  {"_infoset_prob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_19_infoset_prob, METH_O, 0},
  {"_infoset_payoff", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_21_infoset_payoff, METH_O, 0},
  {"_action_prob", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_23_action_prob, METH_O, 0},
  {"_action_payoff", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_25_action_payoff, METH_O, 0},
  {"_regret", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_27_regret, METH_O, 0},
  {"copy", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_29copy, METH_NOARGS, 0},
  {"as_strategy", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_31as_strategy, METH_NOARGS, 0},
  {"liap_value", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_33liap_value, METH_NOARGS, 0},
  {"set_centroid", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_35set_centroid, METH_NOARGS, 0},
  {"normalize", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_37normalize, METH_NOARGS, 0},
  {"randomize", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_39randomize, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_41__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_43__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedBehaviorProfileRational = {
  __pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedBehaviorProfileRational = {
  __pyx_pw_8pygambit_3lib_9libgambit_28MixedBehaviorProfileRational_3__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.MixedBehaviorProfileRational", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedBehaviorProfileRational, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedBehaviorProfileRational, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Outcomes(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Outcomes(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Outcomes(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Outcomes[] = {
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_5add, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Outcomes = {
  __pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Outcomes, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Outcomes = {
  __pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_1__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_8Outcomes_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Outcomes = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Outcomes", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Outcomes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Outcomes, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Outcomes, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Outcomes, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of outcomes in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Outcomes, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Outcomes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Players(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Players *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Players(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Players *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->game);
  Py_CLEAR(p->restriction);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit_Players(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Players *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)o;
  e = ((likely(__pyx_ptype_8pygambit_3lib_9libgambit_Collection)) ? ((__pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_traverse) ? __pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pygambit_3lib_9libgambit_Players)); if (e) return e;
  if (p->restriction) {
    e = (*v)(((PyObject *)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit_Players(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit_Players *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Players *)o;
  if (likely(__pyx_ptype_8pygambit_3lib_9libgambit_Collection)) { if (__pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_clear) __pyx_ptype_8pygambit_3lib_9libgambit_Collection->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pygambit_3lib_9libgambit_Players);
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Players(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_7Players_chance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_7Players_6chance_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Players[] = {
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_7Players_5add, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Players_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_7Players_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_Players[] = {
  {(char *)"chance", __pyx_getprop_8pygambit_3lib_9libgambit_7Players_chance, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Players = {
  __pyx_pw_8pygambit_3lib_9libgambit_7Players_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Players, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Players = {
  __pyx_pw_8pygambit_3lib_9libgambit_7Players_1__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_7Players_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Players = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Players", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Players), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Players, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Players, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Players, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Represents a collection of players in a game.", /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit_Players, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit_Players, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Players, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_Players, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Players, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_GameActions(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_GameActions(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_GameActions(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_GameActions[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_11GameActions_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_11GameActions_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_GameActions = {
  __pyx_pw_8pygambit_3lib_9libgambit_11GameActions_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_GameActions, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GameActions = {
  __pyx_pw_8pygambit_3lib_9libgambit_11GameActions_1__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_11GameActions_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_GameActions = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.GameActions", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_GameActions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_GameActions, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_GameActions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GameActions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of actions in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_GameActions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_GameActions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_GameInfosets(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_GameInfosets(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_GameInfosets(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_GameInfosets[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_GameInfosets = {
  __pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_GameInfosets, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GameInfosets = {
  __pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_1__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_12GameInfosets_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_GameInfosets = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.GameInfosets", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_GameInfosets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_GameInfosets, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_GameInfosets, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GameInfosets, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of infosets in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_GameInfosets, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_GameInfosets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_GameStrategies(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *p;
  PyObject *o = __pyx_tp_new_8pygambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_GameStrategies(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_GameStrategies(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_GameStrategies[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_GameStrategies = {
  __pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_GameStrategies, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GameStrategies = {
  __pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_1__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_14GameStrategies_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_GameStrategies = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.GameStrategies", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_GameStrategies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_GameStrategies, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pygambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_GameStrategies, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GameStrategies, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of strategies in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_GameStrategies, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_GameStrategies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_Game(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Game(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit_Game *p = (struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_Game(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_is_tree(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_7is_tree_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_title(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_5title_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_4Game_title(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_4Game_5title_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_comment(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_7comment_1__get__(o);
}

static int __pyx_setprop_8pygambit_3lib_9libgambit_4Game_comment(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_8pygambit_3lib_9libgambit_4Game_7comment_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_actions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_7actions_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_infosets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_8infosets_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_players(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_7players_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_strategies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_10strategies_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_outcomes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_8outcomes_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_contingencies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_13contingencies_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_root(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_4root_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_is_const_sum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_12is_const_sum_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_is_perfect_recall(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_17is_perfect_recall_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_min_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_10min_payoff_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_4Game_max_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_4Game_10max_payoff_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_Game[] = {
  {"new_tree", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Game_1new_tree, METH_NOARGS, 0},
  {"new_table", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Game_3new_table, METH_O, 0},
  {"from_arrays", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_4Game_5from_arrays, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_game", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Game_7read_game, METH_O, 0},
  {"parse_game", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Game_9parse_game, METH_O, 0},
  {"_get_contingency", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_4Game_19_get_contingency, METH_VARARGS|METH_KEYWORDS, 0},
  {"mixed_strategy_profile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_4Game_23mixed_strategy_profile, METH_VARARGS|METH_KEYWORDS, 0},
  {"mixed_behavior_profile", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_4Game_25mixed_behavior_profile, METH_VARARGS|METH_KEYWORDS, 0},
  {"support_profile", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Game_27support_profile, METH_NOARGS, 0},
  {"num_nodes", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Game_29num_nodes, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Game_31unrestrict, METH_NOARGS, 0},
  {"write", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pygambit_3lib_9libgambit_4Game_33write, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Game_35__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_4Game_37__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_Game[] = {
  {(char *)"is_tree", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_is_tree, 0, (char *)0, 0},
  {(char *)"title", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_title, __pyx_setprop_8pygambit_3lib_9libgambit_4Game_title, (char *)0, 0},
  {(char *)"comment", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_comment, __pyx_setprop_8pygambit_3lib_9libgambit_4Game_comment, (char *)0, 0},
  {(char *)"actions", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_actions, 0, (char *)0, 0},
  {(char *)"infosets", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_infosets, 0, (char *)0, 0},
  {(char *)"players", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_players, 0, (char *)0, 0},
  {(char *)"strategies", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_strategies, 0, (char *)0, 0},
  {(char *)"outcomes", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_outcomes, 0, (char *)0, 0},
  {(char *)"contingencies", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_contingencies, 0, (char *)0, 0},
  {(char *)"root", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_root, 0, (char *)0, 0},
  {(char *)"is_const_sum", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_is_const_sum, 0, (char *)0, 0},
  {(char *)"is_perfect_recall", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_is_perfect_recall, 0, (char *)0, 0},
  {(char *)"min_payoff", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_min_payoff, 0, (char *)0, 0},
  {(char *)"max_payoff", __pyx_getprop_8pygambit_3lib_9libgambit_4Game_max_payoff, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Game = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_Game, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Game = {
  0, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_4Game_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_Game = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.Game", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_Game), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_Game, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_4Game_13__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Game, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Game, /*tp_as_mapping*/
  __pyx_pw_8pygambit_3lib_9libgambit_4Game_17__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8pygambit_3lib_9libgambit_4Game_11__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_8pygambit_3lib_9libgambit_4Game_15__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_Game, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_Game, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_Game, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumPureStrategySolver(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumPureStrategySolver(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_EnumPureStrategySolver[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22EnumPureStrategySolver_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_EnumPureStrategySolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.EnumPureStrategySolver", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureStrategySolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumPureStrategySolver, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_EnumPureStrategySolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_EnumPureStrategySolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumPureAgentSolver(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumPureAgentSolver(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_EnumPureAgentSolver[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_19EnumPureAgentSolver_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_EnumPureAgentSolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.EnumPureAgentSolver", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumPureAgentSolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumPureAgentSolver, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_EnumPureAgentSolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_EnumPureAgentSolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_29EnumMixedStrategySolverDouble_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.EnumMixedStrategySolverDouble", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_31EnumMixedStrategySolverRational_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.EnumMixedStrategySolverRational", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_26EnumMixedLrsStrategySolver_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.EnumMixedLrsStrategySolver", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_23LCPBehaviorSolverDouble_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.LCPBehaviorSolverDouble", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_25LCPBehaviorSolverRational_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.LCPBehaviorSolverRational", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LCPStrategySolverDouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LCPStrategySolverDouble(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_LCPStrategySolverDouble[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_23LCPStrategySolverDouble_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.LCPStrategySolverDouble", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LCPStrategySolverDouble, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_LCPStrategySolverDouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_LCPStrategySolverDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LCPStrategySolverRational(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LCPStrategySolverRational(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_LCPStrategySolverRational[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_25LCPStrategySolverRational_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.LCPStrategySolverRational", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_LCPStrategySolverRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LCPStrategySolverRational, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_LCPStrategySolverRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_LCPStrategySolverRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22LPBehaviorSolverDouble_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.LPBehaviorSolverDouble", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LPBehaviorSolverRational(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LPBehaviorSolverRational(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_LPBehaviorSolverRational[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_24LPBehaviorSolverRational_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.LPBehaviorSolverRational", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_LPBehaviorSolverRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LPBehaviorSolverRational, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_LPBehaviorSolverRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_LPBehaviorSolverRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LPStrategySolverDouble(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LPStrategySolverDouble(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_LPStrategySolverDouble[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_22LPStrategySolverDouble_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.LPStrategySolverDouble", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LPStrategySolverDouble, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_LPStrategySolverDouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_LPStrategySolverDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LPStrategySolverRational(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LPStrategySolverRational(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_LPStrategySolverRational[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_24LPStrategySolverRational_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.LPStrategySolverRational", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_LPStrategySolverRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LPStrategySolverRational, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_LPStrategySolverRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_LPStrategySolverRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_SimpdivStrategySolver(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_SimpdivStrategySolver(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_SimpdivStrategySolver[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_21SimpdivStrategySolver_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_SimpdivStrategySolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.SimpdivStrategySolver", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_SimpdivStrategySolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_SimpdivStrategySolver, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_SimpdivStrategySolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_SimpdivStrategySolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_IPAStrategySolver(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_IPAStrategySolver(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_IPAStrategySolver[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_17IPAStrategySolver_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_IPAStrategySolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.IPAStrategySolver", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_IPAStrategySolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_IPAStrategySolver, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_IPAStrategySolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_IPAStrategySolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_GNMStrategySolver(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_GNMStrategySolver(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_GNMStrategySolver[] = {
  {"solve", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_5solve, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_17GNMStrategySolver_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_GNMStrategySolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.GNMStrategySolver", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_GNMStrategySolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_GNMStrategySolver, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_GNMStrategySolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_GNMStrategySolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_lam(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam_1__get__(o);
}

static PyObject *__pyx_getprop_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_profile(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile_1__get__(o);
}

static PyMethodDef __pyx_methods_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile[] = {
  {(char *)"game", __pyx_getprop_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_game, 0, (char *)0, 0},
  {(char *)"lam", __pyx_getprop_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_lam, 0, (char *)0, 0},
  {(char *)"profile", __pyx_getprop_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_profile, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_LogitQREMixedStrategyProfile = {
  __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LogitQREMixedStrategyProfile = {
  __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7__len__, /*mp_length*/
  __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.LogitQREMixedStrategyProfile", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_LogitQREMixedStrategyProfile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LogitQREMixedStrategyProfile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pygambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct__remove[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct__remove = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct__remove(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct__remove > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct__remove[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct__remove];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct__remove(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_strategy);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct__remove < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct__remove[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct__remove++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct__remove(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *)o;
  if (p->__pyx_v_strategy) {
    e = (*v)(p->__pyx_v_strategy, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct__remove(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove *)o;
  tmp = ((PyObject*)p->__pyx_v_strategy);
  p->__pyx_v_strategy = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct__remove = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct__remove", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct__remove), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct__remove, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct__remove, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct__remove, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct__remove, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_other);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *)o;
  if (p->__pyx_v_other) {
    e = (*v)(((PyObject *)p->__pyx_v_other), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference *)o;
  tmp = ((PyObject*)p->__pyx_v_other);
  p->__pyx_v_other = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_1_difference", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_other);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)o;
  if (p->__pyx_v_other) {
    e = (*v)(((PyObject *)p->__pyx_v_other), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)o;
  tmp = ((PyObject*)p->__pyx_v_other);
  p->__pyx_v_other = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_2_intersection", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_other);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)o;
  if (p->__pyx_v_other) {
    e = (*v)(((PyObject *)p->__pyx_v_other), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)o;
  tmp = ((PyObject*)p->__pyx_v_other);
  p->__pyx_v_other = ((struct __pyx_obj_8pygambit_3lib_9libgambit_StrategySupportProfile *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_3_issubset", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_index);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)o;
  if (p->__pyx_v_index) {
    e = (*v)(p->__pyx_v_index, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)o;
  tmp = ((PyObject*)p->__pyx_v_index);
  p->__pyx_v_index = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_4__resolve_index", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_5__repr_latex_", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_index);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)o;
  if (p->__pyx_v_index) {
    e = (*v)(p->__pyx_v_index, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)o;
  tmp = ((PyObject*)p->__pyx_v_index);
  p->__pyx_v_index = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_7__resolve_index", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_8__repr_latex_", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_9_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_10__repr_latex_", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_11_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arrays);
  Py_CLEAR(p->__pyx_v_g);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)o;
  if (p->__pyx_v_arrays) {
    e = (*v)(p->__pyx_v_arrays, a); if (e) return e;
  }
  if (p->__pyx_v_g) {
    e = (*v)(((PyObject *)p->__pyx_v_g), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)o;
  tmp = ((PyObject*)p->__pyx_v_arrays);
  p->__pyx_v_arrays = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_g);
  p->__pyx_v_g = ((struct __pyx_obj_8pygambit_3lib_9libgambit_Game *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_12_from_arrays", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, /*tp_traverse*/
  __pyx_tp_clear_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_a);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_a) {
    e = (*v)(p->__pyx_v_a, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_13_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr[8];
static int __pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr = 0;

static PyObject *__pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr[--__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(PyObject *o) {
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr)))) {
    __pyx_freelist_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr[__pyx_freecount_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr++] = ((struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pygambit.lib.libgambit.__pyx_scope_struct_14_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_libgambit(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_libgambit},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "libgambit",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Action, __pyx_k_Action, sizeof(__pyx_k_Action), 0, 0, 1, 1},
  {&__pyx_kp_s_Action_d_s_at_infoset_s_for_pla, __pyx_k_Action_d_s_at_infoset_s_for_pla, sizeof(__pyx_k_Action_d_s_at_infoset_s_for_pla), 0, 0, 1, 0},
  {&__pyx_n_s_Actions, __pyx_k_Actions, sizeof(__pyx_k_Actions), 0, 0, 1, 1},
  {&__pyx_kp_s_Adding_strategies_is_only_applic, __pyx_k_Adding_strategies_is_only_applic, sizeof(__pyx_k_Adding_strategies_is_only_applic), 0, 0, 1, 0},
  {&__pyx_kp_s_Adding_strategies_is_only_applic_2, __pyx_k_Adding_strategies_is_only_applic_2, sizeof(__pyx_k_Adding_strategies_is_only_applic_2), 0, 0, 1, 0},
  {&__pyx_kp_s_All_specified_arrays_must_have_t, __pyx_k_All_specified_arrays_must_have_t, sizeof(__pyx_k_All_specified_arrays_must_have_t), 0, 0, 1, 0},
  {&__pyx_kp_s_Another_outcome_with_an_identica, __pyx_k_Another_outcome_with_an_identica, sizeof(__pyx_k_Another_outcome_with_an_identica), 0, 0, 1, 0},
  {&__pyx_kp_s_Another_player_with_an_identical, __pyx_k_Another_player_with_an_identical, sizeof(__pyx_k_Another_player_with_an_identical), 0, 0, 1, 0},
  {&__pyx_n_s_BaseGame, __pyx_k_BaseGame, sizeof(__pyx_k_BaseGame), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_modify_outcomes_in_a_deri, __pyx_k_Cannot_modify_outcomes_in_a_deri, sizeof(__pyx_k_Cannot_modify_outcomes_in_a_deri), 0, 0, 1, 0},
  {&__pyx_kp_s_Changing_objects_in_a_restrictio, __pyx_k_Changing_objects_in_a_restrictio, sizeof(__pyx_k_Changing_objects_in_a_restrictio), 0, 0, 1, 0},
  {&__pyx_kp_s_Changing_objects_in_a_support_is, __pyx_k_Changing_objects_in_a_support_is, sizeof(__pyx_k_Changing_objects_in_a_support_is), 0, 0, 1, 0},
  {&__pyx_n_s_Children, __pyx_k_Children, sizeof(__pyx_k_Children), 0, 0, 1, 1},
  {&__pyx_n_s_Collection, __pyx_k_Collection, sizeof(__pyx_k_Collection), 0, 0, 1, 1},
  {&__pyx_n_s_Contingencies, __pyx_k_Contingencies, sizeof(__pyx_k_Contingencies), 0, 0, 1, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_n_s_EnumMixedLrsStrategySolver, __pyx_k_EnumMixedLrsStrategySolver, sizeof(__pyx_k_EnumMixedLrsStrategySolver), 0, 0, 1, 1},
  {&__pyx_n_s_EnumMixedStrategySolverDouble, __pyx_k_EnumMixedStrategySolverDouble, sizeof(__pyx_k_EnumMixedStrategySolverDouble), 0, 0, 1, 1},
  {&__pyx_n_s_EnumMixedStrategySolverRational, __pyx_k_EnumMixedStrategySolverRational, sizeof(__pyx_k_EnumMixedStrategySolverRational), 0, 0, 1, 1},
  {&__pyx_n_s_EnumPureAgentSolver, __pyx_k_EnumPureAgentSolver, sizeof(__pyx_k_EnumPureAgentSolver), 0, 0, 1, 1},
  {&__pyx_n_s_EnumPureStrategySolver, __pyx_k_EnumPureStrategySolver, sizeof(__pyx_k_EnumPureStrategySolver), 0, 0, 1, 1},
  {&__pyx_n_s_Filler, __pyx_k_Filler, sizeof(__pyx_k_Filler), 0, 0, 1, 1},
  {&__pyx_n_s_Fraction, __pyx_k_Fraction, sizeof(__pyx_k_Fraction), 0, 0, 1, 1},
  {&__pyx_n_s_GNMStrategySolver, __pyx_k_GNMStrategySolver, sizeof(__pyx_k_GNMStrategySolver), 0, 0, 1, 1},
  {&__pyx_n_s_Game, __pyx_k_Game, sizeof(__pyx_k_Game), 0, 0, 1, 1},
  {&__pyx_n_s_GameActions, __pyx_k_GameActions, sizeof(__pyx_k_GameActions), 0, 0, 1, 1},
  {&__pyx_n_s_GameInfosets, __pyx_k_GameInfosets, sizeof(__pyx_k_GameInfosets), 0, 0, 1, 1},
  {&__pyx_n_s_GameStrategies, __pyx_k_GameStrategies, sizeof(__pyx_k_GameStrategies), 0, 0, 1, 1},
  {&__pyx_kp_s_Game_must_have_a_tree_representa, __pyx_k_Game_must_have_a_tree_representa, sizeof(__pyx_k_Game_must_have_a_tree_representa), 0, 0, 1, 0},
  {&__pyx_kp_s_Game_s, __pyx_k_Game_s, sizeof(__pyx_k_Game_s), 0, 0, 1, 0},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_IPAStrategySolver, __pyx_k_IPAStrategySolver, sizeof(__pyx_k_IPAStrategySolver), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x3d, __pyx_k_Incompatible_checksums_s_vs_0x3d, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x3d), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x4b, __pyx_k_Incompatible_checksums_s_vs_0x4b, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x4b), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Index_out_of_range, __pyx_k_Index_out_of_range, sizeof(__pyx_k_Index_out_of_range), 0, 0, 1, 0},
  {&__pyx_n_s_Infoset, __pyx_k_Infoset, sizeof(__pyx_k_Infoset), 0, 0, 1, 1},
  {&__pyx_kp_s_Infoset_d_s_for_player_s_in_gam, __pyx_k_Infoset_d_s_for_player_s_in_gam, sizeof(__pyx_k_Infoset_d_s_for_player_s_in_gam), 0, 0, 1, 0},
  {&__pyx_n_s_Infosets, __pyx_k_Infosets, sizeof(__pyx_k_Infosets), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_LCPBehaviorSolverDouble, __pyx_k_LCPBehaviorSolverDouble, sizeof(__pyx_k_LCPBehaviorSolverDouble), 0, 0, 1, 1},
  {&__pyx_n_s_LCPBehaviorSolverRational, __pyx_k_LCPBehaviorSolverRational, sizeof(__pyx_k_LCPBehaviorSolverRational), 0, 0, 1, 1},
  {&__pyx_n_s_LCPStrategySolverDouble, __pyx_k_LCPStrategySolverDouble, sizeof(__pyx_k_LCPStrategySolverDouble), 0, 0, 1, 1},
  {&__pyx_n_s_LCPStrategySolverRational, __pyx_k_LCPStrategySolverRational, sizeof(__pyx_k_LCPStrategySolverRational), 0, 0, 1, 1},
  {&__pyx_n_s_LPBehaviorSolverDouble, __pyx_k_LPBehaviorSolverDouble, sizeof(__pyx_k_LPBehaviorSolverDouble), 0, 0, 1, 1},
  {&__pyx_n_s_LPBehaviorSolverRational, __pyx_k_LPBehaviorSolverRational, sizeof(__pyx_k_LPBehaviorSolverRational), 0, 0, 1, 1},
  {&__pyx_n_s_LPStrategySolverDouble, __pyx_k_LPStrategySolverDouble, sizeof(__pyx_k_LPStrategySolverDouble), 0, 0, 1, 1},
  {&__pyx_n_s_LPStrategySolverRational, __pyx_k_LPStrategySolverRational, sizeof(__pyx_k_LPStrategySolverRational), 0, 0, 1, 1},
  {&__pyx_n_s_LogitQREMixedStrategyProfile, __pyx_k_LogitQREMixedStrategyProfile, sizeof(__pyx_k_LogitQREMixedStrategyProfile), 0, 0, 1, 1},
  {&__pyx_kp_s_LogitQREMixedStrategyProfile_lam, __pyx_k_LogitQREMixedStrategyProfile_lam, sizeof(__pyx_k_LogitQREMixedStrategyProfile_lam), 0, 0, 1, 0},
  {&__pyx_n_s_Members, __pyx_k_Members, sizeof(__pyx_k_Members), 0, 0, 1, 1},
  {&__pyx_n_s_MismatchError, __pyx_k_MismatchError, sizeof(__pyx_k_MismatchError), 0, 0, 1, 1},
  {&__pyx_n_s_MixedBehav, __pyx_k_MixedBehav, sizeof(__pyx_k_MixedBehav), 0, 0, 1, 1},
  {&__pyx_n_s_MixedBehavInfoset, __pyx_k_MixedBehavInfoset, sizeof(__pyx_k_MixedBehavInfoset), 0, 0, 1, 1},
  {&__pyx_n_s_MixedBehaviorProfile, __pyx_k_MixedBehaviorProfile, sizeof(__pyx_k_MixedBehaviorProfile), 0, 0, 1, 1},
  {&__pyx_n_s_MixedBehaviorProfileDouble, __pyx_k_MixedBehaviorProfileDouble, sizeof(__pyx_k_MixedBehaviorProfileDouble), 0, 0, 1, 1},
  {&__pyx_n_s_MixedBehaviorProfileRational, __pyx_k_MixedBehaviorProfileRational, sizeof(__pyx_k_MixedBehaviorProfileRational), 0, 0, 1, 1},
  {&__pyx_n_s_MixedStrategy, __pyx_k_MixedStrategy, sizeof(__pyx_k_MixedStrategy), 0, 0, 1, 1},
  {&__pyx_n_s_MixedStrategyProfile, __pyx_k_MixedStrategyProfile, sizeof(__pyx_k_MixedStrategyProfile), 0, 0, 1, 1},
  {&__pyx_n_s_MixedStrategyProfileDouble, __pyx_k_MixedStrategyProfileDouble, sizeof(__pyx_k_MixedStrategyProfileDouble), 0, 0, 1, 1},
  {&__pyx_n_s_MixedStrategyProfileRational, __pyx_k_MixedStrategyProfileRational, sizeof(__pyx_k_MixedStrategyProfileRational), 0, 0, 1, 1},
  {&__pyx_kp_s_Mixed_behavior_profiles_are_not, __pyx_k_Mixed_behavior_profiles_are_not, sizeof(__pyx_k_Mixed_behavior_profiles_are_not), 0, 0, 1, 0},
  {&__pyx_kp_s_Mixed_strategies_not_supported_f, __pyx_k_Mixed_strategies_not_supported_f, sizeof(__pyx_k_Mixed_strategies_not_supported_f), 0, 0, 1, 0},
  {&__pyx_kp_s_Must_use_a_tuple_of_ints_strateg, __pyx_k_Must_use_a_tuple_of_ints_strateg, sizeof(__pyx_k_Must_use_a_tuple_of_ints_strateg), 0, 0, 1, 0},
  {&__pyx_n_s_Node, __pyx_k_Node, sizeof(__pyx_k_Node), 0, 0, 1, 1},
  {&__pyx_kp_s_Node_d_s_in_game_s, __pyx_k_Node_d_s_in_game_s, sizeof(__pyx_k_Node_d_s_in_game_s), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_s_Number_of_strategies_is_not_equa, __pyx_k_Number_of_strategies_is_not_equa, sizeof(__pyx_k_Number_of_strategies_is_not_equa), 0, 0, 1, 0},
  {&__pyx_kp_s_Operation_only_defined_for_games, __pyx_k_Operation_only_defined_for_games, sizeof(__pyx_k_Operation_only_defined_for_games), 0, 0, 1, 0},
  {&__pyx_n_s_Outcome, __pyx_k_Outcome, sizeof(__pyx_k_Outcome), 0, 0, 1, 1},
  {&__pyx_kp_s_Outcome_d_s_in_game_s, __pyx_k_Outcome_d_s_in_game_s, sizeof(__pyx_k_Outcome_d_s_in_game_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Outcome_s_in_game_s, __pyx_k_Outcome_s_in_game_s, sizeof(__pyx_k_Outcome_s_in_game_s), 0, 0, 1, 0},
  {&__pyx_n_s_Outcomes, __pyx_k_Outcomes, sizeof(__pyx_k_Outcomes), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Player, __pyx_k_Player, sizeof(__pyx_k_Player), 0, 0, 1, 1},
  {&__pyx_n_s_PlayerSupportStrategies, __pyx_k_PlayerSupportStrategies, sizeof(__pyx_k_PlayerSupportStrategies), 0, 0, 1, 1},
  {&__pyx_kp_s_Player_CHANCE_in_game_s, __pyx_k_Player_CHANCE_in_game_s, sizeof(__pyx_k_Player_CHANCE_in_game_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Player_d_s_in_game_s, __pyx_k_Player_d_s_in_game_s, sizeof(__pyx_k_Player_d_s_in_game_s), 0, 0, 1, 0},
  {&__pyx_n_s_Players, __pyx_k_Players, sizeof(__pyx_k_Players), 0, 0, 1, 1},
  {&__pyx_kp_s_Precedes_takes_a_Node_object_as, __pyx_k_Precedes_takes_a_Node_object_as, sizeof(__pyx_k_Precedes_takes_a_Node_object_as), 0, 0, 1, 0},
  {&__pyx_kp_s_Provided_strategy_index_d_out_of, __pyx_k_Provided_strategy_index_d_out_of, sizeof(__pyx_k_Provided_strategy_index_d_out_of), 0, 0, 1, 0},
  {&__pyx_kp_s_Provided_strategy_label_s_not_de, __pyx_k_Provided_strategy_label_s_not_de, sizeof(__pyx_k_Provided_strategy_label_s_not_de), 0, 0, 1, 0},
  {&__pyx_kp_s_Provided_strategy_s_not_availabl, __pyx_k_Provided_strategy_s_not_availabl, sizeof(__pyx_k_Provided_strategy_s_not_availabl), 0, 0, 1, 0},
  {&__pyx_n_s_Rational, __pyx_k_Rational, sizeof(__pyx_k_Rational), 0, 0, 1, 1},
  {&__pyx_n_s_Rational__repr_latex, __pyx_k_Rational__repr_latex, sizeof(__pyx_k_Rational__repr_latex), 0, 0, 1, 1},
  {&__pyx_n_s_RestrictionOutcomes, __pyx_k_RestrictionOutcomes, sizeof(__pyx_k_RestrictionOutcomes), 0, 0, 1, 1},
  {&__pyx_n_s_RestrictionStrategies, __pyx_k_RestrictionStrategies, sizeof(__pyx_k_RestrictionStrategies), 0, 0, 1, 1},
  {&__pyx_kp_s_Restriction_from_Game_s, __pyx_k_Restriction_from_Game_s, sizeof(__pyx_k_Restriction_from_Game_s), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SimpdivStrategySolver, __pyx_k_SimpdivStrategySolver, sizeof(__pyx_k_SimpdivStrategySolver), 0, 0, 1, 1},
  {&__pyx_n_s_StrategicRestriction, __pyx_k_StrategicRestriction, sizeof(__pyx_k_StrategicRestriction), 0, 0, 1, 1},
  {&__pyx_n_s_Strategies, __pyx_k_Strategies, sizeof(__pyx_k_Strategies), 0, 0, 1, 1},
  {&__pyx_n_s_Strategy, __pyx_k_Strategy, sizeof(__pyx_k_Strategy), 0, 0, 1, 1},
  {&__pyx_n_s_StrategySupportProfile, __pyx_k_StrategySupportProfile, sizeof(__pyx_k_StrategySupportProfile), 0, 0, 1, 1},
  {&__pyx_kp_s_Strategy_d_s_for_player_s_in_ga, __pyx_k_Strategy_d_s_for_player_s_in_ga, sizeof(__pyx_k_Strategy_d_s_for_player_s_in_ga), 0, 0, 1, 0},
  {&__pyx_kp_s_The_new_action_should_be_from_th, __pyx_k_The_new_action_should_be_from_th, sizeof(__pyx_k_The_new_action_should_be_from_th), 0, 0, 1, 0},
  {&__pyx_kp_s_This_player_has_another_strategy, __pyx_k_This_player_has_another_strategy, sizeof(__pyx_k_This_player_has_another_strategy), 0, 0, 1, 0},
  {&__pyx_n_s_TreeGameOutcome, __pyx_k_TreeGameOutcome, sizeof(__pyx_k_TreeGameOutcome), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_read_game_from_file_s, __pyx_k_Unable_to_read_game_from_file_s, sizeof(__pyx_k_Unable_to_read_game_from_file_s), 0, 0, 1, 0},
  {&__pyx_n_s_UndefinedOperationError, __pyx_k_UndefinedOperationError, sizeof(__pyx_k_UndefinedOperationError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 0},
  {&__pyx_kp_s__46, __pyx_k__46, sizeof(__pyx_k__46), 0, 0, 1, 0},
  {&__pyx_n_s_acc, __pyx_k_acc, sizeof(__pyx_k_acc), 0, 0, 1, 1},
  {&__pyx_n_s_action, __pyx_k_action, sizeof(__pyx_k_action), 0, 0, 1, 1},
  {&__pyx_n_s_action_payoff, __pyx_k_action_payoff, sizeof(__pyx_k_action_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_action_prob, __pyx_k_action_prob, sizeof(__pyx_k_action_prob), 0, 0, 1, 1},
  {&__pyx_n_s_actions, __pyx_k_actions, sizeof(__pyx_k_actions), 0, 0, 1, 1},
  {&__pyx_kp_s_append_move_accepts_either_a_Pla, __pyx_k_append_move_accepts_either_a_Pla, sizeof(__pyx_k_append_move_accepts_either_a_Pla), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_can_only_be_applied, __pyx_k_append_move_can_only_be_applied, sizeof(__pyx_k_append_move_can_only_be_applied), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_can_only_be_applied_2, __pyx_k_append_move_can_only_be_applied_2, sizeof(__pyx_k_append_move_can_only_be_applied_2), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_requires_actions_1, __pyx_k_append_move_requires_actions_1, sizeof(__pyx_k_append_move_requires_actions_1), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_with_a_Player_requir, __pyx_k_append_move_with_a_Player_requir, sizeof(__pyx_k_append_move_with_a_Player_requir), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_with_an_Infoset_cann, __pyx_k_append_move_with_an_Infoset_cann, sizeof(__pyx_k_append_move_with_an_Infoset_cann), 0, 0, 1, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_s_argument_of_precedes_should_be_a, __pyx_k_argument_of_precedes_should_be_a, sizeof(__pyx_k_argument_of_precedes_should_be_a), 0, 0, 1, 0},
  {&__pyx_kp_s_argument_of_reveal_should_be_a_P, __pyx_k_argument_of_reveal_should_be_a_P, sizeof(__pyx_k_argument_of_reveal_should_be_a_P), 0, 0, 1, 0},
  {&__pyx_kp_s_argument_should_be_a_Player_inst, __pyx_k_argument_should_be_a_Player_inst, sizeof(__pyx_k_argument_should_be_a_Player_inst), 0, 0, 1, 0},
  {&__pyx_kp_s_argument_should_be_a_str_or_Play, __pyx_k_argument_should_be_a_str_or_Play, sizeof(__pyx_k_argument_should_be_a_str_or_Play), 0, 0, 1, 0},
  {&__pyx_kp_s_argument_should_be_a_str_or_Stra, __pyx_k_argument_should_be_a_str_or_Stra, sizeof(__pyx_k_argument_should_be_a_str_or_Stra), 0, 0, 1, 0},
  {&__pyx_kp_s_argument_should_be_an_int_str_or, __pyx_k_argument_should_be_an_int_str_or, sizeof(__pyx_k_argument_should_be_an_int_str_or), 0, 0, 1, 0},
  {&__pyx_n_s_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 0, 1, 1},
  {&__pyx_n_s_belief, __pyx_k_belief, sizeof(__pyx_k_belief), 0, 0, 1, 1},
  {&__pyx_kp_s_cannot_remove_last_strategy_of_a, __pyx_k_cannot_remove_last_strategy_of_a, sizeof(__pyx_k_cannot_remove_last_strategy_of_a), 0, 0, 1, 0},
  {&__pyx_n_s_children, __pyx_k_children, sizeof(__pyx_k_children), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_kp_s_collection_indexes_must_be_int_o, __pyx_k_collection_indexes_must_be_int_o, sizeof(__pyx_k_collection_indexes_must_be_int_o), 0, 0, 1, 0},
  {&__pyx_kp_s_contingency_must_be_a_tuple_like, __pyx_k_contingency_must_be_a_tuple_like, sizeof(__pyx_k_contingency_must_be_a_tuple_like), 0, 0, 1, 0},
  {&__pyx_kp_s_copy_tree_can_only_be_applied_be, __pyx_k_copy_tree_can_only_be_applied_be, sizeof(__pyx_k_copy_tree_can_only_be_applied_be), 0, 0, 1, 0},
  {&__pyx_kp_s_copy_tree_takes_a_Node_object_as, __pyx_k_copy_tree_takes_a_Node_object_as, sizeof(__pyx_k_copy_tree_takes_a_Node_object_as), 0, 0, 1, 0},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_kp_s_delete_requires_a_Strategy_objec, __pyx_k_delete_requires_a_Strategy_objec, sizeof(__pyx_k_delete_requires_a_Strategy_objec), 0, 0, 1, 0},
  {&__pyx_n_s_denom, __pyx_k_denom, sizeof(__pyx_k_denom), 0, 0, 1, 1},
  {&__pyx_n_s_denominator, __pyx_k_denominator, sizeof(__pyx_k_denominator), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_difference, __pyx_k_difference, sizeof(__pyx_k_difference), 0, 0, 1, 1},
  {&__pyx_n_s_difference_locals_lambda, __pyx_k_difference_locals_lambda, sizeof(__pyx_k_difference_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eq, __pyx_k_eq, sizeof(__pyx_k_eq), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_external, __pyx_k_external, sizeof(__pyx_k_external), 0, 0, 1, 1},
  {&__pyx_n_s_fillvalue, __pyx_k_fillvalue, sizeof(__pyx_k_fillvalue), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_kp_s_frac_s_s, __pyx_k_frac_s_s, sizeof(__pyx_k_frac_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_fractions, __pyx_k_fractions, sizeof(__pyx_k_fractions), 0, 0, 1, 1},
  {&__pyx_n_s_from_arrays, __pyx_k_from_arrays, sizeof(__pyx_k_from_arrays), 0, 0, 1, 1},
  {&__pyx_n_s_from_arrays_locals_genexpr, __pyx_k_from_arrays_locals_genexpr, sizeof(__pyx_k_from_arrays_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
  {&__pyx_n_s_game, __pyx_k_game, sizeof(__pyx_k_game), 0, 0, 1, 1},
  {&__pyx_n_s_gameiter, __pyx_k_gameiter, sizeof(__pyx_k_gameiter), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_contingency, __pyx_k_get_contingency, sizeof(__pyx_k_get_contingency), 0, 0, 1, 1},
  {&__pyx_n_s_getaction, __pyx_k_getaction, sizeof(__pyx_k_getaction), 0, 0, 1, 1},
  {&__pyx_n_s_getitem, __pyx_k_getitem, sizeof(__pyx_k_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav, __pyx_k_getitem___locals_MixedBehav, sizeof(__pyx_k_getitem___locals_MixedBehav), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf, __pyx_k_getitem___locals_MixedBehavInf, sizeof(__pyx_k_getitem___locals_MixedBehavInf), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_2, __pyx_k_getitem___locals_MixedBehavInf_2, sizeof(__pyx_k_getitem___locals_MixedBehavInf_2), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_3, __pyx_k_getitem___locals_MixedBehavInf_3, sizeof(__pyx_k_getitem___locals_MixedBehavInf_3), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_4, __pyx_k_getitem___locals_MixedBehavInf_4, sizeof(__pyx_k_getitem___locals_MixedBehavInf_4), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_5, __pyx_k_getitem___locals_MixedBehavInf_5, sizeof(__pyx_k_getitem___locals_MixedBehavInf_5), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_6, __pyx_k_getitem___locals_MixedBehavInf_6, sizeof(__pyx_k_getitem___locals_MixedBehavInf_6), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_7, __pyx_k_getitem___locals_MixedBehavInf_7, sizeof(__pyx_k_getitem___locals_MixedBehavInf_7), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_8, __pyx_k_getitem___locals_MixedBehavInf_8, sizeof(__pyx_k_getitem___locals_MixedBehavInf_8), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_9, __pyx_k_getitem___locals_MixedBehavInf_9, sizeof(__pyx_k_getitem___locals_MixedBehavInf_9), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_2, __pyx_k_getitem___locals_MixedBehav_2, sizeof(__pyx_k_getitem___locals_MixedBehav_2), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_3, __pyx_k_getitem___locals_MixedBehav_3, sizeof(__pyx_k_getitem___locals_MixedBehav_3), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_4, __pyx_k_getitem___locals_MixedBehav_4, sizeof(__pyx_k_getitem___locals_MixedBehav_4), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_5, __pyx_k_getitem___locals_MixedBehav_5, sizeof(__pyx_k_getitem___locals_MixedBehav_5), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_6, __pyx_k_getitem___locals_MixedBehav_6, sizeof(__pyx_k_getitem___locals_MixedBehav_6), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_7, __pyx_k_getitem___locals_MixedBehav_7, sizeof(__pyx_k_getitem___locals_MixedBehav_7), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav__r, __pyx_k_getitem___locals_MixedBehav__r, sizeof(__pyx_k_getitem___locals_MixedBehav__r), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav__r_2, __pyx_k_getitem___locals_MixedBehav__r_2, sizeof(__pyx_k_getitem___locals_MixedBehav__r_2), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy, __pyx_k_getitem___locals_MixedStrategy, sizeof(__pyx_k_getitem___locals_MixedStrategy), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_2, __pyx_k_getitem___locals_MixedStrategy_2, sizeof(__pyx_k_getitem___locals_MixedStrategy_2), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_3, __pyx_k_getitem___locals_MixedStrategy_3, sizeof(__pyx_k_getitem___locals_MixedStrategy_3), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_4, __pyx_k_getitem___locals_MixedStrategy_4, sizeof(__pyx_k_getitem___locals_MixedStrategy_4), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_5, __pyx_k_getitem___locals_MixedStrategy_5, sizeof(__pyx_k_getitem___locals_MixedStrategy_5), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_6, __pyx_k_getitem___locals_MixedStrategy_6, sizeof(__pyx_k_getitem___locals_MixedStrategy_6), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_7, __pyx_k_getitem___locals_MixedStrategy_7, sizeof(__pyx_k_getitem___locals_MixedStrategy_7), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_8, __pyx_k_getitem___locals_MixedStrategy_8, sizeof(__pyx_k_getitem___locals_MixedStrategy_8), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_9, __pyx_k_getitem___locals_MixedStrategy_9, sizeof(__pyx_k_getitem___locals_MixedStrategy_9), 0, 0, 1, 1},
  {&__pyx_n_s_getprob, __pyx_k_getprob, sizeof(__pyx_k_getprob), 0, 0, 1, 1},
  {&__pyx_n_s_getprob_strategy, __pyx_k_getprob_strategy, sizeof(__pyx_k_getprob_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gte, __pyx_k_gte, sizeof(__pyx_k_gte), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_infoset, __pyx_k_infoset, sizeof(__pyx_k_infoset), 0, 0, 1, 1},
  {&__pyx_n_s_infoset_payoff, __pyx_k_infoset_payoff, sizeof(__pyx_k_infoset_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_infoset_prob, __pyx_k_infoset_prob, sizeof(__pyx_k_infoset_prob), 0, 0, 1, 1},
  {&__pyx_n_s_infosets, __pyx_k_infosets, sizeof(__pyx_k_infosets), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_kp_s_insert_action_takes_an_Action_ob, __pyx_k_insert_action_takes_an_Action_ob, sizeof(__pyx_k_insert_action_takes_an_Action_ob), 0, 0, 1, 0},
  {&__pyx_kp_s_insert_move_accepts_either_a_Pla, __pyx_k_insert_move_accepts_either_a_Pla, sizeof(__pyx_k_insert_move_accepts_either_a_Pla), 0, 0, 1, 0},
  {&__pyx_kp_s_insert_move_requires_actions_1, __pyx_k_insert_move_requires_actions_1, sizeof(__pyx_k_insert_move_requires_actions_1), 0, 0, 1, 0},
  {&__pyx_kp_s_insert_move_with_a_Player_requir, __pyx_k_insert_move_with_a_Player_requir, sizeof(__pyx_k_insert_move_with_a_Player_requir), 0, 0, 1, 0},
  {&__pyx_kp_s_insert_move_with_an_Infoset_cann, __pyx_k_insert_move_with_an_Infoset_cann, sizeof(__pyx_k_insert_move_with_an_Infoset_cann), 0, 0, 1, 0},
  {&__pyx_n_s_intersection, __pyx_k_intersection, sizeof(__pyx_k_intersection), 0, 0, 1, 1},
  {&__pyx_n_s_intersection_locals_lambda, __pyx_k_intersection_locals_lambda, sizeof(__pyx_k_intersection_locals_lambda), 0, 0, 1, 1},
  {&__pyx_kp_s_invalid_set_of_strategies, __pyx_k_invalid_set_of_strategies, sizeof(__pyx_k_invalid_set_of_strategies), 0, 0, 1, 0},
  {&__pyx_n_s_is_chance, __pyx_k_is_chance, sizeof(__pyx_k_is_chance), 0, 0, 1, 1},
  {&__pyx_n_s_is_const_sum, __pyx_k_is_const_sum, sizeof(__pyx_k_is_const_sum), 0, 0, 1, 1},
  {&__pyx_n_s_is_defined_at, __pyx_k_is_defined_at, sizeof(__pyx_k_is_defined_at), 0, 0, 1, 1},
  {&__pyx_n_s_is_perfect_recall, __pyx_k_is_perfect_recall, sizeof(__pyx_k_is_perfect_recall), 0, 0, 1, 1},
  {&__pyx_kp_s_is_successor_of_takes_a_Node_obj, __pyx_k_is_successor_of_takes_a_Node_obj, sizeof(__pyx_k_is_successor_of_takes_a_Node_obj), 0, 0, 1, 0},
  {&__pyx_n_s_is_tree, __pyx_k_is_tree, sizeof(__pyx_k_is_tree), 0, 0, 1, 1},
  {&__pyx_n_s_is_valid, __pyx_k_is_valid, sizeof(__pyx_k_is_valid), 0, 0, 1, 1},
  {&__pyx_n_s_issubset, __pyx_k_issubset, sizeof(__pyx_k_issubset), 0, 0, 1, 1},
  {&__pyx_n_s_issubset_locals_lambda, __pyx_k_issubset_locals_lambda, sizeof(__pyx_k_issubset_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_issuperset, __pyx_k_issuperset, sizeof(__pyx_k_issuperset), 0, 0, 1, 1},
  {&__pyx_kp_s_it_is_not_possible_to_delete_the, __pyx_k_it_is_not_possible_to_delete_the, sizeof(__pyx_k_it_is_not_possible_to_delete_the), 0, 0, 1, 0},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_izip_longest, __pyx_k_izip_longest, sizeof(__pyx_k_izip_longest), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_lam, __pyx_k_lam, sizeof(__pyx_k_lam), 0, 0, 1, 1},
  {&__pyx_kp_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 0},
  {&__pyx_n_s_len, __pyx_k_len, sizeof(__pyx_k_len), 0, 0, 1, 1},
  {&__pyx_n_s_logit_atlambda, __pyx_k_logit_atlambda, sizeof(__pyx_k_logit_atlambda), 0, 0, 1, 1},
  {&__pyx_n_s_logit_estimate, __pyx_k_logit_estimate, sizeof(__pyx_k_logit_estimate), 0, 0, 1, 1},
  {&__pyx_n_s_logit_principal_branch, __pyx_k_logit_principal_branch, sizeof(__pyx_k_logit_principal_branch), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_payoff, __pyx_k_max_payoff, sizeof(__pyx_k_max_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_members, __pyx_k_members, sizeof(__pyx_k_members), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min_payoff, __pyx_k_min_payoff, sizeof(__pyx_k_min_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_mixed_strategy_profile, __pyx_k_mixed_strategy_profile, sizeof(__pyx_k_mixed_strategy_profile), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_kp_s_move_tree_takes_a_Node_object_as, __pyx_k_move_tree_takes_a_Node_object_as, sizeof(__pyx_k_move_tree_takes_a_Node_object_as), 0, 0, 1, 0},
  {&__pyx_kp_s_multiple_actions_matching_label, __pyx_k_multiple_actions_matching_label, sizeof(__pyx_k_multiple_actions_matching_label), 0, 0, 1, 0},
  {&__pyx_kp_s_multiple_infosets_matching_label, __pyx_k_multiple_infosets_matching_label, sizeof(__pyx_k_multiple_infosets_matching_label), 0, 0, 1, 0},
  {&__pyx_kp_s_multiple_strategies_matching_lab, __pyx_k_multiple_strategies_matching_lab, sizeof(__pyx_k_multiple_strategies_matching_lab), 0, 0, 1, 0},
  {&__pyx_kp_s_must_specify_exactly_one_value_p, __pyx_k_must_specify_exactly_one_value_p, sizeof(__pyx_k_must_specify_exactly_one_value_p), 0, 0, 1, 0},
  {&__pyx_kp_s_must_support_iteration, __pyx_k_must_support_iteration, sizeof(__pyx_k_must_support_iteration), 0, 0, 1, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_native, __pyx_k_native, sizeof(__pyx_k_native), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_table, __pyx_k_new_table, sizeof(__pyx_k_new_table), 0, 0, 1, 1},
  {&__pyx_n_s_new_tree, __pyx_k_new_tree, sizeof(__pyx_k_new_tree), 0, 0, 1, 1},
  {&__pyx_n_s_nfg, __pyx_k_nfg, sizeof(__pyx_k_nfg), 0, 0, 1, 1},
  {&__pyx_kp_s_no_action_matching_label_s, __pyx_k_no_action_matching_label_s, sizeof(__pyx_k_no_action_matching_label_s), 0, 0, 1, 0},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_kp_s_no_infoset_matching_label_s, __pyx_k_no_infoset_matching_label_s, sizeof(__pyx_k_no_infoset_matching_label_s), 0, 0, 1, 0},
  {&__pyx_kp_s_no_infoset_or_action_matching_la, __pyx_k_no_infoset_or_action_matching_la, sizeof(__pyx_k_no_infoset_or_action_matching_la), 0, 0, 1, 0},
  {&__pyx_kp_s_no_matching_label_s, __pyx_k_no_matching_label_s, sizeof(__pyx_k_no_matching_label_s), 0, 0, 1, 0},
  {&__pyx_kp_s_no_object_with_label_s, __pyx_k_no_object_with_label_s, sizeof(__pyx_k_no_object_with_label_s), 0, 0, 1, 0},
  {&__pyx_kp_s_no_player_infoset_or_action_matc, __pyx_k_no_player_infoset_or_action_matc, sizeof(__pyx_k_no_player_infoset_or_action_matc), 0, 0, 1, 0},
  {&__pyx_kp_s_no_player_or_strategy_matching_l, __pyx_k_no_player_or_strategy_matching_l, sizeof(__pyx_k_no_player_or_strategy_matching_l), 0, 0, 1, 0},
  {&__pyx_kp_s_no_strategy_matching_label_s, __pyx_k_no_strategy_matching_label_s, sizeof(__pyx_k_no_strategy_matching_label_s), 0, 0, 1, 0},
  {&__pyx_n_s_num_players, __pyx_k_num_players, sizeof(__pyx_k_num_players), 0, 0, 1, 1},
  {&__pyx_n_s_num_strategies_player, __pyx_k_num_strategies_player, sizeof(__pyx_k_num_strategies_player), 0, 0, 1, 1},
  {&__pyx_n_s_number, __pyx_k_number, sizeof(__pyx_k_number), 0, 0, 1, 1},
  {&__pyx_n_s_numerator, __pyx_k_numerator, sizeof(__pyx_k_numerator), 0, 0, 1, 1},
  {&__pyx_kp_s_numeric_argument_required_for_ac, __pyx_k_numeric_argument_required_for_ac, sizeof(__pyx_k_numeric_argument_required_for_ac), 0, 0, 1, 0},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_outcomes, __pyx_k_outcomes, sizeof(__pyx_k_outcomes), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_p_game, __pyx_k_p_game, sizeof(__pyx_k_p_game), 0, 0, 1, 1},
  {&__pyx_n_s_p_lambda, __pyx_k_p_lambda, sizeof(__pyx_k_p_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_p_maxDepth, __pyx_k_p_maxDepth, sizeof(__pyx_k_p_maxDepth), 0, 0, 1, 1},
  {&__pyx_n_s_p_maxLambda, __pyx_k_p_maxLambda, sizeof(__pyx_k_p_maxLambda), 0, 0, 1, 1},
  {&__pyx_n_s_p_profile, __pyx_k_p_profile, sizeof(__pyx_k_p_profile), 0, 0, 1, 1},
  {&__pyx_n_s_p_stopAfter, __pyx_k_p_stopAfter, sizeof(__pyx_k_p_stopAfter), 0, 0, 1, 1},
  {&__pyx_n_s_parse_game, __pyx_k_parse_game, sizeof(__pyx_k_parse_game), 0, 0, 1, 1},
  {&__pyx_n_s_payoff, __pyx_k_payoff, sizeof(__pyx_k_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_payoff_2, __pyx_k_payoff_2, sizeof(__pyx_k_payoff_2), 0, 0, 1, 1},
  {&__pyx_kp_s_payoff_argument_should_be_a_nume, __pyx_k_payoff_argument_should_be_a_nume, sizeof(__pyx_k_payoff_argument_should_be_a_nume), 0, 0, 1, 0},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pl, __pyx_k_pl, sizeof(__pyx_k_pl), 0, 0, 1, 1},
  {&__pyx_n_s_player, __pyx_k_player, sizeof(__pyx_k_player), 0, 0, 1, 1},
  {&__pyx_kp_s_player_at_an_infoset_must_belong, __pyx_k_player_at_an_infoset_must_belong, sizeof(__pyx_k_player_at_an_infoset_must_belong), 0, 0, 1, 0},
  {&__pyx_kp_s_player_index_must_be_int_str_or, __pyx_k_player_index_must_be_int_str_or, sizeof(__pyx_k_player_index_must_be_int_str_or), 0, 0, 1, 0},
  {&__pyx_kp_s_player_index_should_be_a_Player, __pyx_k_player_index_should_be_a_Player, sizeof(__pyx_k_player_index_should_be_a_Player), 0, 0, 1, 0},
  {&__pyx_n_s_players, __pyx_k_players, sizeof(__pyx_k_players), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_kp_s_probability_should_be_int_or_Fra, __pyx_k_probability_should_be_int_or_Fra, sizeof(__pyx_k_probability_should_be_int_or_Fra), 0, 0, 1, 0},
  {&__pyx_n_s_product, __pyx_k_product, sizeof(__pyx_k_product), 0, 0, 1, 1},
  {&__pyx_n_s_profile, __pyx_k_profile, sizeof(__pyx_k_profile), 0, 0, 1, 1},
  {&__pyx_kp_s_profile_action_probability_index, __pyx_k_profile_action_probability_index, sizeof(__pyx_k_profile_action_probability_index), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_belief_index_must_be_Nod, __pyx_k_profile_belief_index_must_be_Nod, sizeof(__pyx_k_profile_belief_index_must_be_Nod), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_indexes_must_be_int_str, __pyx_k_profile_indexes_must_be_int_str, sizeof(__pyx_k_profile_indexes_must_be_int_str), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_indexes_must_be_int_str_2, __pyx_k_profile_indexes_must_be_int_str_2, sizeof(__pyx_k_profile_indexes_must_be_int_str_2), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_infoset_index_must_be_st, __pyx_k_profile_infoset_index_must_be_st, sizeof(__pyx_k_profile_infoset_index_must_be_st), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_payoffs_index_must_be_in, __pyx_k_profile_payoffs_index_must_be_in, sizeof(__pyx_k_profile_payoffs_index_must_be_in), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_probability_index_must_b, __pyx_k_profile_probability_index_must_b, sizeof(__pyx_k_profile_probability_index_must_b), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_regret_index_must_be_str, __pyx_k_profile_regret_index_must_be_str, sizeof(__pyx_k_profile_regret_index_must_be_str), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_strategy_index_must_be_s, __pyx_k_profile_strategy_index_must_be_s, sizeof(__pyx_k_profile_strategy_index_must_be_s), 0, 0, 1, 0},
  {&__pyx_n_s_pygambit, __pyx_k_pygambit, sizeof(__pyx_k_pygambit), 0, 0, 1, 1},
  {&__pyx_n_s_pygambit_gte, __pyx_k_pygambit_gte, sizeof(__pyx_k_pygambit_gte), 0, 0, 1, 1},
  {&__pyx_kp_s_pygambit_lib_behav_pxi, __pyx_k_pygambit_lib_behav_pxi, sizeof(__pyx_k_pygambit_lib_behav_pxi), 0, 0, 1, 0},
  {&__pyx_n_s_pygambit_lib_error, __pyx_k_pygambit_lib_error, sizeof(__pyx_k_pygambit_lib_error), 0, 0, 1, 1},
  {&__pyx_n_s_pygambit_lib_libgambit, __pyx_k_pygambit_lib_libgambit, sizeof(__pyx_k_pygambit_lib_libgambit), 0, 0, 1, 1},
  {&__pyx_kp_s_pygambit_lib_libgambit_pyx, __pyx_k_pygambit_lib_libgambit_pyx, sizeof(__pyx_k_pygambit_lib_libgambit_pyx), 0, 0, 1, 0},
  {&__pyx_kp_s_pygambit_lib_mixed_pxi, __pyx_k_pygambit_lib_mixed_pxi, sizeof(__pyx_k_pygambit_lib_mixed_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_pygambit_lib_nash_pxi, __pyx_k_pygambit_lib_nash_pxi, sizeof(__pyx_k_pygambit_lib_nash_pxi), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_BaseGame, __pyx_k_pyx_unpickle_BaseGame, sizeof(__pyx_k_pyx_unpickle_BaseGame), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Collection, __pyx_k_pyx_unpickle_Collection, sizeof(__pyx_k_pyx_unpickle_Collection), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_MixedBehaviorProf, __pyx_k_pyx_unpickle_MixedBehaviorProf, sizeof(__pyx_k_pyx_unpickle_MixedBehaviorProf), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_MixedStrategyProf, __pyx_k_pyx_unpickle_MixedStrategyProf, sizeof(__pyx_k_pyx_unpickle_MixedStrategyProf), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PlayerSupportStra, __pyx_k_pyx_unpickle_PlayerSupportStra, sizeof(__pyx_k_pyx_unpickle_PlayerSupportStra), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_RestrictionOutcom, __pyx_k_pyx_unpickle_RestrictionOutcom, sizeof(__pyx_k_pyx_unpickle_RestrictionOutcom), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_RestrictionStrate, __pyx_k_pyx_unpickle_RestrictionStrate, sizeof(__pyx_k_pyx_unpickle_RestrictionStrate), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rational, __pyx_k_rational, sizeof(__pyx_k_rational), 0, 0, 1, 1},
  {&__pyx_kp_s_rational_precision_profile_requi, __pyx_k_rational_precision_profile_requi, sizeof(__pyx_k_rational_precision_profile_requi), 0, 0, 1, 0},
  {&__pyx_n_s_read_game, __pyx_k_read_game, sizeof(__pyx_k_read_game), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_2, __pyx_k_reduce_2, sizeof(__pyx_k_reduce_2), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_regret, __pyx_k_regret, sizeof(__pyx_k_regret), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_remove_locals_lambda, __pyx_k_remove_locals_lambda, sizeof(__pyx_k_remove_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_repr_latex, __pyx_k_repr_latex, sizeof(__pyx_k_repr_latex), 0, 0, 1, 1},
  {&__pyx_n_s_resolve_index, __pyx_k_resolve_index, sizeof(__pyx_k_resolve_index), 0, 0, 1, 1},
  {&__pyx_n_s_resolve_index_locals_lambda, __pyx_k_resolve_index_locals_lambda, sizeof(__pyx_k_resolve_index_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_restrict, __pyx_k_restrict, sizeof(__pyx_k_restrict), 0, 0, 1, 1},
  {&__pyx_n_s_restriction, __pyx_k_restriction, sizeof(__pyx_k_restriction), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_kp_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 0},
  {&__pyx_kp_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 0},
  {&__pyx_n_s_s1, __pyx_k_s1, sizeof(__pyx_k_s1), 0, 0, 1, 1},
  {&__pyx_n_s_s2, __pyx_k_s2, sizeof(__pyx_k_s2), 0, 0, 1, 1},
  {&__pyx_kp_s_s_2, __pyx_k_s_2, sizeof(__pyx_k_s_2), 0, 0, 1, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self_action_cannot_be_converted, __pyx_k_self_action_cannot_be_converted, sizeof(__pyx_k_self_action_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_c_game_self_psp_cannot_be_c, __pyx_k_self_c_game_self_psp_cannot_be_c, sizeof(__pyx_k_self_c_game_self_psp_cannot_be_c), 0, 0, 1, 0},
  {&__pyx_kp_s_self_game_cannot_be_converted_to, __pyx_k_self_game_cannot_be_converted_to, sizeof(__pyx_k_self_game_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self_infoset_cannot_be_converted, __pyx_k_self_infoset_cannot_be_converted, sizeof(__pyx_k_self_infoset_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_node_cannot_be_converted_to, __pyx_k_self_node_cannot_be_converted_to, sizeof(__pyx_k_self_node_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self_outcome_cannot_be_converted, __pyx_k_self_outcome_cannot_be_converted, sizeof(__pyx_k_self_outcome_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_parent_cannot_be_converted, __pyx_k_self_parent_cannot_be_converted, sizeof(__pyx_k_self_parent_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_player_cannot_be_converted, __pyx_k_self_player_cannot_be_converted, sizeof(__pyx_k_self_player_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_profile_cannot_be_converted, __pyx_k_self_profile_cannot_be_converted, sizeof(__pyx_k_self_profile_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_strategy_cannot_be_converte, __pyx_k_self_strategy_cannot_be_converte, sizeof(__pyx_k_self_strategy_cannot_be_converte), 0, 0, 1, 0},
  {&__pyx_kp_s_self_support_cannot_be_converted, __pyx_k_self_support_cannot_be_converted, sizeof(__pyx_k_self_support_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_s_self_thisptr_cannot_be_converted, __pyx_k_self_thisptr_cannot_be_converted, sizeof(__pyx_k_self_thisptr_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setaction, __pyx_k_setaction, sizeof(__pyx_k_setaction), 0, 0, 1, 1},
  {&__pyx_n_s_setinfoset, __pyx_k_setinfoset, sizeof(__pyx_k_setinfoset), 0, 0, 1, 1},
  {&__pyx_n_s_setitem, __pyx_k_setitem, sizeof(__pyx_k_setitem), 0, 0, 1, 1},
  {&__pyx_n_s_setplayer, __pyx_k_setplayer, sizeof(__pyx_k_setplayer), 0, 0, 1, 1},
  {&__pyx_n_s_setprob, __pyx_k_setprob, sizeof(__pyx_k_setprob), 0, 0, 1, 1},
  {&__pyx_n_s_setprob_player, __pyx_k_setprob_player, sizeof(__pyx_k_setprob_player), 0, 0, 1, 1},
  {&__pyx_n_s_setprob_player_locals_Filler, __pyx_k_setprob_player_locals_Filler, sizeof(__pyx_k_setprob_player_locals_Filler), 0, 0, 1, 1},
  {&__pyx_n_s_setprob_strategy, __pyx_k_setprob_strategy, sizeof(__pyx_k_setprob_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_solns, __pyx_k_solns, sizeof(__pyx_k_solns), 0, 0, 1, 1},
  {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
  {&__pyx_n_s_strategies, __pyx_k_strategies, sizeof(__pyx_k_strategies), 0, 0, 1, 1},
  {&__pyx_n_s_strategy, __pyx_k_strategy, sizeof(__pyx_k_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_strategy1, __pyx_k_strategy1, sizeof(__pyx_k_strategy1), 0, 0, 1, 1},
  {&__pyx_n_s_strategy2, __pyx_k_strategy2, sizeof(__pyx_k_strategy2), 0, 0, 1, 1},
  {&__pyx_n_s_strategy_value, __pyx_k_strategy_value, sizeof(__pyx_k_strategy_value), 0, 0, 1, 1},
  {&__pyx_n_s_strategy_value_2, __pyx_k_strategy_value_2, sizeof(__pyx_k_strategy_value_2), 0, 0, 1, 1},
  {&__pyx_n_s_strategy_value_deriv, __pyx_k_strategy_value_deriv, sizeof(__pyx_k_strategy_value_deriv), 0, 0, 1, 1},
  {&__pyx_n_s_strategy_values, __pyx_k_strategy_values, sizeof(__pyx_k_strategy_values), 0, 0, 1, 1},
  {&__pyx_n_s_strict, __pyx_k_strict, sizeof(__pyx_k_strict), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_title, __pyx_k_title, sizeof(__pyx_k_title), 0, 0, 1, 1},
  {&__pyx_kp_s_type_Infoset_required_for_settin, __pyx_k_type_Infoset_required_for_settin, sizeof(__pyx_k_type_Infoset_required_for_settin), 0, 0, 1, 0},
  {&__pyx_kp_s_type_Outcome_required_for_settin, __pyx_k_type_Outcome_required_for_settin, sizeof(__pyx_k_type_Outcome_required_for_settin), 0, 0, 1, 0},
  {&__pyx_n_s_union, __pyx_k_union, sizeof(__pyx_k_union), 0, 0, 1, 1},
  {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
  {&__pyx_n_s_unrestrict, __pyx_k_unrestrict, sizeof(__pyx_k_unrestrict), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_kp_s_value_list_length_must_be_s_not, __pyx_k_value_list_length_must_be_s_not, sizeof(__pyx_k_value_list_length_must_be_s_not), 0, 0, 1, 0},
  {&__pyx_kp_s_value_vector_must_support_iterat, __pyx_k_value_vector_must_support_iterat, sizeof(__pyx_k_value_vector_must_support_iterat), 0, 0, 1, 0},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_write_game, __pyx_k_write_game, sizeof(__pyx_k_write_game), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {&__pyx_n_s_zip_longest, __pyx_k_zip_longest, sizeof(__pyx_k_zip_longest), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 322, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(0, 369, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 24, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(2, 73, __pyx_L1_error)
  __pyx_builtin_filter = __Pyx_GetBuiltinName(__pyx_n_s_filter); if (!__pyx_builtin_filter) __PYX_ERR(2, 97, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(2, 308, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(2, 322, __pyx_L1_error)
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(1, 83, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(3, 84, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(4, 44, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(4, 44, __pyx_L1_error)
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pygambit/lib/action.pxi":64
 *             return self.action.deref().Precedes(((<Node>node).node))
 *         else:
 *             raise TypeError("Precedes takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Precedes_takes_a_Node_object_as); if (unlikely(!__pyx_tuple_)) __PYX_ERR(6, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pygambit/lib/action.pxi":100
 *                     self.action.deref().GetNumber(), s)
 *             else:
 *                 raise TypeError("numeric argument required for action probability")             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_numeric_argument_required_for_ac); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(6, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_action_cannot_be_converted); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.action cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_action_cannot_be_converted); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_infoset_cannot_be_converted); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_infoset_cannot_be_converted); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pygambit/lib/infoset.pxi":47
 *             self.infoset.deref().InsertAction((<Action>action).action)
 *         else:
 *             raise TypeError("insert_action takes an Action object as its input")             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_insert_action_takes_an_Action_ob); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(7, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_infoset_cannot_be_converted); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_infoset_cannot_be_converted); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pygambit/lib/infoset.pxi":89
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 *         else:
 *             raise TypeError("argument of precedes should be a Node instance")             # <<<<<<<<<<<<<<
 * 
 *     def reveal(self, player):
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_argument_of_precedes_should_be_a); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(7, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pygambit/lib/infoset.pxi":95
 *             self.infoset.deref().Reveal((<Player>player).player)
 *         else:
 *             raise TypeError("argument of reveal should be a Player instance")             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_argument_of_reveal_should_be_a_P); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(7, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_self_infoset_cannot_be_converted); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.infoset cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self_infoset_cannot_be_converted); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self_strategy_cannot_be_converte); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.strategy cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self_strategy_cannot_be_converte); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self_player_cannot_be_converted); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self_player_cannot_be_converted); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "pygambit/lib/player.pxi":44
 *         g.game = self.player.deref().GetGame()
 *         if g.is_tree:
 *             raise TypeError("Adding strategies is only applicable to games in strategic form")             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Adding_strategies_is_only_applic); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(9, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_self_player_cannot_be_converted); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_self_player_cannot_be_converted); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_self_player_cannot_be_converted); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.player cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_self_player_cannot_be_converted); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "pygambit/lib/outcome.pxi":98
 *             self.outcome.deref().SetPayoff(pl+1, s)
 *         else:
 *             raise TypeError("payoff argument should be a numeric type instance")             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_payoff_argument_should_be_a_nume); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(10, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_self_outcome_cannot_be_converted); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.outcome cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_self_outcome_cannot_be_converted); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "pygambit/lib/outcome.pxi":149
 *         elif isinstance(player, int):
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 *                 raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 *             return rat_to_py(self.psp.deref().GetPayoff(player+1))
 *         raise TypeError("player index should be a Player, int or str instance; {} passed"
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_Index_out_of_range); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(10, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "pygambit/lib/outcome.pxi":155
 * 
 *     def __setitem__(self, pl, value):
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 * 
 *     def delete(self):
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Cannot_modify_outcomes_in_a_deri); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(10, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_self_c_game_self_psp_cannot_be_c); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.c_game,self.psp cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_self_c_game_self_psp_cannot_be_c); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_self_parent_cannot_be_converted); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.parent cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_self_parent_cannot_be_converted); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "pygambit/lib/node.pxi":136
 *             self.node.deref().CopyTree((<Node>node).node)
 *         else:
 *             raise TypeError("copy_tree takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     def move_tree(self, node):
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_copy_tree_takes_a_Node_object_as); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(11, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "pygambit/lib/node.pxi":145
 *             self.node.deref().MoveTree((<Node>node).node)
 *         else:
 *             raise TypeError("move_tree takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_move_tree_takes_a_Node_object_as); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(11, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_self_node_cannot_be_converted_to); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_self_node_cannot_be_converted_to); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "pygambit/lib/stratspt.pxi":43
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 *        else:
 *             raise ValueError("invalid set of strategies")             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_invalid_set_of_strategies); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(2, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "pygambit/lib/stratspt.pxi":104
 *                 raise UndefinedOperationError("cannot remove last strategy"\
 *                                               " of a player")
 *         raise TypeError("delete requires a Strategy object")             # <<<<<<<<<<<<<<
 * 
 *     def difference(self, StrategySupportProfile other):
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_delete_requires_a_Strategy_objec); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(2, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_self_support_cannot_be_converted); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":4
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_self_support_cannot_be_converted); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "pygambit/lib/stratspt.pxi":342
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")             # <<<<<<<<<<<<<<
 *         return self._get_contingency(*tuple(cont))
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_Must_use_a_tuple_of_ints_strateg); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(2, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_self_support_cannot_be_converted); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":4
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.support cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_self_support_cannot_be_converted); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "pygambit/lib/mixed.pxi":37
 * 
 *     def _repr_latex_(self):
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 */
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_kp_s__46, __pyx_kp_s__19); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "pygambit/lib/mixed.pxi":83
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "pygambit/lib/mixed.pxi":84
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */
  __pyx_tuple__49 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_profile, __pyx_n_s_player); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_mixed_pxi, __pyx_n_s_init, 84, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(1, 84, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":87
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_other); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_mixed_pxi, __pyx_n_s_eq, 87, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(1, 87, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":89
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_mixed_pxi, __pyx_n_s_len, 89, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(1, 89, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":91
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_mixed_pxi, __pyx_n_s_repr, 91, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(1, 91, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":93
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */
  __pyx_tuple__57 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_mixed_pxi, __pyx_n_s_repr_latex, 93, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(1, 93, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":98
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_index); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_mixed_pxi, __pyx_n_s_getitem, 98, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(1, 98, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":100
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 */
  __pyx_tuple__61 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_index, __pyx_n_s_value); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_mixed_pxi, __pyx_n_s_setitem, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(1, 100, __pyx_L1_error)

  /* "pygambit/lib/mixed.pxi":123
 * 
 *     def _setprob_player(self, Player player, value):
 *         class Filler(object): pass             # <<<<<<<<<<<<<<
 *         try:
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "pygambit/lib/mixed.pxi":127
 *             for (s, v) in zip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")             # <<<<<<<<<<<<<<
 *                 self[s] = v
 *         except TypeError as e:
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_must_specify_exactly_one_value_p); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "pygambit/lib/mixed.pxi":131
 *         except TypeError as e:
 *             if "must support iteration" in str(e):
 *                 raise TypeError("value vector must support iteration")             # <<<<<<<<<<<<<<
 *             else:
 *                 raise e
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_value_vector_must_support_iterat); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_self_profile_cannot_be_converted); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "(tree fragment)":4
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_self_profile_cannot_be_converted); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_self_profile_cannot_be_converted); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "(tree fragment)":4
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_self_profile_cannot_be_converted); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "pygambit/lib/behav.pxi":104
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, infoset):
 *                     self.profile = profile
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(3, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "pygambit/lib/behav.pxi":105
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.infoset = infoset
 */
  __pyx_tuple__71 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_profile, __pyx_n_s_infoset); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_init, 105, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(3, 105, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":108
 *                     self.profile = profile
 *                     self.infoset = infoset
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
  __pyx_tuple__73 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_other); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(3, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_eq, 108, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(3, 108, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":110
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(3, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_len, 110, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(3, 110, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":112
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(3, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_repr, 112, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(3, 112, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":114
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */
  __pyx_tuple__79 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(3, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_repr_latex, 114, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(3, 114, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":119
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 */
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_index); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(3, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_getitem, 119, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(3, 119, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":121
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 */
  __pyx_tuple__83 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_index, __pyx_n_s_value); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(3, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_setitem, 121, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(3, 121, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":125
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(3, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "pygambit/lib/behav.pxi":126
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */
  __pyx_tuple__86 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_profile, __pyx_n_s_player); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(3, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_init, 126, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(3, 126, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":129
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
  __pyx_tuple__88 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_other); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(3, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_eq, 129, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(3, 129, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":131
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(3, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_len, 131, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(3, 131, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":133
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(3, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_repr, 133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(3, 133, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":135
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */
  __pyx_tuple__94 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(3, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_repr_latex, 135, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(3, 135, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":140
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 */
  __pyx_tuple__96 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_index); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(3, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_getitem, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(3, 140, __pyx_L1_error)

  /* "pygambit/lib/behav.pxi":142
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 */
  __pyx_tuple__98 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_index, __pyx_n_s_value); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(3, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_behav_pxi, __pyx_n_s_setitem, 142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(3, 142, __pyx_L1_error)

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_kp_s_self_profile_cannot_be_converted); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "(tree fragment)":4
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_kp_s_self_profile_cannot_be_converted); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_kp_s_self_profile_cannot_be_converted); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);

  /* "(tree fragment)":4
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.profile cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__103 = PyTuple_Pack(1, __pyx_kp_s_self_profile_cannot_be_converted); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__110 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__111 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__113 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);

  /* "pygambit/lib/game.pxi":148
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 *             raise ValueError("All specified arrays must have the same shape")             # <<<<<<<<<<<<<<
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(range(arrays[0].shape[i])
 */
  __pyx_tuple__114 = PyTuple_Pack(1, __pyx_kp_s_All_specified_arrays_must_have_t); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(12, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__115 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "(tree fragment)":4
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.game cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__116 = PyTuple_Pack(1, __pyx_kp_s_self_game_cannot_be_converted_to); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__117 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__119 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__124 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__125 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__126 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__127 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__131 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__133 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__135 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__137 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__138 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__139 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__140 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__141 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__143 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__144 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__145 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__146 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__147 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__149 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__150 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);

  /* "pygambit/lib/libgambit.pyx":35
 * 
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 */
  __pyx_tuple__151 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__151, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_libgambit_pyx, __pyx_n_s_repr_latex, 35, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(0, 35, __pyx_L1_error)

  /* "pygambit/lib/nash.pxi":445
 *             return profile
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):             # <<<<<<<<<<<<<<
 *     """Estimate QRE corresponding to mixed strategy profile using
 *     maximum likelihood along the principal branch.
 */
  __pyx_tuple__153 = PyTuple_Pack(2, __pyx_n_s_p_profile, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(4, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__153, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_nash_pxi, __pyx_n_s_logit_estimate, 445, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(4, 445, __pyx_L1_error)

  /* "pygambit/lib/nash.pxi":454
 *     return ret
 * 
 * def logit_atlambda(Game p_game, double p_lambda):             # <<<<<<<<<<<<<<
 *     """Compute the first QRE along the principal branch with the given
 *     lambda parameter.
 */
  __pyx_tuple__155 = PyTuple_Pack(3, __pyx_n_s_p_game, __pyx_n_s_p_lambda, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(4, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_nash_pxi, __pyx_n_s_logit_atlambda, 454, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(4, 454, __pyx_L1_error)

  /* "pygambit/lib/nash.pxi":463
 *     return ret
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):             # <<<<<<<<<<<<<<
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 */
  __pyx_tuple__157 = PyTuple_Pack(6, __pyx_n_s_p_game, __pyx_n_s_p_maxLambda, __pyx_n_s_solns, __pyx_n_s_p, __pyx_n_s_ret, __pyx_n_s_i); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(4, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pygambit_lib_nash_pxi, __pyx_n_s_logit_principal_branch, 463, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(4, 463, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Collection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__159 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__159, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Collection, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_tuple__161 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PlayerSupportStra, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_tuple__163 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BaseGame, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_tuple__165 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_RestrictionOutcom, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_tuple__167 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__167, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_RestrictionStrate, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_tuple__169 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_MixedStrategyProf, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_tuple__171 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_MixedBehaviorProf, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyList_Type_count.type = (PyObject*)&PyList_Type;
  __pyx_umethod_PyList_Type_remove.type = (PyObject*)&PyList_Type;
  __pyx_umethod_PyString_Type_encode.type = (PyObject*)&PyString_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_64675758 = PyInt_FromLong(64675758L); if (unlikely(!__pyx_int_64675758)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_79490816 = PyInt_FromLong(79490816L); if (unlikely(!__pyx_int_79490816)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Collection) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Collection.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Collection.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Collection.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Collection.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Collection, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Collection) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Collection) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Collection = &__pyx_type_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Action) < 0) __PYX_ERR(6, 25, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Action.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Action.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Action.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Action.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Action, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Action) < 0) __PYX_ERR(6, 25, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Action) < 0) __PYX_ERR(6, 25, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Action = &__pyx_type_8pygambit_3lib_9libgambit_Action;
  __pyx_type_8pygambit_3lib_9libgambit_Members.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Members) < 0) __PYX_ERR(7, 24, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Members.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Members.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Members.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Members.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Members, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Members) < 0) __PYX_ERR(7, 24, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Members) < 0) __PYX_ERR(7, 24, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Members = &__pyx_type_8pygambit_3lib_9libgambit_Members;
  __pyx_type_8pygambit_3lib_9libgambit_Actions.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Actions) < 0) __PYX_ERR(7, 35, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Actions.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Actions.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Actions.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Actions.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Actions, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Actions) < 0) __PYX_ERR(7, 35, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Actions) < 0) __PYX_ERR(7, 35, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Actions = &__pyx_type_8pygambit_3lib_9libgambit_Actions;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Infoset) < 0) __PYX_ERR(7, 57, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Infoset.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Infoset.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Infoset.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Infoset.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Infoset, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Infoset) < 0) __PYX_ERR(7, 57, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Infoset) < 0) __PYX_ERR(7, 57, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Infoset = &__pyx_type_8pygambit_3lib_9libgambit_Infoset;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Strategy) < 0) __PYX_ERR(8, 24, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Strategy.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Strategy.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Strategy.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Strategy.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Strategy, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Strategy) < 0) __PYX_ERR(8, 24, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Strategy) < 0) __PYX_ERR(8, 24, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Strategy = &__pyx_type_8pygambit_3lib_9libgambit_Strategy;
  __pyx_type_8pygambit_3lib_9libgambit_Infosets.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Infosets) < 0) __PYX_ERR(9, 24, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Infosets.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Infosets.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Infosets.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Infosets.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Infosets, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Infosets) < 0) __PYX_ERR(9, 24, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Infosets) < 0) __PYX_ERR(9, 24, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Infosets = &__pyx_type_8pygambit_3lib_9libgambit_Infosets;
  __pyx_type_8pygambit_3lib_9libgambit_Strategies.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Strategies) < 0) __PYX_ERR(9, 35, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Strategies.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Strategies.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Strategies.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Strategies.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Strategies, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Strategies) < 0) __PYX_ERR(9, 35, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Strategies) < 0) __PYX_ERR(9, 35, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Strategies = &__pyx_type_8pygambit_3lib_9libgambit_Strategies;
  __pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies) < 0) __PYX_ERR(9, 59, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PlayerSupportStrategies, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies) < 0) __PYX_ERR(9, 59, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies) < 0) __PYX_ERR(9, 59, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_PlayerSupportStrategies = &__pyx_type_8pygambit_3lib_9libgambit_PlayerSupportStrategies;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Player) < 0) __PYX_ERR(9, 83, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Player.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Player.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Player.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Player.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Player, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Player) < 0) __PYX_ERR(9, 83, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Player) < 0) __PYX_ERR(9, 83, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Player = &__pyx_type_8pygambit_3lib_9libgambit_Player;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Outcome) < 0) __PYX_ERR(10, 22, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Outcome.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Outcome.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Outcome.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Outcome.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Outcome, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Outcome) < 0) __PYX_ERR(10, 22, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Outcome) < 0) __PYX_ERR(10, 22, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Outcome = &__pyx_type_8pygambit_3lib_9libgambit_Outcome;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_TreeGameOutcome) < 0) __PYX_ERR(10, 106, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_TreeGameOutcome.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_TreeGameOutcome.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_TreeGameOutcome.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_TreeGameOutcome.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TreeGameOutcome, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_TreeGameOutcome) < 0) __PYX_ERR(10, 106, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_TreeGameOutcome) < 0) __PYX_ERR(10, 106, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_TreeGameOutcome = &__pyx_type_8pygambit_3lib_9libgambit_TreeGameOutcome;
  __pyx_type_8pygambit_3lib_9libgambit_Children.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Children) < 0) __PYX_ERR(11, 24, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Children.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Children.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Children.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Children.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Children, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Children) < 0) __PYX_ERR(11, 24, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Children) < 0) __PYX_ERR(11, 24, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Children = &__pyx_type_8pygambit_3lib_9libgambit_Children;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Node) < 0) __PYX_ERR(11, 35, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Node.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Node.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Node.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Node.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Node, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Node) < 0) __PYX_ERR(11, 35, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Node) < 0) __PYX_ERR(11, 35, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Node = &__pyx_type_8pygambit_3lib_9libgambit_Node;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_BaseGame) < 0) __PYX_ERR(13, 22, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_BaseGame.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_BaseGame.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_BaseGame.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_BaseGame.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BaseGame, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_BaseGame) < 0) __PYX_ERR(13, 22, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_BaseGame) < 0) __PYX_ERR(13, 22, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_BaseGame = &__pyx_type_8pygambit_3lib_9libgambit_BaseGame;
  __pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile) < 0) __PYX_ERR(2, 27, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StrategySupportProfile, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile) < 0) __PYX_ERR(2, 27, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile) < 0) __PYX_ERR(2, 27, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_StrategySupportProfile = &__pyx_type_8pygambit_3lib_9libgambit_StrategySupportProfile;
  __pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes) < 0) __PYX_ERR(2, 152, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RestrictionOutcomes, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes) < 0) __PYX_ERR(2, 152, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes) < 0) __PYX_ERR(2, 152, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_RestrictionOutcomes = &__pyx_type_8pygambit_3lib_9libgambit_RestrictionOutcomes;
  __pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies) < 0) __PYX_ERR(2, 170, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RestrictionStrategies, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies) < 0) __PYX_ERR(2, 170, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies) < 0) __PYX_ERR(2, 170, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_RestrictionStrategies = &__pyx_type_8pygambit_3lib_9libgambit_RestrictionStrategies;
  __pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_BaseGame;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction) < 0) __PYX_ERR(2, 192, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StrategicRestriction, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction) < 0) __PYX_ERR(2, 192, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction) < 0) __PYX_ERR(2, 192, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_StrategicRestriction = &__pyx_type_8pygambit_3lib_9libgambit_StrategicRestriction;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfile) < 0) __PYX_ERR(1, 32, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfile.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfile.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfile.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfile.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MixedStrategyProfile, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfile) < 0) __PYX_ERR(1, 32, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfile) < 0) __PYX_ERR(1, 32, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfile = &__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfile;
  __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfile;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble) < 0) __PYX_ERR(1, 181, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MixedStrategyProfileDouble, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble) < 0) __PYX_ERR(1, 181, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble) < 0) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble = &__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileDouble;
  __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfile;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational) < 0) __PYX_ERR(1, 246, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MixedStrategyProfileRational, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational) < 0) __PYX_ERR(1, 246, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational) < 0) __PYX_ERR(1, 246, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_MixedStrategyProfileRational = &__pyx_type_8pygambit_3lib_9libgambit_MixedStrategyProfileRational;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfile) < 0) __PYX_ERR(3, 27, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfile.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfile.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfile.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfile.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MixedBehaviorProfile, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfile) < 0) __PYX_ERR(3, 27, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfile) < 0) __PYX_ERR(3, 27, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfile = &__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfile;
  __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfile;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble) < 0) __PYX_ERR(3, 238, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MixedBehaviorProfileDouble, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble) < 0) __PYX_ERR(3, 238, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble) < 0) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble = &__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileDouble;
  __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfile;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational) < 0) __PYX_ERR(3, 299, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MixedBehaviorProfileRational, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational) < 0) __PYX_ERR(3, 299, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational) < 0) __PYX_ERR(3, 299, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational = &__pyx_type_8pygambit_3lib_9libgambit_MixedBehaviorProfileRational;
  __pyx_type_8pygambit_3lib_9libgambit_Outcomes.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Outcomes) < 0) __PYX_ERR(12, 28, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Outcomes.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Outcomes.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Outcomes.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Outcomes.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Outcomes, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Outcomes) < 0) __PYX_ERR(12, 28, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Outcomes) < 0) __PYX_ERR(12, 28, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Outcomes = &__pyx_type_8pygambit_3lib_9libgambit_Outcomes;
  __pyx_type_8pygambit_3lib_9libgambit_Players.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Players) < 0) __PYX_ERR(12, 46, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Players.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Players.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Players.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Players.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Players, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Players) < 0) __PYX_ERR(12, 46, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Players) < 0) __PYX_ERR(12, 46, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Players = &__pyx_type_8pygambit_3lib_9libgambit_Players;
  __pyx_type_8pygambit_3lib_9libgambit_GameActions.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_GameActions) < 0) __PYX_ERR(12, 77, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_GameActions.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_GameActions.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_GameActions.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_GameActions.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GameActions, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_GameActions) < 0) __PYX_ERR(12, 77, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_GameActions) < 0) __PYX_ERR(12, 77, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_GameActions = &__pyx_type_8pygambit_3lib_9libgambit_GameActions;
  __pyx_type_8pygambit_3lib_9libgambit_GameInfosets.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_GameInfosets) < 0) __PYX_ERR(12, 90, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_GameInfosets.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_GameInfosets.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_GameInfosets.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_GameInfosets.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GameInfosets, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_GameInfosets) < 0) __PYX_ERR(12, 90, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_GameInfosets) < 0) __PYX_ERR(12, 90, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_GameInfosets = &__pyx_type_8pygambit_3lib_9libgambit_GameInfosets;
  __pyx_type_8pygambit_3lib_9libgambit_GameStrategies.tp_base = __pyx_ptype_8pygambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_GameStrategies) < 0) __PYX_ERR(12, 109, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_GameStrategies.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_GameStrategies.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_GameStrategies.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_GameStrategies.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GameStrategies, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_GameStrategies) < 0) __PYX_ERR(12, 109, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_GameStrategies) < 0) __PYX_ERR(12, 109, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_GameStrategies = &__pyx_type_8pygambit_3lib_9libgambit_GameStrategies;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_Game) < 0) __PYX_ERR(12, 122, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_Game.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_Game.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_Game.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_Game.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Game, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_Game) < 0) __PYX_ERR(12, 122, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_Game) < 0) __PYX_ERR(12, 122, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_Game = &__pyx_type_8pygambit_3lib_9libgambit_Game;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_EnumPureStrategySolver) < 0) __PYX_ERR(4, 32, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_EnumPureStrategySolver.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_EnumPureStrategySolver.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_EnumPureStrategySolver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_EnumPureStrategySolver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EnumPureStrategySolver, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_EnumPureStrategySolver) < 0) __PYX_ERR(4, 32, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_EnumPureStrategySolver) < 0) __PYX_ERR(4, 32, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_EnumPureStrategySolver = &__pyx_type_8pygambit_3lib_9libgambit_EnumPureStrategySolver;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_EnumPureAgentSolver) < 0) __PYX_ERR(4, 50, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_EnumPureAgentSolver.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_EnumPureAgentSolver.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_EnumPureAgentSolver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_EnumPureAgentSolver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EnumPureAgentSolver, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_EnumPureAgentSolver) < 0) __PYX_ERR(4, 50, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_EnumPureAgentSolver) < 0) __PYX_ERR(4, 50, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_EnumPureAgentSolver = &__pyx_type_8pygambit_3lib_9libgambit_EnumPureAgentSolver;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble) < 0) __PYX_ERR(4, 81, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EnumMixedStrategySolverDouble, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble) < 0) __PYX_ERR(4, 81, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble) < 0) __PYX_ERR(4, 81, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble = &__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverDouble;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational) < 0) __PYX_ERR(4, 99, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EnumMixedStrategySolverRational, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational) < 0) __PYX_ERR(4, 99, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational) < 0) __PYX_ERR(4, 99, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational = &__pyx_type_8pygambit_3lib_9libgambit_EnumMixedStrategySolverRational;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver) < 0) __PYX_ERR(4, 117, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EnumMixedLrsStrategySolver, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver) < 0) __PYX_ERR(4, 117, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver) < 0) __PYX_ERR(4, 117, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver = &__pyx_type_8pygambit_3lib_9libgambit_EnumMixedLrsStrategySolver;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble) < 0) __PYX_ERR(4, 153, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LCPBehaviorSolverDouble, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble) < 0) __PYX_ERR(4, 153, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble) < 0) __PYX_ERR(4, 153, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble = &__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverDouble;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational) < 0) __PYX_ERR(4, 171, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LCPBehaviorSolverRational, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational) < 0) __PYX_ERR(4, 171, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational) < 0) __PYX_ERR(4, 171, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational = &__pyx_type_8pygambit_3lib_9libgambit_LCPBehaviorSolverRational;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverDouble) < 0) __PYX_ERR(4, 189, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverDouble.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverDouble.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverDouble.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverDouble.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LCPStrategySolverDouble, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverDouble) < 0) __PYX_ERR(4, 189, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverDouble) < 0) __PYX_ERR(4, 189, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_LCPStrategySolverDouble = &__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverDouble;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverRational) < 0) __PYX_ERR(4, 207, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverRational.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverRational.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverRational.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverRational.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LCPStrategySolverRational, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverRational) < 0) __PYX_ERR(4, 207, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverRational) < 0) __PYX_ERR(4, 207, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_LCPStrategySolverRational = &__pyx_type_8pygambit_3lib_9libgambit_LCPStrategySolverRational;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble) < 0) __PYX_ERR(4, 245, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LPBehaviorSolverDouble, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble) < 0) __PYX_ERR(4, 245, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble) < 0) __PYX_ERR(4, 245, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble = &__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverDouble;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverRational) < 0) __PYX_ERR(4, 263, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverRational.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverRational.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverRational.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverRational.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LPBehaviorSolverRational, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverRational) < 0) __PYX_ERR(4, 263, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverRational) < 0) __PYX_ERR(4, 263, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_LPBehaviorSolverRational = &__pyx_type_8pygambit_3lib_9libgambit_LPBehaviorSolverRational;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverDouble) < 0) __PYX_ERR(4, 281, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverDouble.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverDouble.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverDouble.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverDouble.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LPStrategySolverDouble, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverDouble) < 0) __PYX_ERR(4, 281, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverDouble) < 0) __PYX_ERR(4, 281, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_LPStrategySolverDouble = &__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverDouble;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverRational) < 0) __PYX_ERR(4, 299, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverRational.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverRational.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverRational.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverRational.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LPStrategySolverRational, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverRational) < 0) __PYX_ERR(4, 299, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverRational) < 0) __PYX_ERR(4, 299, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_LPStrategySolverRational = &__pyx_type_8pygambit_3lib_9libgambit_LPStrategySolverRational;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_SimpdivStrategySolver) < 0) __PYX_ERR(4, 324, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_SimpdivStrategySolver.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_SimpdivStrategySolver.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_SimpdivStrategySolver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_SimpdivStrategySolver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SimpdivStrategySolver, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_SimpdivStrategySolver) < 0) __PYX_ERR(4, 324, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_SimpdivStrategySolver) < 0) __PYX_ERR(4, 324, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_SimpdivStrategySolver = &__pyx_type_8pygambit_3lib_9libgambit_SimpdivStrategySolver;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_IPAStrategySolver) < 0) __PYX_ERR(4, 347, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_IPAStrategySolver.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_IPAStrategySolver.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_IPAStrategySolver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_IPAStrategySolver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IPAStrategySolver, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_IPAStrategySolver) < 0) __PYX_ERR(4, 347, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_IPAStrategySolver) < 0) __PYX_ERR(4, 347, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_IPAStrategySolver = &__pyx_type_8pygambit_3lib_9libgambit_IPAStrategySolver;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_GNMStrategySolver) < 0) __PYX_ERR(4, 370, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_GNMStrategySolver.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_GNMStrategySolver.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_GNMStrategySolver.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_GNMStrategySolver.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GNMStrategySolver, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_GNMStrategySolver) < 0) __PYX_ERR(4, 370, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_GNMStrategySolver) < 0) __PYX_ERR(4, 370, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_GNMStrategySolver = &__pyx_type_8pygambit_3lib_9libgambit_GNMStrategySolver;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile) < 0) __PYX_ERR(4, 412, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LogitQREMixedStrategyProfile, (PyObject *)&__pyx_type_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile) < 0) __PYX_ERR(4, 412, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile) < 0) __PYX_ERR(4, 412, __pyx_L1_error)
  __pyx_ptype_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile = &__pyx_type_8pygambit_3lib_9libgambit_LogitQREMixedStrategyProfile;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct__remove) < 0) __PYX_ERR(2, 95, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct__remove.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct__remove.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct__remove.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct__remove.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct__remove = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct__remove;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference) < 0) __PYX_ERR(2, 106, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_1_difference;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection) < 0) __PYX_ERR(2, 109, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_2_intersection;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset) < 0) __PYX_ERR(2, 118, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_3_issubset;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index) < 0) __PYX_ERR(1, 53, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_) < 0) __PYX_ERR(1, 93, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(1, 95, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index) < 0) __PYX_ERR(3, 47, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_) < 0) __PYX_ERR(3, 114, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr) < 0) __PYX_ERR(3, 116, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_9_genexpr;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_) < 0) __PYX_ERR(3, 135, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr) < 0) __PYX_ERR(3, 137, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_11_genexpr;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays) < 0) __PYX_ERR(12, 145, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr) < 0) __PYX_ERR(12, 147, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_13_genexpr;
  if (PyType_Ready(&__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(12, 150, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr.tp_dictoffset && __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr = &__pyx_type_8pygambit_3lib_9libgambit___pyx_scope_struct_14_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initlibgambit(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initlibgambit(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_libgambit(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_libgambit(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_libgambit(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'libgambit' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_libgambit(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("libgambit", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pygambit__lib__libgambit) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pygambit.lib.libgambit")) {
      if (unlikely(PyDict_SetItemString(modules, "pygambit.lib.libgambit", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pygambit/lib/libgambit.pyx":25
 * 
 * 
 * import decimal             # <<<<<<<<<<<<<<
 * import fractions
 * import warnings
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_decimal, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decimal, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/libgambit.pyx":26
 * 
 * import decimal
 * import fractions             # <<<<<<<<<<<<<<
 * import warnings
 * from libcpp cimport bool
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_fractions, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fractions, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/libgambit.pyx":27
 * import decimal
 * import fractions
 * import warnings             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * from libcpp.string cimport string
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/libgambit.pyx":31
 * from libcpp.string cimport string
 * 
 * class Decimal(decimal.Decimal):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Decimal, __pyx_n_s_Decimal, (PyObject *) NULL, __pyx_n_s_pygambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Decimal, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decimal, __pyx_t_4) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/libgambit.pyx":34
 *     pass
 * 
 * class Rational(fractions.Fraction):             # <<<<<<<<<<<<<<
 *     def _repr_latex_(self):
 *         if self.denominator != 1:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Rational, __pyx_n_s_Rational, (PyObject *) NULL, __pyx_n_s_pygambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygambit/lib/libgambit.pyx":35
 * 
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_8pygambit_3lib_9libgambit_8Rational_1_repr_latex_, 0, __pyx_n_s_Rational__repr_latex, NULL, __pyx_n_s_pygambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__152)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_repr_latex, __pyx_t_4) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pygambit/lib/libgambit.pyx":34
 *     pass
 * 
 * class Rational(fractions.Fraction):             # <<<<<<<<<<<<<<
 *     def _repr_latex_(self):
 *         if self.denominator != 1:
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Rational, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Rational, __pyx_t_4) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/action.pxi":23
 * #
 * from libcpp.string cimport string
 * from pygambit.lib.error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class Action:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pygambit_lib_error, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_1) < 0) __PYX_ERR(6, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/infoset.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * from pygambit.lib.error import MismatchError             # <<<<<<<<<<<<<<
 * 
 * cdef class Members(Collection):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MismatchError);
  __Pyx_GIVEREF(__pyx_n_s_MismatchError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MismatchError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pygambit_lib_error, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MismatchError, __pyx_t_2) < 0) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/strategy.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * from .error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class Strategy:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_error, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_1) < 0) __PYX_ERR(8, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/player.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * from .error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class Infosets(Collection):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_error, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_2) < 0) __PYX_ERR(9, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/node.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * from .error import MismatchError, UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class Children(Collection):
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_MismatchError);
  __Pyx_GIVEREF(__pyx_n_s_MismatchError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_MismatchError);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_UndefinedOperationError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_error, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MismatchError, __pyx_t_1) < 0) __PYX_ERR(11, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_1) < 0) __PYX_ERR(11, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/stratspt.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * import itertools             # <<<<<<<<<<<<<<
 * import functools
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_2) < 0) __PYX_ERR(2, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/stratspt.pxi":23
 * #
 * import itertools
 * import functools             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref
 * from .error import UndefinedOperationError
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_functools, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_functools, __pyx_t_2) < 0) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pygambit/lib/stratspt.pxi":25
 * import functools
 * from cython.operator cimport dereference as deref
 * from .error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class StrategySupportProfile(Collection):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_error, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_2) < 0) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/mixed.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import zip_longest
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "pygambit/lib/mixed.pxi":23
 * #
 * try:
 *     from itertools import zip_longest             # <<<<<<<<<<<<<<
 * except ImportError:
 *     from itertools import izip_longest as zip_longest
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 23, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_zip_longest);
      __Pyx_GIVEREF(__pyx_n_s_zip_longest);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_zip_longest);
      __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 23, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_zip_longest); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 23, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_zip_longest, __pyx_t_1) < 0) __PYX_ERR(1, 23, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pygambit/lib/mixed.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import zip_longest
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pygambit/lib/mixed.pxi":24
 * try:
 *     from itertools import zip_longest
 * except ImportError:             # <<<<<<<<<<<<<<
 *     from itertools import izip_longest as zip_longest
 * import functools
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("pygambit.lib.libgambit", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(1, 24, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_3);

      /* "pygambit/lib/mixed.pxi":25
 *     from itertools import zip_longest
 * except ImportError:
 *     from itertools import izip_longest as zip_longest             # <<<<<<<<<<<<<<
 * import functools
 * 
 */
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 25, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_n_s_izip_longest);
      __Pyx_GIVEREF(__pyx_n_s_izip_longest);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_izip_longest);
      __pyx_t_9 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_4, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 25, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_9, __pyx_n_s_izip_longest); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 25, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_zip_longest, __pyx_t_4) < 0) __PYX_ERR(1, 25, __pyx_L4_except_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "pygambit/lib/mixed.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * try:             # <<<<<<<<<<<<<<
 *     from itertools import zip_longest
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L7_try_end:;
  }

  /* "pygambit/lib/mixed.pxi":26
 * except ImportError:
 *     from itertools import izip_longest as zip_longest
 * import functools             # <<<<<<<<<<<<<<
 * 
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_functools, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_functools, __pyx_t_3) < 0) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygambit/lib/mixed.pxi":29
 * 
 * from cython.operator cimport dereference as deref
 * from pygambit.lib.error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pygambit_lib_error, __pyx_t_3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_3) < 0) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/behav.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * import functools             # <<<<<<<<<<<<<<
 * 
 * from libcpp cimport bool
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_functools, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_functools, __pyx_t_1) < 0) __PYX_ERR(3, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * import itertools             # <<<<<<<<<<<<<<
 * 
 * from libcpp cimport bool
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_1) < 0) __PYX_ERR(12, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/game.pxi":25
 * 
 * from libcpp cimport bool
 * from pygambit.lib.error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * import pygambit.gte
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pygambit_lib_error, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_1) < 0) __PYX_ERR(12, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":26
 * from libcpp cimport bool
 * from pygambit.lib.error import UndefinedOperationError
 * import pygambit.gte             # <<<<<<<<<<<<<<
 * 
 * cdef class Outcomes(Collection):
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_pygambit_gte, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pygambit, __pyx_t_3) < 0) __PYX_ERR(12, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pygambit/lib/game.pxi":126
 * 
 *     @classmethod
 *     def new_tree(cls):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game, __pyx_n_s_new_tree); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygambit/lib/game.pxi":125
 *     cdef c_Game game
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def new_tree(cls):
 *         cdef Game g
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_new_tree, __pyx_t_1) < 0) __PYX_ERR(12, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pygambit_3lib_9libgambit_Game);

  /* "pygambit/lib/game.pxi":133
 * 
 *     @classmethod
 *     def new_table(cls, dim):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         cdef Array[int] *d
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game, __pyx_n_s_new_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygambit/lib/game.pxi":132
 *         return g
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def new_table(cls, dim):
 *         cdef Game g
 */
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_new_table, __pyx_t_3) < 0) __PYX_ERR(12, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_8pygambit_3lib_9libgambit_Game);

  /* "pygambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game, __pyx_n_s_from_arrays); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygambit/lib/game.pxi":144
 *         return g
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_from_arrays, __pyx_t_1) < 0) __PYX_ERR(12, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pygambit_3lib_9libgambit_Game);

  /* "pygambit/lib/game.pxi":158
 * 
 *     @classmethod
 *     def read_game(cls, fn):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game, __pyx_n_s_read_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "pygambit/lib/game.pxi":157
 * 
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_game(cls, fn):
 *         cdef Game g
 */
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_read_game, __pyx_t_3) < 0) __PYX_ERR(12, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_8pygambit_3lib_9libgambit_Game);

  /* "pygambit/lib/game.pxi":169
 * 
 *     @classmethod
 *     def parse_game(cls, s):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game, __pyx_n_s_parse_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(12, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "pygambit/lib/game.pxi":168
 *         return g
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def parse_game(cls, s):
 *         cdef Game g
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pygambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_parse_game, __pyx_t_1) < 0) __PYX_ERR(12, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pygambit_3lib_9libgambit_Game);

  /* "pygambit/lib/nash.pxi":445
 *             return profile
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):             # <<<<<<<<<<<<<<
 *     """Estimate QRE corresponding to mixed strategy profile using
 *     maximum likelihood along the principal branch.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_1logit_estimate, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logit_estimate, __pyx_t_1) < 0) __PYX_ERR(4, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/nash.pxi":454
 *     return ret
 * 
 * def logit_atlambda(Game p_game, double p_lambda):             # <<<<<<<<<<<<<<
 *     """Compute the first QRE along the principal branch with the given
 *     lambda parameter.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_3logit_atlambda, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logit_atlambda, __pyx_t_1) < 0) __PYX_ERR(4, 454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/nash.pxi":463
 *     return ret
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):             # <<<<<<<<<<<<<<
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_5logit_principal_branch, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logit_principal_branch, __pyx_t_1) < 0) __PYX_ERR(4, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Collection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_7__pyx_unpickle_Collection, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Collection, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Collection__set_state(<Collection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Collection__set_state(Collection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_9__pyx_unpickle_PlayerSupportStrategies, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PlayerSupportStra, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseGame(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_11__pyx_unpickle_BaseGame, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BaseGame, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_BaseGame__set_state(<BaseGame> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseGame__set_state(BaseGame __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_13__pyx_unpickle_RestrictionOutcomes, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_RestrictionOutcom, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RestrictionStrategies(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_15__pyx_unpickle_RestrictionStrategies, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_RestrictionStrate, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_RestrictionStrategies__set_state(<RestrictionStrategies> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RestrictionStrategies__set_state(RestrictionStrategies __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.restriction = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_17__pyx_unpickle_MixedStrategyProfile, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_MixedStrategyProf, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_MixedBehaviorProfile(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pygambit_3lib_9libgambit_19__pyx_unpickle_MixedBehaviorProfile, NULL, __pyx_n_s_pygambit_lib_libgambit); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_MixedBehaviorProf, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pygambit/lib/libgambit.pyx":1
 * # cython: language_level=3str             # <<<<<<<<<<<<<<
 * #
 * # This file is part of Gambit
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pygambit.lib.libgambit", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pygambit.lib.libgambit");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* StringJoin */
#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* SliceTupleAndList */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_2); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_2); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_2); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_2, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
